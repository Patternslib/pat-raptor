(function(){;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/resizetable.js
function countColumns(tableElement) {
    // calculate current number of columns of a table,
    // taking into account rowspans and colspans

    var tr, td, i, j, k, cs, rs;
    var rowspanLeft = new Array();
    var tableCols = 0;
    var tableRows = tableElement.rows.length;
    i = 0;
    while (i < tableRows) {
        var tr = tableElement.rows[i];
        var j = 0;
        var k = 0;
        // Trace and adjust the cells of this row
        while (j < tr.cells.length || k < rowspanLeft.length) {
            if (rowspanLeft[k]) {
                rowspanLeft[k++]--;
            } else if (j >= tr.cells.length) {
                k++;
            } else {
                td = tr.cells[j++];
                rs = Math.max(1, parseInt(td.rowSpan));
                for (cs = Math.max(1, parseInt(td.colSpan)); cs > 0; cs--) {
                    if (rowspanLeft[k])
                        break; // Overlapping colspan and rowspan cells
                    rowspanLeft[k++] = rs - 1;
                }
            }
        }
        tableCols = Math.max(k, tableCols);
        i++;
    }
    return tableCols;
}

function resizeTable(tableElement, rCount, rStart, cCount, cStart, options) {
    // Insert or remove rows and columns in the table, taking into account
    // rowspans and colspans
    // Parameters:
    //   tableElement: DOM element representing existing table to be modified
    //   rCount:       number of rows to add (if >0) or delete (if <0)
    //   rStart:       number of row where rows should be added/deleted
    //   cCount:       number of columns to add (if >0) or delete (if <0)
    //   cStart:       number of column where columns should be added/deleted
    //   cCount
    //   cStart
    var tr, td, i, j, k, l, cs, rs;
    var rowspanLeft = [];
    var rowspanCell = [];
    var tableRows0 = tableElement.rows.length;
    var tableCols0 = countColumns(tableElement);
    var cells = [];

    if (rCount > 0) { // Prep insertion of rows
        for (i = rStart; i < rStart + rCount; i++) {
            tableElement.insertRow(i);
        }
    }
    i = 0;
    while (i < tableRows0) {
        var tr = tableElement.rows[i];
        var j = 0;
        var k = 0;
        // Trace and adjust the cells of this row
        while (k < tableCols0) {
            if (cCount > 0 && k === cStart) { // Insert columns by inserting cells
                for (l = 0; l < cCount; l++) {  // between/before existing cells
                    cells.push(insertEmptyCell(tr, j++, options.placeHolder));
                }
            }
            if (rowspanLeft[k]) {
                if (rCount < 0
                        && i === rStart - rCount && rowspanCell[k]
                        && rowspanCell[k].rowSpan == 1) {
                    // This is the first row after a series of to-be-deleted rows.
                    // Any rowspan-cells covering this row which started in the
                    // to-be-deleted rows have to be moved into this row, with
                    // rowspan adjusted. All such cells are marked td.rowSpan==1.
                    td = rowspanCell[k];
                    if (j >= tr.cells.length) {
                        tr.appendChild(td);
                    } else {
                        tr.insertBefore(td, tr.cells[j]);
                    }
                    j++;
                    rs = td.rowSpan = rowspanLeft[k];
                    for (cs = Math.max(1, parseInt(td.colSpan)); cs > 0; --cs) {
                        rowspanLeft[k++] = rs - 1;
                    }
                } else {
                    if (--rowspanLeft[k++] === 0)
                        rowspanCell[k] = null;
                    while (rowspanLeft[k] && !rowspanCell[k]) {
                        // This is a cell of a block with both rowspan and colspan>1
                        // Handle all remaining cells in this row of the block, so as to
                        // avoid inserting cells which are already covered by the block
                        --rowspanLeft[k++];
                    }
                }
            } else {
                if (j >= tr.cells.length) {
                    cells.push(insertEmptyCell(tr, j, options.placeHolder)); // append missing cell
                }
                td = tr.cells[j++];
                rs = Math.max(1, parseInt(td.rowSpan));
                if (rs > 1) {
                    rowspanCell[k] = td;
                    if (rCount < 0 && i >= rStart && i < rStart - rCount) {//row is to-be-deleted
                        td.rowSpan = 1; // Mark cell as to-be-moved-down-later
                    }
                }
                var k0 = k;
                for (cs = Math.max(1, parseInt(td.colSpan)); cs > 0; --cs) {
                    if (rowspanLeft[k]) { // Overlapping colspan and rowspan cells
                        td.colSpan -= cs; // Set adjustment into table
                        break;
                    }
                    rowspanLeft[k++] = rs - 1;
                }
                if (rCount < 0 && i >= rStart && i < rStart - rCount) {
                    // This row is to be deleted: do not insert/remove columns,
                    // but preserve row as-is so we can move cells down later on
                } else if (cCount > 0 && k > cStart && k0 < cStart) {
                    td.colSpan += cCount; // Insert columns by widening cell
                } else if (cCount < 0 && k0 < cStart - cCount && k > cStart) {
                    // Delete columns in overlap of [k0,k> and [cStart,cStart-cCount>
                    var newColSpan = Math.max(0, cStart - k0) + Math.max(0, k - (cStart - cCount));
                    if (newColSpan) {
                        // .. by reducing width of cell containing to-be-deleted columns
                        td.colSpan = newColSpan;
                    } else {
                        // .. by removing fully-encompassed cell
                        tr.deleteCell(--j);
                    }
                }
            }
        }
        if (cCount > 0 && k === cStart) { // Insert columns by appending cells to row
            for (l = 0; l < cCount; l++) {
                cells.push(insertEmptyCell(tr, j++, options.placeHolder));
            }
        }
        i++;
        if (rCount > 0 && i === rStart) {
            // Adjust rowspans present at start of inserted rows
            for (l = 0; l < tableCols0; l++) {
                if (rowspanLeft[l])
                    rowspanLeft[l] += rCount;
                if (rowspanCell[l])
                    rowspanCell[l].rowSpan += rCount;
            }
        } else if (rCount < 0 && i === rStart) {
            // Adjust rowspans present at start of to-be-deleted rows
            for (l = 0; l < rowspanCell.length; l++) {
                if (rowspanCell[l]) {
                    rowspanCell[l].rowSpan -= Math.min(-rCount, rowspanLeft[l]);
                }
            }
        }
    }
    if (rCount < 0) {
        for (i = rStart; i < rStart - rCount; i++) {
            tableElement.deleteRow(i);
        }
    }
    return cells;
}

function insertEmptyCell(row, index, placeHolder) {
    var sibling, cell;
    // Check the cell's sibling to detect header cells
    if (index > 0) {
        sibling = row.cells[index - 1];
    } else if (index < row.cells.length) {
        sibling = row.cells[index + 1];
    }

    // Header cell
    cell = row.insertCell(index);
    if (sibling && sibling.tagName === 'TH') {
        var header = document.createElement('th');
        if (placeHolder) {
            header.innerHTML = placeHolder;
        }
        $(cell).replaceWith(header)
    } else if (placeHolder) {
        cell.innerHTML = placeHolder;
    }
    return cell;
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/resizetable.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/goog-table.js
// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// https://code.google.com/p/closure-library/source/browse/closure/goog/editor/table.js
//
// Modified by David Neilsen <david@panmedia.co.nz>

/**
 * Class providing high level table editing functions.
 * @param {Element} node Element that is a table or descendant of a table.
 * @constructor
 */
GoogTable = function(node) {
    this.element = node;
    this.refresh();
};


/**
 * Walks the dom structure of this object's table element and populates
 * this.rows with GoogTableRow objects. This is done initially
 * to populate the internal data structures, and also after each time the
 * DOM structure is modified. Currently this means that the all existing
 * information is discarded and re-read from the DOM.
 */
// TODO(user): support partial refresh to save cost of full update
// every time there is a change to the DOM.
GoogTable.prototype.refresh = function() {
    var rows = this.rows = [];
    var tbody = this.element.tBodies[0];
    if (!tbody) {
        return;
    }
    var trs = [];
    for (var child = tbody.firstChild; child; child = child.nextSibling) {
        if (child.tagName === 'TR') {
            trs.push(child);
        }
    }

    for (var rowNum = 0, tr; tr = trs[rowNum]; rowNum++) {
        var existingRow = rows[rowNum];
        var tds = GoogTable.getChildCellElements(tr);
        var columnNum = 0;
        // A note on cellNum vs. columnNum: A cell is a td/th element. Cells may
        // use colspan/rowspan to extend over multiple rows/columns. cellNum
        // is the dom element number, columnNum is the logical column number.
        for (var cellNum = 0, td; td = tds[cellNum]; cellNum++) {
            // If there's already a cell extending into this column
            // (due to that cell's colspan/rowspan), increment the column counter.
            while (existingRow && existingRow.columns[columnNum]) {
                columnNum++;
            }
            var cell = new GoogTableCell(td, rowNum, columnNum);
            // Place this cell in every row and column into which it extends.
            for (var i = 0; i < cell.rowSpan; i++) {
                var cellRowNum = rowNum + i;
                // Create TableRow objects in this.rows as needed.
                var cellRow = rows[cellRowNum];
                if (!cellRow) {
                    // TODO(user): try to avoid second trs[] lookup.
                    rows.push(
                            cellRow = new GoogTableRow(trs[cellRowNum], cellRowNum));
                }
                // Extend length of column array to make room for this cell.
                var minimumColumnLength = columnNum + cell.colSpan;
                if (cellRow.columns.length < minimumColumnLength) {
                    cellRow.columns.length = minimumColumnLength;
                }
                for (var j = 0; j < cell.colSpan; j++) {
                    var cellColumnNum = columnNum + j;
                    cellRow.columns[cellColumnNum] = cell;
                }
            }
            columnNum += cell.colSpan;
        }
    }
};


/**
 * Returns all child elements of a TR element that are of type TD or TH.
 * @param {Element} tr TR element in which to find children.
 * @return {Array.<Element>} array of child cell elements.
 */
GoogTable.getChildCellElements = function(tr) {
    var cells = [];
    for (var i = 0, cell; cell = tr.childNodes[i]; i++) {
        if (cell.tagName === 'TD' ||
                cell.tagName === 'TH') {
            cells.push(cell);
        }
    }
    return cells;
};


/**
 * Inserts a new row in the table. The row will be populated with new
 * cells, and existing rowspanned cells that overlap the new row will
 * be extended.
 * @param {number=} rowIndex Index at which to insert the row. If
 *     this is omitted the row will be appended to the end of the table.
 * @return {Element} The new row.
 */
GoogTable.prototype.insertRow = function(rowIndex, options) {
    var rowIndex = rowIndex || this.rows.length;
    var refRow;
    var insertAfter;
    if (rowIndex == 0) {
        refRow = this.rows[0];
        insertAfter = false;
    } else {
        refRow = this.rows[rowIndex - 1];
        insertAfter = true;
    }
    var newTr = document.createElement('tr');
    for (var i = 0, cell; cell = refRow.columns[i]; i += 1) {
        // Check whether the existing cell will span this new row.
        // If so, instead of creating a new cell, extend
        // the rowspan of the existing cell.
        if ((insertAfter && cell.endRow > rowIndex) ||
            (!insertAfter && cell.startRow < rowIndex)) {
            cell.setRowSpan(cell.rowSpan + 1);
            if (cell.colSpan > 1) {
                i += cell.colSpan - 1;
            }
        } else {
            var newTd = document.createElement('td');
            newTd.innerHTML = options.placeHolder;
            newTr.appendChild(newTd);
        }
        if (insertAfter) {
            refRow.element.parentNode.insertBefore(newTr, refRow.element.nextSibling);
        } else {
            refRow.element.insertBefore(newTr);
        }
    }
    this.refresh();
    return newTr;
};


/**
 * Inserts a new column in the table. The column will be created by
 * inserting new TD elements in each row, or extending the colspan
 * of existing TD elements.
 * @param {number=} colIndex Index at which to insert the column. If
 *     this is omitted the column will be appended to the right side of
 *     the table.
 * @return {Array.<Element>} Array of new cell elements that were created
 *     to populate the new column.
 */
//GoogTable.prototype.insertColumn = function(colIndex, options) {
//    // TODO(user): set column widths in a way that makes sense.
//    var colIndex = colIndex || ((this.rows[0] && this.rows[0].columns.length) || 0);
//    var newTds = [];
//    for (var rowNum = 0, row; row = this.rows[rowNum]; rowNum++) {
//        var existingCell = row.columns[colIndex];
//        if (existingCell && existingCell.endCol >= colIndex &&
//            existingCell.startCol < colIndex) {
//            existingCell.setColSpan(existingCell.colSpan + 1);
//            rowNum += existingCell.rowSpan - 1;
//        } else {
//            var newTd = document.createElement('td');
//            newTd.innerHTML = options.placeHolder;
//            this.insertCellElement(newTd, rowNum, colIndex);
//            newTds.push(newTd);
//        }
//    }
//    this.refresh();
//    return newTds;
//};

/**
 * Merges multiple cells into a single cell, and sets the rowSpan and colSpan
 * attributes of the cell to take up the same space as the original cells.
 * @param {number} startRowIndex Top coordinate of the cells to merge.
 * @param {number} startColIndex Left coordinate of the cells to merge.
 * @param {number} endRowIndex Bottom coordinate of the cells to merge.
 * @param {number} endColIndex Right coordinate of the cells to merge.
 * @return {boolean} Whether or not the merge was possible. If the cells
 *     in the supplied coordinates can't be merged this will return false.
 */
GoogTable.prototype.mergeCells = function(
        startRowIndex, startColIndex, endRowIndex, endColIndex) {
    // TODO(user): take a single goog.math.Rect parameter instead?
    var cells = [];
    var cell;
    if (startRowIndex == endRowIndex && startColIndex == endColIndex) {
        // <strict/>
        return false;
    }
    // Gather cells and do sanity check.
    for (var i = startRowIndex; i <= endRowIndex; i++) {
        for (var j = startColIndex; j <= endColIndex; j++) {
            cell = this.rows[i].columns[j];
            if (cell.startRow < startRowIndex ||
                    cell.endRow > endRowIndex ||
                    cell.startCol < startColIndex ||
                    cell.endCol > endColIndex) {
                // <strict/>
                return false;
            }
            // TODO(user): this is somewhat inefficient, as we will add
            // a reference for a cell for each position, even if it's a single
            // cell with row/colspan.
            cells.push(cell);
        }
    }
    var targetCell = cells[0];
    var targetTd = targetCell.element;
    var doc = document;

    // Merge cell contents and discard other cells.
    for (var i = 1; cell = cells[i]; i++) {
        var td = cell.element;
        if (!td.parentNode || td == targetTd) {
            // We've already handled this cell at one of its previous positions.
            continue;
        }
        // Add a space if needed, to keep merged content from getting squished
        // together.
        if (targetTd.lastChild &&
                targetTd.lastChild.nodeType === Node.TEXT_NODE) {
            targetTd.appendChild(doc.createElement('br'));
        }
        var childNode;
        while ((childNode = td.firstChild)) {
            targetTd.appendChild(childNode);
        }
        td.parentNode.removeChild(td);
    }
    targetCell.setColSpan((endColIndex - startColIndex) + 1);
    targetCell.setRowSpan((endRowIndex - startRowIndex) + 1);
    this.refresh();

    return true;
};


/**
 * Splits a cell with colspans or rowspans into multiple descrete cells.
 * @param {number} rowIndex y coordinate of the cell to split.
 * @param {number} colIndex x coordinate of the cell to split.
 * @return {Array.<Element>} Array of new cell elements created by splitting
 *     the cell.
 */
// TODO(user): support splitting only horizontally or vertically,
// support splitting cells that aren't already row/colspanned.
GoogTable.prototype.splitCell = function(rowIndex, colIndex) {
    var row = this.rows[rowIndex];
    var cell = row.columns[colIndex];
    var newTds = [];
    var html = cell.element.innerHTML;
    for (var i = 0; i < cell.rowSpan; i++) {
        for (var j = 0; j < cell.colSpan; j++) {
            if (i > 0 || j > 0) {
                var newTd = document.createElement('td');
                this.insertCellElement(newTd, rowIndex + i, colIndex + j);
                newTds.push(newTd);
            }
        }
    }
    cell.setColSpan(1);
    cell.setRowSpan(1);
    // Set first cell HTML
    newTds[0].innerHTML = html;
    cell.element.innerHTML = '';
    this.refresh();
    return newTds;
};


/**
 * Inserts a cell element at the given position. The colIndex is the logical
 * column index, not the position in the dom. This takes into consideration
 * that cells in a given logical  row may actually be children of a previous
 * DOM row that have used rowSpan to extend into the row.
 * @param {Element} td The new cell element to insert.
 * @param {number} rowIndex Row in which to insert the element.
 * @param {number} colIndex Column in which to insert the element.
 */
GoogTable.prototype.insertCellElement = function(
        td, rowIndex, colIndex) {
    var row = this.rows[rowIndex];
    var nextSiblingElement = null;
    for (var i = colIndex, cell; cell = row.columns[i]; i += cell.colSpan) {
        if (cell.startRow == rowIndex) {
            nextSiblingElement = cell.element;
            break;
        }
    }
    row.element.insertBefore(td, nextSiblingElement);
};


/**
 * Class representing a logical table row: a tr element and any cells
 * that appear in that row.
 * @param {Element} trElement This rows's underlying TR element.
 * @param {number} rowIndex This row's index in its parent table.
 * @constructor
 */
GoogTableRow = function(trElement, rowIndex) {
    this.index = rowIndex;
    this.element = trElement;
    this.columns = [];
};



/**
 * Class representing a table cell, which may span across multiple
 * rows and columns
 * @param {Element} td This cell's underlying TD or TH element.
 * @param {number} startRow Index of the row where this cell begins.
 * @param {number} startCol Index of the column where this cell begins.
 * @constructor
 */
GoogTableCell = function(td, startRow, startCol) {
    this.element = td;
    this.colSpan = parseInt(td.colSpan, 10) || 1;
    this.rowSpan = parseInt(td.rowSpan, 10) || 1;
    this.startRow = startRow;
    this.startCol = startCol;
    this.updateCoordinates_();
};


/**
 * Calculates this cell's endRow/endCol coordinates based on rowSpan/colSpan
 * @private
 */
GoogTableCell.prototype.updateCoordinates_ = function() {
    this.endCol = this.startCol + this.colSpan - 1;
    this.endRow = this.startRow + this.rowSpan - 1;
};


/**
 * Set this cell's colSpan, updating both its colSpan property and the
 * underlying element's colSpan attribute.
 * @param {number} colSpan The new colSpan.
 */
GoogTableCell.prototype.setColSpan = function(colSpan) {
    if (colSpan != this.colSpan) {
        if (colSpan > 1) {
            this.element.colSpan = colSpan;
        } else {
            this.element.colSpan = 1,
                    this.element.removeAttribute('colSpan');
        }
        this.colSpan = colSpan;
        this.updateCoordinates_();
    }
};


/**
 * Set this cell's rowSpan, updating both its rowSpan property and the
 * underlying element's rowSpan attribute.
 * @param {number} rowSpan The new rowSpan.
 */
GoogTableCell.prototype.setRowSpan = function(rowSpan) {
    if (rowSpan != this.rowSpan) {
        if (rowSpan > 1) {
            this.element.rowSpan = rowSpan.toString();
        } else {
            this.element.rowSpan = '1';
            this.element.removeAttribute('rowSpan');
        }
        this.rowSpan = rowSpan;
        this.updateCoordinates_();
    }
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/goog-table.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/plupload.js
/*1.5.7*/
(function() {
    var f = 0, k = [], m = {}, i = {}, a = {"<": "lt", ">": "gt", "&": "amp", '"': "quot", "'": "#39"}, l = /[<>&\"\']/g, b, c = window.setTimeout, d = {}, e;
    function h() {
        this.returnValue = false
    }
    function j() {
        this.cancelBubble = true
    }
    (function(n) {
        var o = n.split(/,/), p, r, q;
        for (p = 0; p < o.length; p += 2) {
            q = o[p + 1].split(/ /);
            for (r = 0; r < q.length; r++) {
                i[q[r]] = o[p]
            }
        }
    })("application/msword,doc dot,application/pdf,pdf,application/pgp-signature,pgp,application/postscript,ps ai eps,application/rtf,rtf,application/vnd.ms-excel,xls xlb,application/vnd.ms-powerpoint,ppt pps pot,application/zip,zip,application/x-shockwave-flash,swf swfl,application/vnd.openxmlformats-officedocument.wordprocessingml.document,docx,application/vnd.openxmlformats-officedocument.wordprocessingml.template,dotx,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,xlsx,application/vnd.openxmlformats-officedocument.presentationml.presentation,pptx,application/vnd.openxmlformats-officedocument.presentationml.template,potx,application/vnd.openxmlformats-officedocument.presentationml.slideshow,ppsx,application/x-javascript,js,application/json,json,audio/mpeg,mpga mpega mp2 mp3,audio/x-wav,wav,audio/mp4,m4a,image/bmp,bmp,image/gif,gif,image/jpeg,jpeg jpg jpe,image/photoshop,psd,image/png,png,image/svg+xml,svg svgz,image/tiff,tiff tif,text/plain,asc txt text diff log,text/html,htm html xhtml,text/css,css,text/csv,csv,text/rtf,rtf,video/mpeg,mpeg mpg mpe m2v,video/quicktime,qt mov,video/mp4,mp4,video/x-m4v,m4v,video/x-flv,flv,video/x-ms-wmv,wmv,video/avi,avi,video/webm,webm,video/3gpp,3gp,video/3gpp2,3g2,video/vnd.rn-realvideo,rv,application/vnd.oasis.opendocument.formula-template,otf,application/octet-stream,exe");
    var g = {VERSION: "1.5.7", STOPPED: 1, STARTED: 2, QUEUED: 1, UPLOADING: 2, FAILED: 4, DONE: 5, GENERIC_ERROR: -100, HTTP_ERROR: -200, IO_ERROR: -300, SECURITY_ERROR: -400, INIT_ERROR: -500, FILE_SIZE_ERROR: -600, FILE_EXTENSION_ERROR: -601, IMAGE_FORMAT_ERROR: -700, IMAGE_MEMORY_ERROR: -701, IMAGE_DIMENSIONS_ERROR: -702, mimeTypes: i, ua: (function() {
            var r = navigator, q = r.userAgent, s = r.vendor, o, n, p;
            o = /WebKit/.test(q);
            p = o && s.indexOf("Apple") !== -1;
            n = window.opera && window.opera.buildNumber;
            return{windows: navigator.platform.indexOf("Win") !== -1, android: /Android/.test(q), ie: !o && !n && (/MSIE/gi).test(q) && (/Explorer/gi).test(r.appName), webkit: o, gecko: !o && /Gecko/.test(q), safari: p, opera: !!n}
        }()), typeOf: function(n) {
            return({}).toString.call(n).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()
        }, extend: function(n) {
            g.each(arguments, function(o, p) {
                if (p > 0) {
                    g.each(o, function(r, q) {
                        n[q] = r
                    })
                }
            });
            return n
        }, cleanName: function(n) {
            var o, p;
            p = [/[\300-\306]/g, "A", /[\340-\346]/g, "a", /\307/g, "C", /\347/g, "c", /[\310-\313]/g, "E", /[\350-\353]/g, "e", /[\314-\317]/g, "I", /[\354-\357]/g, "i", /\321/g, "N", /\361/g, "n", /[\322-\330]/g, "O", /[\362-\370]/g, "o", /[\331-\334]/g, "U", /[\371-\374]/g, "u"];
            for (o = 0; o < p.length; o += 2) {
                n = n.replace(p[o], p[o + 1])
            }
            n = n.replace(/\s+/g, "_");
            n = n.replace(/[^a-z0-9_\-\.]+/gi, "");
            return n
        }, addRuntime: function(n, o) {
            o.name = n;
            k[n] = o;
            k.push(o);
            return o
        }, guid: function() {
            var n = new Date().getTime().toString(32), o;
            for (o = 0; o < 5; o++) {
                n += Math.floor(Math.random() * 65535).toString(32)
            }
            return(g.guidPrefix || "p") + n + (f++).toString(32)
        }, buildUrl: function(o, n) {
            var p = "";
            g.each(n, function(r, q) {
                p += (p ? "&" : "") + encodeURIComponent(q) + "=" + encodeURIComponent(r)
            });
            if (p) {
                o += (o.indexOf("?") > 0 ? "&" : "?") + p
            }
            return o
        }, each: function(q, r) {
            var p, o, n;
            if (q) {
                p = q.length;
                if (p === b) {
                    for (o in q) {
                        if (q.hasOwnProperty(o)) {
                            if (r(q[o], o) === false) {
                                return
                            }
                        }
                    }
                } else {
                    for (n = 0; n < p; n++) {
                        if (r(q[n], n) === false) {
                            return
                        }
                    }
                }
            }
        }, formatSize: function(n) {
            if (n === b || /\D/.test(n)) {
                return g.translate("N/A")
            }
            if (n > 1073741824) {
                return Math.round(n / 1073741824, 1) + " GB"
            }
            if (n > 1048576) {
                return Math.round(n / 1048576, 1) + " MB"
            }
            if (n > 1024) {
                return Math.round(n / 1024, 1) + " KB"
            }
            return n + " b"
        }, getPos: function(o, s) {
            var t = 0, r = 0, v, u = document, p, q;
            o = o;
            s = s || u.body;
            function n(B) {
                var z, A, w = 0, C = 0;
                if (B) {
                    A = B.getBoundingClientRect();
                    z = u.compatMode === "CSS1Compat" ? u.documentElement : u.body;
                    w = A.left + z.scrollLeft;
                    C = A.top + z.scrollTop
                }
                return{x: w, y: C}
            }
            if (o && o.getBoundingClientRect && g.ua.ie && (!u.documentMode || u.documentMode < 8)) {
                p = n(o);
                q = n(s);
                return{x: p.x - q.x, y: p.y - q.y}
            }
            v = o;
            while (v && v != s && v.nodeType) {
                t += v.offsetLeft || 0;
                r += v.offsetTop || 0;
                v = v.offsetParent
            }
            v = o.parentNode;
            while (v && v != s && v.nodeType) {
                t -= v.scrollLeft || 0;
                r -= v.scrollTop || 0;
                v = v.parentNode
            }
            return{x: t, y: r}
        }, getSize: function(n) {
            return{w: n.offsetWidth || n.clientWidth, h: n.offsetHeight || n.clientHeight}
        }, parseSize: function(n) {
            var o;
            if (typeof (n) == "string") {
                n = /^([0-9]+)([mgk]?)$/.exec(n.toLowerCase().replace(/[^0-9mkg]/g, ""));
                o = n[2];
                n = +n[1];
                if (o == "g") {
                    n *= 1073741824
                }
                if (o == "m") {
                    n *= 1048576
                }
                if (o == "k") {
                    n *= 1024
                }
            }
            return n
        }, xmlEncode: function(n) {
            return n ? ("" + n).replace(l, function(o) {
                return a[o] ? "&" + a[o] + ";" : o
            }) : n
        }, toArray: function(p) {
            var o, n = [];
            for (o = 0; o < p.length; o++) {
                n[o] = p[o]
            }
            return n
        }, inArray: function(p, q) {
            if (q) {
                if (Array.prototype.indexOf) {
                    return Array.prototype.indexOf.call(q, p)
                }
                for (var n = 0, o = q.length; n < o; n++) {
                    if (q[n] === p) {
                        return n
                    }
                }
            }
            return -1
        }, addI18n: function(n) {
            return g.extend(m, n)
        }, translate: function(n) {
            return m[n] || n
        }, isEmptyObj: function(n) {
            if (n === b) {
                return true
            }
            for (var o in n) {
                return false
            }
            return true
        }, hasClass: function(p, o) {
            var n;
            if (p.className == "") {
                return false
            }
            n = new RegExp("(^|\\s+)" + o + "(\\s+|$)");
            return n.test(p.className)
        }, addClass: function(o, n) {
            if (!g.hasClass(o, n)) {
                o.className = o.className == "" ? n : o.className.replace(/\s+$/, "") + " " + n
            }
        }, removeClass: function(p, o) {
            var n = new RegExp("(^|\\s+)" + o + "(\\s+|$)");
            p.className = p.className.replace(n, function(r, q, s) {
                return q === " " && s === " " ? " " : ""
            })
        }, getStyle: function(o, n) {
            if (o.currentStyle) {
                return o.currentStyle[n]
            } else {
                if (window.getComputedStyle) {
                    return window.getComputedStyle(o, null)[n]
                }
            }
        }, addEvent: function(s, n, t) {
            var r, q, p, o;
            o = arguments[3];
            n = n.toLowerCase();
            if (e === b) {
                e = "Plupload_" + g.guid()
            }
            if (s.addEventListener) {
                r = t;
                s.addEventListener(n, r, false)
            } else {
                if (s.attachEvent) {
                    r = function() {
                        var u = window.event;
                        if (!u.target) {
                            u.target = u.srcElement
                        }
                        u.preventDefault = h;
                        u.stopPropagation = j;
                        t(u)
                    };
                    s.attachEvent("on" + n, r)
                }
            }
            if (s[e] === b) {
                s[e] = g.guid()
            }
            if (!d.hasOwnProperty(s[e])) {
                d[s[e]] = {}
            }
            q = d[s[e]];
            if (!q.hasOwnProperty(n)) {
                q[n] = []
            }
            q[n].push({func: r, orig: t, key: o})
        }, removeEvent: function(s, n) {
            var q, t, p;
            if (typeof (arguments[2]) == "function") {
                t = arguments[2]
            } else {
                p = arguments[2]
            }
            n = n.toLowerCase();
            if (s[e] && d[s[e]] && d[s[e]][n]) {
                q = d[s[e]][n]
            } else {
                return
            }
            for (var o = q.length - 1; o >= 0; o--) {
                if (q[o].key === p || q[o].orig === t) {
                    if (s.removeEventListener) {
                        s.removeEventListener(n, q[o].func, false)
                    } else {
                        if (s.detachEvent) {
                            s.detachEvent("on" + n, q[o].func)
                        }
                    }
                    q[o].orig = null;
                    q[o].func = null;
                    q.splice(o, 1);
                    if (t !== b) {
                        break
                    }
                }
            }
            if (!q.length) {
                delete d[s[e]][n]
            }
            if (g.isEmptyObj(d[s[e]])) {
                delete d[s[e]];
                try {
                    delete s[e]
                } catch (r) {
                    s[e] = b
                }
            }
        }, removeAllEvents: function(o) {
            var n = arguments[1];
            if (o[e] === b || !o[e]) {
                return
            }
            g.each(d[o[e]], function(q, p) {
                g.removeEvent(o, p, n)
            })
        }};
    g.Uploader = function(r) {
        var o = {}, u, t = [], q, p = false;
        u = new g.QueueProgress();
        r = g.extend({chunk_size: 0, multipart: true, multi_selection: true, file_data_name: "file", filters: []}, r);
        function s() {
            var w, x = 0, v;
            if (this.state == g.STARTED) {
                for (v = 0; v < t.length; v++) {
                    if (!w && t[v].status == g.QUEUED) {
                        w = t[v];
                        w.status = g.UPLOADING;
                        if (this.trigger("BeforeUpload", w)) {
                            this.trigger("UploadFile", w)
                        }
                    } else {
                        x++
                    }
                }
                if (x == t.length) {
                    this.stop();
                    this.trigger("UploadComplete", t)
                }
            }
        }
        function n() {
            var w, v;
            u.reset();
            for (w = 0; w < t.length; w++) {
                v = t[w];
                if (v.size !== b) {
                    u.size += v.size;
                    u.loaded += v.loaded
                } else {
                    u.size = b
                }
                if (v.status == g.DONE) {
                    u.uploaded++
                } else {
                    if (v.status == g.FAILED) {
                        u.failed++
                    } else {
                        u.queued++
                    }
                }
            }
            if (u.size === b) {
                u.percent = t.length > 0 ? Math.ceil(u.uploaded / t.length * 100) : 0
            } else {
                u.bytesPerSec = Math.ceil(u.loaded / ((+new Date() - q || 1) / 1000));
                u.percent = u.size > 0 ? Math.ceil(u.loaded / u.size * 100) : 0
            }
        }
        g.extend(this, {state: g.STOPPED, runtime: "", features: {}, files: t, settings: r, total: u, id: g.guid(), init: function() {
                var A = this, B, x, w, z = 0, y;
                if (typeof (r.preinit) == "function") {
                    r.preinit(A)
                } else {
                    g.each(r.preinit, function(D, C) {
                        A.bind(C, D)
                    })
                }
                r.page_url = r.page_url || document.location.pathname.replace(/\/[^\/]+$/g, "/");
                if (!/^(\w+:\/\/|\/)/.test(r.url)) {
                    r.url = r.page_url + r.url
                }
                r.chunk_size = g.parseSize(r.chunk_size);
                r.max_file_size = g.parseSize(r.max_file_size);
                A.bind("FilesAdded", function(C, F) {
                    var E, D, H = 0, I, G = r.filters;
                    if (G && G.length) {
                        I = [];
                        g.each(G, function(J) {
                            g.each(J.extensions.split(/,/), function(K) {
                                if (/^\s*\*\s*$/.test(K)) {
                                    I.push("\\.*")
                                } else {
                                    I.push("\\." + K.replace(new RegExp("[" + ("/^$.*+?|()[]{}\\".replace(/./g, "\\$&")) + "]", "g"), "\\$&"))
                                }
                            })
                        });
                        I = new RegExp(I.join("|") + "$", "i")
                    }
                    for (E = 0; E < F.length; E++) {
                        D = F[E];
                        D.loaded = 0;
                        D.percent = 0;
                        D.status = g.QUEUED;
                        if (I && !I.test(D.name)) {
                            C.trigger("Error", {code: g.FILE_EXTENSION_ERROR, message: g.translate("File extension error."), file: D});
                            continue
                        }
                        if (D.size !== b && D.size > r.max_file_size) {
                            C.trigger("Error", {code: g.FILE_SIZE_ERROR, message: g.translate("File size error."), file: D});
                            continue
                        }
                        t.push(D);
                        H++
                    }
                    if (H) {
                        c(function() {
                            A.trigger("QueueChanged");
                            A.refresh()
                        }, 1)
                    } else {
                        return false
                    }
                });
                if (r.unique_names) {
                    A.bind("UploadFile", function(C, D) {
                        var F = D.name.match(/\.([^.]+)$/), E = "tmp";
                        if (F) {
                            E = F[1]
                        }
                        D.target_name = D.id + "." + E
                    })
                }
                A.bind("UploadProgress", function(C, D) {
                    D.percent = D.size > 0 ? Math.ceil(D.loaded / D.size * 100) : 100;
                    n()
                });
                A.bind("StateChanged", function(C) {
                    if (C.state == g.STARTED) {
                        q = (+new Date())
                    } else {
                        if (C.state == g.STOPPED) {
                            for (B = C.files.length - 1; B >= 0; B--) {
                                if (C.files[B].status == g.UPLOADING) {
                                    C.files[B].status = g.QUEUED;
                                    n()
                                }
                            }
                        }
                    }
                });
                A.bind("QueueChanged", n);
                A.bind("Error", function(C, D) {
                    if (D.file) {
                        D.file.status = g.FAILED;
                        n();
                        if (C.state == g.STARTED) {
                            c(function() {
                                s.call(A)
                            }, 1)
                        }
                    }
                });
                A.bind("FileUploaded", function(C, D) {
                    D.status = g.DONE;
                    D.loaded = D.size;
                    C.trigger("UploadProgress", D);
                    c(function() {
                        s.call(A)
                    }, 1)
                });
                if (r.runtimes) {
                    x = [];
                    y = r.runtimes.split(/\s?,\s?/);
                    for (B = 0; B < y.length; B++) {
                        if (k[y[B]]) {
                            x.push(k[y[B]])
                        }
                    }
                } else {
                    x = k
                }
                function v() {
                    var F = x[z++], E, C, D;
                    if (F) {
                        E = F.getFeatures();
                        C = A.settings.required_features;
                        if (C) {
                            C = C.split(",");
                            for (D = 0; D < C.length; D++) {
                                if (!E[C[D]]) {
                                    v();
                                    return
                                }
                            }
                        }
                        F.init(A, function(G) {
                            if (G && G.success) {
                                A.features = E;
                                A.runtime = F.name;
                                A.trigger("Init", {runtime: F.name});
                                A.trigger("PostInit");
                                A.refresh()
                            } else {
                                v()
                            }
                        })
                    } else {
                        A.trigger("Error", {code: g.INIT_ERROR, message: g.translate("Init error.")})
                    }
                }
                v();
                if (typeof (r.init) == "function") {
                    r.init(A)
                } else {
                    g.each(r.init, function(D, C) {
                        A.bind(C, D)
                    })
                }
            }, refresh: function() {
                this.trigger("Refresh")
            }, start: function() {
                if (t.length && this.state != g.STARTED) {
                    this.state = g.STARTED;
                    this.trigger("StateChanged");
                    s.call(this)
                }
            }, stop: function() {
                if (this.state != g.STOPPED) {
                    this.state = g.STOPPED;
                    this.trigger("CancelUpload");
                    this.trigger("StateChanged")
                }
            }, disableBrowse: function() {
                p = arguments[0] !== b ? arguments[0] : true;
                this.trigger("DisableBrowse", p)
            }, getFile: function(w) {
                var v;
                for (v = t.length - 1; v >= 0; v--) {
                    if (t[v].id === w) {
                        return t[v]
                    }
                }
            }, removeFile: function(w) {
                var v;
                for (v = t.length - 1; v >= 0; v--) {
                    if (t[v].id === w.id) {
                        return this.splice(v, 1)[0]
                    }
                }
            }, splice: function(x, v) {
                var w;
                w = t.splice(x === b ? 0 : x, v === b ? t.length : v);
                this.trigger("FilesRemoved", w);
                this.trigger("QueueChanged");
                return w
            }, trigger: function(w) {
                var y = o[w.toLowerCase()], x, v;
                if (y) {
                    v = Array.prototype.slice.call(arguments);
                    v[0] = this;
                    for (x = 0; x < y.length; x++) {
                        if (y[x].func.apply(y[x].scope, v) === false) {
                            return false
                        }
                    }
                }
                return true
            }, hasEventListener: function(v) {
                return !!o[v.toLowerCase()]
            }, bind: function(v, x, w) {
                var y;
                v = v.toLowerCase();
                y = o[v] || [];
                y.push({func: x, scope: w || this});
                o[v] = y
            }, unbind: function(v) {
                v = v.toLowerCase();
                var y = o[v], w, x = arguments[1];
                if (y) {
                    if (x !== b) {
                        for (w = y.length - 1; w >= 0; w--) {
                            if (y[w].func === x) {
                                y.splice(w, 1);
                                break
                            }
                        }
                    } else {
                        y = []
                    }
                    if (!y.length) {
                        delete o[v]
                    }
                }
            }, unbindAll: function() {
                var v = this;
                g.each(o, function(x, w) {
                    v.unbind(w)
                })
            }, destroy: function() {
                this.stop();
                this.trigger("Destroy");
                this.unbindAll()
            }})
    };
    g.File = function(q, o, p) {
        var n = this;
        n.id = q;
        n.name = o;
        n.size = p;
        n.loaded = 0;
        n.percent = 0;
        n.status = 0
    };
    g.Runtime = function() {
        this.getFeatures = function() {
        };
        this.init = function(n, o) {
        }
    };
    g.QueueProgress = function() {
        var n = this;
        n.size = 0;
        n.loaded = 0;
        n.uploaded = 0;
        n.failed = 0;
        n.queued = 0;
        n.percent = 0;
        n.bytesPerSec = 0;
        n.reset = function() {
            n.size = n.loaded = n.uploaded = n.failed = n.queued = n.percent = n.bytesPerSec = 0
        }
    };
    g.runtimes = {};
    window.plupload = g
})();;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/plupload.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/plupload.html4.js
(function(d,a,b,c){function e(f){return a.getElementById(f)}b.runtimes.Html4=b.addRuntime("html4",{getFeatures:function(){return{multipart:true,triggerDialog:(b.ua.gecko&&d.FormData||b.ua.webkit)}},init:function(f,g){f.bind("Init",function(p){var j=a.body,n,h="javascript",k,x,q,z=[],r=/MSIE/.test(navigator.userAgent),t=[],m=p.settings.filters,o,l,s,w;no_type_restriction:for(o=0;o<m.length;o++){l=m[o].extensions.split(/,/);for(w=0;w<l.length;w++){if(l[w]==="*"){t=[];break no_type_restriction}s=b.mimeTypes[l[w]];if(s&&b.inArray(s,t)===-1){t.push(s)}}}t=t.join(",");function v(){var B,y,i,A;q=b.guid();z.push(q);B=a.createElement("form");B.setAttribute("id","form_"+q);B.setAttribute("method","post");B.setAttribute("enctype","multipart/form-data");B.setAttribute("encoding","multipart/form-data");B.setAttribute("target",p.id+"_iframe");B.style.position="absolute";y=a.createElement("input");y.setAttribute("id","input_"+q);y.setAttribute("type","file");y.setAttribute("accept",t);y.setAttribute("size",1);A=e(p.settings.browse_button);if(p.features.triggerDialog&&A){b.addEvent(e(p.settings.browse_button),"click",function(C){if(!y.disabled){y.click()}C.preventDefault()},p.id)}b.extend(y.style,{width:"100%",height:"100%",opacity:0,fontSize:"99px",cursor:"pointer"});b.extend(B.style,{overflow:"hidden"});i=p.settings.shim_bgcolor;if(i){B.style.background=i}if(r){b.extend(y.style,{filter:"alpha(opacity=0)"})}b.addEvent(y,"change",function(F){var D=F.target,C,E=[],G;if(D.value){e("form_"+q).style.top=-1048575+"px";C=D.value.replace(/\\/g,"/");C=C.substring(C.length,C.lastIndexOf("/")+1);E.push(new b.File(q,C));if(!p.features.triggerDialog){b.removeAllEvents(B,p.id)}else{b.removeEvent(A,"click",p.id)}b.removeEvent(y,"change",p.id);v();if(E.length){f.trigger("FilesAdded",E)}}},p.id);B.appendChild(y);j.appendChild(B);p.refresh()}function u(){var i=a.createElement("div");i.innerHTML='<iframe id="'+p.id+'_iframe" name="'+p.id+'_iframe" src="'+h+':&quot;&quot;" style="display:none"></iframe>';n=i.firstChild;j.appendChild(n);b.addEvent(n,"load",function(C){var D=C.target,B,y;if(!k){return}try{B=D.contentWindow.document||D.contentDocument||d.frames[D.id].document}catch(A){p.trigger("Error",{code:b.SECURITY_ERROR,message:b.translate("Security error."),file:k});return}y=B.documentElement.innerText||B.documentElement.textContent;if(y){k.status=b.DONE;k.loaded=1025;k.percent=100;p.trigger("UploadProgress",k);p.trigger("FileUploaded",k,{response:y})}},p.id)}if(p.settings.container){j=e(p.settings.container);if(b.getStyle(j,"position")==="static"){j.style.position="relative"}}p.bind("UploadFile",function(i,A){var B,y;if(A.status==b.DONE||A.status==b.FAILED||i.state==b.STOPPED){return}B=e("form_"+A.id);y=e("input_"+A.id);y.setAttribute("name",i.settings.file_data_name);B.setAttribute("action",i.settings.url);b.each(b.extend({name:A.target_name||A.name},i.settings.multipart_params),function(E,C){var D=a.createElement("input");b.extend(D,{type:"hidden",name:C,value:E});B.insertBefore(D,B.firstChild)});k=A;e("form_"+q).style.top=-1048575+"px";B.submit()});p.bind("FileUploaded",function(i){i.refresh()});p.bind("StateChanged",function(i){if(i.state==b.STARTED){u()}else{if(i.state==b.STOPPED){d.setTimeout(function(){b.removeEvent(n,"load",i.id);if(n.parentNode){n.parentNode.removeChild(n)}},0)}}b.each(i.files,function(A,y){if(A.status===b.DONE||A.status===b.FAILED){var B=e("form_"+A.id);if(B){B.parentNode.removeChild(B)}}})});p.bind("Refresh",function(y){var F,A,B,C,i,G,H,E,D;F=e(y.settings.browse_button);if(F){i=b.getPos(F,e(y.settings.container));G=b.getSize(F);H=e("form_"+q);E=e("input_"+q);b.extend(H.style,{top:i.y+"px",left:i.x+"px",width:G.w+"px",height:G.h+"px"});if(y.features.triggerDialog){if(b.getStyle(F,"position")==="static"){b.extend(F.style,{position:"relative"})}D=parseInt(F.style.zIndex,10);if(isNaN(D)){D=0}b.extend(F.style,{zIndex:D});b.extend(H.style,{zIndex:D-1})}B=y.settings.browse_button_hover;C=y.settings.browse_button_active;A=y.features.triggerDialog?F:H;if(B){b.addEvent(A,"mouseover",function(){b.addClass(F,B)},y.id);b.addEvent(A,"mouseout",function(){b.removeClass(F,B)},y.id)}if(C){b.addEvent(A,"mousedown",function(){b.addClass(F,C)},y.id);b.addEvent(a.body,"mouseup",function(){b.removeClass(F,C)},y.id)}}});f.bind("FilesRemoved",function(y,B){var A,C;for(A=0;A<B.length;A++){C=e("form_"+B[A].id);if(C){C.parentNode.removeChild(C)}}});f.bind("DisableBrowse",function(i,A){var y=a.getElementById("input_"+q);if(y){y.disabled=A}});f.bind("Destroy",function(i){var y,A,B,C={inputContainer:"form_"+q,inputFile:"input_"+q,browseButton:i.settings.browse_button};for(y in C){A=e(C[y]);if(A){b.removeAllEvents(A,i.id)}}b.removeAllEvents(a.body,i.id);b.each(z,function(E,D){B=e("form_"+E);if(B){B.parentNode.removeChild(B)}})});v()});g({success:true})}})})(window,document,plupload);;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/plupload.html4.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/plupload.html5.js
(function(k,m,l,g){var d={},j;function c(s){var r=s.naturalWidth,u=s.naturalHeight;if(r*u>1024*1024){var t=m.createElement("canvas");t.width=t.height=1;var q=t.getContext("2d");q.drawImage(s,-r+1,0);return q.getImageData(0,0,1,1).data[3]===0}else{return false}}function f(u,r,z){var q=m.createElement("canvas");q.width=1;q.height=z;var A=q.getContext("2d");A.drawImage(u,0,0);var t=A.getImageData(0,0,1,z).data;var x=0;var v=z;var y=z;while(y>x){var s=t[(y-1)*4+3];if(s===0){v=y}else{x=y}y=(v+x)>>1}var w=(y/z);return(w===0)?1:w}function o(K,s,t){var v=K.naturalWidth,z=K.naturalHeight;var E=t.width,B=t.height;var F=s.getContext("2d");F.save();var r=c(K);if(r){v/=2;z/=2}var I=1024;var q=m.createElement("canvas");q.width=q.height=I;var u=q.getContext("2d");var G=f(K,v,z);var A=0;while(A<z){var J=A+I>z?z-A:I;var C=0;while(C<v){var D=C+I>v?v-C:I;u.clearRect(0,0,I,I);u.drawImage(K,-C,-A);var x=(C*E/v)<<0;var y=Math.ceil(D*E/v);var w=(A*B/z/G)<<0;var H=Math.ceil(J*B/z/G);F.drawImage(q,0,0,D,J,x,w,y,H);C+=I}A+=I}F.restore();q=u=null}function p(r,s){var q;if("FileReader" in k){q=new FileReader();q.readAsDataURL(r);q.onload=function(){s(q.result)}}else{return s(r.getAsDataURL())}}function n(r,s){var q;if("FileReader" in k){q=new FileReader();q.readAsBinaryString(r);q.onload=function(){s(q.result)}}else{return s(r.getAsBinary())}}function e(u,s,q,y){var t,r,x,v,w=this;p(d[u.id],function(z){t=m.createElement("canvas");t.style.display="none";m.body.appendChild(t);x=new Image();x.onerror=x.onabort=function(){y({success:false})};x.onload=function(){var F,A,C,B,E;if(!s.width){s.width=x.width}if(!s.height){s.height=x.height}v=Math.min(s.width/x.width,s.height/x.height);if(v<1){F=Math.round(x.width*v);A=Math.round(x.height*v)}else{if(s.quality&&q==="image/jpeg"){F=x.width;A=x.height}else{y({success:false});return}}t.width=F;t.height=A;o(x,t,{width:F,height:A});if(q==="image/jpeg"){B=new h(atob(z.substring(z.indexOf("base64,")+7)));if(B.headers&&B.headers.length){E=new a();if(E.init(B.get("exif")[0])){E.setExif("PixelXDimension",F);E.setExif("PixelYDimension",A);B.set("exif",E.getBinary());if(w.hasEventListener("ExifData")){w.trigger("ExifData",u,E.EXIF())}if(w.hasEventListener("GpsData")){w.trigger("GpsData",u,E.GPS())}}}}if(s.quality&&q==="image/jpeg"){try{z=t.toDataURL(q,s.quality/100)}catch(D){z=t.toDataURL(q)}}else{z=t.toDataURL(q)}z=z.substring(z.indexOf("base64,")+7);z=atob(z);if(B&&B.headers&&B.headers.length){z=B.restore(z);B.purge()}t.parentNode.removeChild(t);y({success:true,data:z})};x.src=z})}l.runtimes.Html5=l.addRuntime("html5",{getFeatures:function(){var v,r,u,t,s,q;r=u=s=q=false;if(k.XMLHttpRequest){v=new XMLHttpRequest();u=!!v.upload;r=!!(v.sendAsBinary||v.upload)}if(r){t=!!(v.sendAsBinary||(k.Uint8Array&&k.ArrayBuffer));s=!!(File&&(File.prototype.getAsDataURL||k.FileReader)&&t);q=!!(File&&(File.prototype.mozSlice||File.prototype.webkitSlice||File.prototype.slice))}j=l.ua.safari&&l.ua.windows;return{html5:r,dragdrop:(function(){var w=m.createElement("div");return("draggable" in w)||("ondragstart" in w&&"ondrop" in w)}()),jpgresize:s,pngresize:s,multipart:s||!!k.FileReader||!!k.FormData,canSendBinary:t,cantSendBlobInFormData:!!(l.ua.gecko&&k.FormData&&k.FileReader&&!FileReader.prototype.readAsArrayBuffer)||l.ua.android,progress:u,chunks:q,multi_selection:!(l.ua.safari&&l.ua.windows),triggerDialog:(l.ua.gecko&&k.FormData||l.ua.webkit)}},init:function(s,u){var q,t;function r(z){var x,w,y=[],A,v={};for(w=0;w<z.length;w++){x=z[w];if(v[x.name]&&l.ua.safari&&l.ua.windows){continue}v[x.name]=true;A=l.guid();d[A]=x;y.push(new l.File(A,x.fileName||x.name,x.fileSize||x.size))}if(y.length){s.trigger("FilesAdded",y)}}q=this.getFeatures();if(!q.html5){u({success:false});return}s.bind("Init",function(A){var J,I,F=[],z,G,w=A.settings.filters,x,E,v=m.body,H;J=m.createElement("div");J.id=A.id+"_html5_container";l.extend(J.style,{position:"absolute",background:s.settings.shim_bgcolor||"transparent",width:"100px",height:"100px",overflow:"hidden",zIndex:99999,opacity:s.settings.shim_bgcolor?"":0});J.className="plupload html5";if(s.settings.container){v=m.getElementById(s.settings.container);if(l.getStyle(v,"position")==="static"){v.style.position="relative"}}v.appendChild(J);no_type_restriction:for(z=0;z<w.length;z++){x=w[z].extensions.split(/,/);for(G=0;G<x.length;G++){if(x[G]==="*"){F=[];break no_type_restriction}E=l.mimeTypes[x[G]];if(E&&l.inArray(E,F)===-1){F.push(E)}}}J.innerHTML='<input id="'+s.id+'_html5"  style="font-size:999px" type="file" accept="'+F.join(",")+'" '+(s.settings.multi_selection&&s.features.multi_selection?'multiple="multiple"':"")+" />";J.scrollTop=100;H=m.getElementById(s.id+"_html5");if(A.features.triggerDialog){l.extend(H.style,{position:"absolute",width:"100%",height:"100%"})}else{l.extend(H.style,{cssFloat:"right",styleFloat:"right"})}H.onchange=function(){r(this.files);this.value=""};I=m.getElementById(A.settings.browse_button);if(I){var C=A.settings.browse_button_hover,D=A.settings.browse_button_active,B=A.features.triggerDialog?I:J;if(C){l.addEvent(B,"mouseover",function(){l.addClass(I,C)},A.id);l.addEvent(B,"mouseout",function(){l.removeClass(I,C)},A.id)}if(D){l.addEvent(B,"mousedown",function(){l.addClass(I,D)},A.id);l.addEvent(m.body,"mouseup",function(){l.removeClass(I,D)},A.id)}if(A.features.triggerDialog){l.addEvent(I,"click",function(K){var y=m.getElementById(A.id+"_html5");if(y&&!y.disabled){y.click()}K.preventDefault()},A.id)}}});s.bind("PostInit",function(){var v=m.getElementById(s.settings.drop_element);if(v){if(j){l.addEvent(v,"dragenter",function(z){var y,w,x;y=m.getElementById(s.id+"_drop");if(!y){y=m.createElement("input");y.setAttribute("type","file");y.setAttribute("id",s.id+"_drop");y.setAttribute("multiple","multiple");l.addEvent(y,"change",function(){r(this.files);l.removeEvent(y,"change",s.id);y.parentNode.removeChild(y)},s.id);l.addEvent(y,"dragover",function(A){A.stopPropagation()},s.id);v.appendChild(y)}w=l.getPos(v,m.getElementById(s.settings.container));x=l.getSize(v);if(l.getStyle(v,"position")==="static"){l.extend(v.style,{position:"relative"})}l.extend(y.style,{position:"absolute",display:"block",top:0,left:0,width:x.w+"px",height:x.h+"px",opacity:0})},s.id);return}l.addEvent(v,"dragover",function(w){w.preventDefault()},s.id);l.addEvent(v,"drop",function(x){var w=x.dataTransfer;if(w&&w.files){r(w.files)}x.preventDefault()},s.id)}});s.bind("Refresh",function(v){var w,x,y,A,z;w=m.getElementById(s.settings.browse_button);if(w){x=l.getPos(w,m.getElementById(v.settings.container));y=l.getSize(w);A=m.getElementById(s.id+"_html5_container");l.extend(A.style,{top:x.y+"px",left:x.x+"px",width:y.w+"px",height:y.h+"px"});if(s.features.triggerDialog){if(l.getStyle(w,"position")==="static"){l.extend(w.style,{position:"relative"})}z=parseInt(l.getStyle(w,"zIndex"),10);if(isNaN(z)){z=0}l.extend(w.style,{zIndex:z});l.extend(A.style,{zIndex:z-1})}}});s.bind("DisableBrowse",function(v,x){var w=m.getElementById(v.id+"_html5");if(w){w.disabled=x}});s.bind("CancelUpload",function(){if(t&&t.abort){t.abort()}});s.bind("UploadFile",function(v,x){var y=v.settings,B,w;function A(D,G,C){var E;if(File.prototype.slice){try{D.slice();return D.slice(G,C)}catch(F){return D.slice(G,C-G)}}else{if(E=File.prototype.webkitSlice||File.prototype.mozSlice){return E.call(D,G,C)}else{return null}}}function z(C){var F=0,E=0;function D(){var L,P,N,O,K,M,H,G=v.settings.url;function J(S){if(t.sendAsBinary){t.sendAsBinary(S)}else{if(v.features.canSendBinary){var Q=new Uint8Array(S.length);for(var R=0;R<S.length;R++){Q[R]=(S.charCodeAt(R)&255)}t.send(Q.buffer)}}}function I(R){var V=0,W="----pluploadboundary"+l.guid(),T,S="--",U="\r\n",Q="";t=new XMLHttpRequest;if(t.upload){t.upload.onprogress=function(X){x.loaded=Math.min(x.size,E+X.loaded-V);v.trigger("UploadProgress",x)}}t.onreadystatechange=function(){var X,Z;if(t.readyState==4&&v.state!==l.STOPPED){try{X=t.status}catch(Y){X=0}if(X>=400){v.trigger("Error",{code:l.HTTP_ERROR,message:l.translate("HTTP Error."),file:x,status:X})}else{if(N){Z={chunk:F,chunks:N,response:t.responseText,status:X};v.trigger("ChunkUploaded",x,Z);E+=M;if(Z.cancelled){x.status=l.FAILED;return}x.loaded=Math.min(x.size,(F+1)*K)}else{x.loaded=x.size}v.trigger("UploadProgress",x);R=L=T=Q=null;if(!N||++F>=N){x.status=l.DONE;v.trigger("FileUploaded",x,{response:t.responseText,status:X})}else{D()}}}};if(v.settings.multipart&&q.multipart){O.name=x.target_name||x.name;t.open("post",G,true);l.each(v.settings.headers,function(Y,X){t.setRequestHeader(X,Y)});if(typeof(R)!=="string"&&!!k.FormData){T=new FormData();l.each(l.extend(O,v.settings.multipart_params),function(Y,X){T.append(X,Y)});T.append(v.settings.file_data_name,R);t.send(T);return}if(typeof(R)==="string"){t.setRequestHeader("Content-Type","multipart/form-data; boundary="+W);l.each(l.extend(O,v.settings.multipart_params),function(Y,X){Q+=S+W+U+'Content-Disposition: form-data; name="'+X+'"'+U+U;Q+=unescape(encodeURIComponent(Y))+U});H=l.mimeTypes[x.name.replace(/^.+\.([^.]+)/,"$1").toLowerCase()]||"application/octet-stream";Q+=S+W+U+'Content-Disposition: form-data; name="'+v.settings.file_data_name+'"; filename="'+unescape(encodeURIComponent(x.name))+'"'+U+"Content-Type: "+H+U+U+R+U+S+W+S+U;V=Q.length-R.length;R=Q;J(R);return}}G=l.buildUrl(v.settings.url,l.extend(O,v.settings.multipart_params));t.open("post",G,true);t.setRequestHeader("Content-Type","application/octet-stream");l.each(v.settings.headers,function(Y,X){t.setRequestHeader(X,Y)});if(typeof(R)==="string"){J(R)}else{t.send(R)}}if(x.status==l.DONE||x.status==l.FAILED||v.state==l.STOPPED){return}O={name:x.target_name||x.name};if(y.chunk_size&&x.size>y.chunk_size&&(q.chunks||typeof(C)=="string")){K=y.chunk_size;N=Math.ceil(x.size/K);M=Math.min(K,x.size-(F*K));if(typeof(C)=="string"){L=C.substring(F*K,F*K+M)}else{L=A(C,F*K,F*K+M)}O.chunk=F;O.chunks=N}else{M=x.size;L=C}if(v.settings.multipart&&q.multipart&&typeof(L)!=="string"&&k.FileReader&&q.cantSendBlobInFormData&&q.chunks&&v.settings.chunk_size){(function(){var Q=new FileReader();Q.onload=function(){I(Q.result);Q=null};Q.readAsBinaryString(L)}())}else{I(L)}}D()}B=d[x.id];if(q.jpgresize&&v.settings.resize&&/\.(png|jpg|jpeg)$/i.test(x.name)){e.call(v,x,v.settings.resize,/\.png$/i.test(x.name)?"image/png":"image/jpeg",function(C){if(C.success){x.size=C.data.length;z(C.data)}else{if(q.chunks){z(B)}else{n(B,z)}}})}else{if(!q.chunks&&q.jpgresize){n(B,z)}else{z(B)}}});s.bind("Destroy",function(v){var x,y,w=m.body,z={inputContainer:v.id+"_html5_container",inputFile:v.id+"_html5",browseButton:v.settings.browse_button,dropElm:v.settings.drop_element};for(x in z){y=m.getElementById(z[x]);if(y){l.removeAllEvents(y,v.id)}}l.removeAllEvents(m.body,v.id);if(v.settings.container){w=m.getElementById(v.settings.container)}w.removeChild(m.getElementById(z.inputContainer))});u({success:true})}});function b(){var t=false,r;function u(w,y){var v=t?0:-8*(y-1),z=0,x;for(x=0;x<y;x++){z|=(r.charCodeAt(w+x)<<Math.abs(v+x*8))}return z}function q(x,v,w){var w=arguments.length===3?w:r.length-v-1;r=r.substr(0,v)+x+r.substr(w+v)}function s(w,x,z){var A="",v=t?0:-8*(z-1),y;for(y=0;y<z;y++){A+=String.fromCharCode((x>>Math.abs(v+y*8))&255)}q(A,w,z)}return{II:function(v){if(v===g){return t}else{t=v}},init:function(v){t=false;r=v},SEGMENT:function(v,x,w){switch(arguments.length){case 1:return r.substr(v,r.length-v-1);case 2:return r.substr(v,x);case 3:q(w,v,x);break;default:return r}},BYTE:function(v){return u(v,1)},SHORT:function(v){return u(v,2)},LONG:function(v,w){if(w===g){return u(v,4)}else{s(v,w,4)}},SLONG:function(v){var w=u(v,4);return(w>2147483647?w-4294967296:w)},STRING:function(v,w){var x="";for(w+=v;v<w;v++){x+=String.fromCharCode(u(v,1))}return x}}}function h(v){var x={65505:{app:"EXIF",name:"APP1",signature:"Exif\0"},65506:{app:"ICC",name:"APP2",signature:"ICC_PROFILE\0"},65517:{app:"IPTC",name:"APP13",signature:"Photoshop 3.0\0"}},w=[],u,q,s=g,t=0,r;u=new b();u.init(v);if(u.SHORT(0)!==65496){return}q=2;r=Math.min(1048576,v.length);while(q<=r){s=u.SHORT(q);if(s>=65488&&s<=65495){q+=2;continue}if(s===65498||s===65497){break}t=u.SHORT(q+2)+2;if(x[s]&&u.STRING(q+4,x[s].signature.length)===x[s].signature){w.push({hex:s,app:x[s].app.toUpperCase(),name:x[s].name.toUpperCase(),start:q,length:t,segment:u.SEGMENT(q,t)})}q+=t}u.init(null);return{headers:w,restore:function(B){u.init(B);var z=new h(B);if(!z.headers){return false}for(var A=z.headers.length;A>0;A--){var C=z.headers[A-1];u.SEGMENT(C.start,C.length,"")}z.purge();q=u.SHORT(2)==65504?4+u.SHORT(4):2;for(var A=0,y=w.length;A<y;A++){u.SEGMENT(q,0,w[A].segment);q+=w[A].length}return u.SEGMENT()},get:function(A){var B=[];for(var z=0,y=w.length;z<y;z++){if(w[z].app===A.toUpperCase()){B.push(w[z].segment)}}return B},set:function(B,A){var C=[];if(typeof(A)==="string"){C.push(A)}else{C=A}for(var z=ii=0,y=w.length;z<y;z++){if(w[z].app===B.toUpperCase()){w[z].segment=C[ii];w[z].length=C[ii].length;ii++}if(ii>=C.length){break}}},purge:function(){w=[];u.init(null)}}}function a(){var t,q,r={},w;t=new b();q={tiff:{274:"Orientation",34665:"ExifIFDPointer",34853:"GPSInfoIFDPointer"},exif:{36864:"ExifVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",36867:"DateTimeOriginal",33434:"ExposureTime",33437:"FNumber",34855:"ISOSpeedRatings",37377:"ShutterSpeedValue",37378:"ApertureValue",37383:"MeteringMode",37384:"LightSource",37385:"Flash",41986:"ExposureMode",41987:"WhiteBalance",41990:"SceneCaptureType",41988:"DigitalZoomRatio",41992:"Contrast",41993:"Saturation",41994:"Sharpness"},gps:{0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude"}};w={ColorSpace:{1:"sRGB",0:"Uncalibrated"},MeteringMode:{0:"Unknown",1:"Average",2:"CenterWeightedAverage",3:"Spot",4:"MultiSpot",5:"Pattern",6:"Partial",255:"Other"},LightSource:{1:"Daylight",2:"Fliorescent",3:"Tungsten",4:"Flash",9:"Fine weather",10:"Cloudy weather",11:"Shade",12:"Daylight fluorescent (D 5700 - 7100K)",13:"Day white fluorescent (N 4600 -5400K)",14:"Cool white fluorescent (W 3900 - 4500K)",15:"White fluorescent (WW 3200 - 3700K)",17:"Standard light A",18:"Standard light B",19:"Standard light C",20:"D55",21:"D65",22:"D75",23:"D50",24:"ISO studio tungsten",255:"Other"},Flash:{0:"Flash did not fire.",1:"Flash fired.",5:"Strobe return light not detected.",7:"Strobe return light detected.",9:"Flash fired, compulsory flash mode",13:"Flash fired, compulsory flash mode, return light not detected",15:"Flash fired, compulsory flash mode, return light detected",16:"Flash did not fire, compulsory flash mode",24:"Flash did not fire, auto mode",25:"Flash fired, auto mode",29:"Flash fired, auto mode, return light not detected",31:"Flash fired, auto mode, return light detected",32:"No flash function",65:"Flash fired, red-eye reduction mode",69:"Flash fired, red-eye reduction mode, return light not detected",71:"Flash fired, red-eye reduction mode, return light detected",73:"Flash fired, compulsory flash mode, red-eye reduction mode",77:"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",79:"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",89:"Flash fired, auto mode, red-eye reduction mode",93:"Flash fired, auto mode, return light not detected, red-eye reduction mode",95:"Flash fired, auto mode, return light detected, red-eye reduction mode"},ExposureMode:{0:"Auto exposure",1:"Manual exposure",2:"Auto bracket"},WhiteBalance:{0:"Auto white balance",1:"Manual white balance"},SceneCaptureType:{0:"Standard",1:"Landscape",2:"Portrait",3:"Night scene"},Contrast:{0:"Normal",1:"Soft",2:"Hard"},Saturation:{0:"Normal",1:"Low saturation",2:"High saturation"},Sharpness:{0:"Normal",1:"Soft",2:"Hard"},GPSLatitudeRef:{N:"North latitude",S:"South latitude"},GPSLongitudeRef:{E:"East longitude",W:"West longitude"}};function s(x,F){var z=t.SHORT(x),C,I,J,E,D,y,A,G,H=[],B={};for(C=0;C<z;C++){A=y=x+12*C+2;J=F[t.SHORT(A)];if(J===g){continue}E=t.SHORT(A+=2);D=t.LONG(A+=2);A+=4;H=[];switch(E){case 1:case 7:if(D>4){A=t.LONG(A)+r.tiffHeader}for(I=0;I<D;I++){H[I]=t.BYTE(A+I)}break;case 2:if(D>4){A=t.LONG(A)+r.tiffHeader}B[J]=t.STRING(A,D-1);continue;case 3:if(D>2){A=t.LONG(A)+r.tiffHeader}for(I=0;I<D;I++){H[I]=t.SHORT(A+I*2)}break;case 4:if(D>1){A=t.LONG(A)+r.tiffHeader}for(I=0;I<D;I++){H[I]=t.LONG(A+I*4)}break;case 5:A=t.LONG(A)+r.tiffHeader;for(I=0;I<D;I++){H[I]=t.LONG(A+I*4)/t.LONG(A+I*4+4)}break;case 9:A=t.LONG(A)+r.tiffHeader;for(I=0;I<D;I++){H[I]=t.SLONG(A+I*4)}break;case 10:A=t.LONG(A)+r.tiffHeader;for(I=0;I<D;I++){H[I]=t.SLONG(A+I*4)/t.SLONG(A+I*4+4)}break;default:continue}G=(D==1?H[0]:H);if(w.hasOwnProperty(J)&&typeof G!="object"){B[J]=w[J][G]}else{B[J]=G}}return B}function v(){var y=g,x=r.tiffHeader;t.II(t.SHORT(x)==18761);if(t.SHORT(x+=2)!==42){return false}r.IFD0=r.tiffHeader+t.LONG(x+=2);y=s(r.IFD0,q.tiff);r.exifIFD=("ExifIFDPointer" in y?r.tiffHeader+y.ExifIFDPointer:g);r.gpsIFD=("GPSInfoIFDPointer" in y?r.tiffHeader+y.GPSInfoIFDPointer:g);return true}function u(z,x,C){var E,B,A,D=0;if(typeof(x)==="string"){var y=q[z.toLowerCase()];for(hex in y){if(y[hex]===x){x=hex;break}}}E=r[z.toLowerCase()+"IFD"];B=t.SHORT(E);for(i=0;i<B;i++){A=E+12*i+2;if(t.SHORT(A)==x){D=A+8;break}}if(!D){return false}t.LONG(D,C);return true}return{init:function(x){r={tiffHeader:10};if(x===g||!x.length){return false}t.init(x);if(t.SHORT(0)===65505&&t.STRING(4,5).toUpperCase()==="EXIF\0"){return v()}return false},EXIF:function(){var y;y=s(r.exifIFD,q.exif);if(y.ExifVersion&&l.typeOf(y.ExifVersion)==="array"){for(var z=0,x="";z<y.ExifVersion.length;z++){x+=String.fromCharCode(y.ExifVersion[z])}y.ExifVersion=x}return y},GPS:function(){var x;x=s(r.gpsIFD,q.gps);if(x.GPSVersionID){x.GPSVersionID=x.GPSVersionID.join(".")}return x},setExif:function(x,y){if(x!=="PixelXDimension"&&x!=="PixelYDimension"){return false}return u("exif",x,y)},getBinary:function(){return t.SEGMENT()}}}})(window,document,plupload);;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/plupload.html5.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/jquery.ui.plupload.js
(function(f,a,c,g,e){var h={};function b(i){return c.translate(i)||i}function d(i){i.html('<div class="plupload_wrapper"><div class="ui-widget-content plupload_container"><div class="plupload"><div class="ui-state-default ui-widget-header plupload_header"><div class="plupload_header_content"><div class="plupload_header_title">'+b("Select files")+'</div><div class="plupload_header_text">'+b("Add files to the upload queue and click the start button.")+'</div></div></div><div class="plupload_content"><table class="plupload_filelist"><tr class="ui-widget-header plupload_filelist_header"><td class="plupload_cell plupload_file_name">'+b("Filename")+'</td><td class="plupload_cell plupload_file_status">'+b("Status")+'</td><td class="plupload_cell plupload_file_size">'+b("Size")+'</td><td class="plupload_cell plupload_file_action">&nbsp;</td></tr></table><div class="plupload_scroll"><table class="plupload_filelist_content"></table></div><table class="plupload_filelist"><tr class="ui-widget-header ui-widget-content plupload_filelist_footer"><td class="plupload_cell plupload_file_name"><div class="plupload_buttons"><!-- Visible --><a class="plupload_button plupload_add">'+b("Add Files")+'</a>&nbsp;<a class="plupload_button plupload_start">'+b("Start Upload")+'</a>&nbsp;<a class="plupload_button plupload_stop plupload_hidden">'+b("Stop Upload")+'</a>&nbsp;</div><div class="plupload_started plupload_hidden"><!-- Hidden --><div class="plupload_progress plupload_right"><div class="plupload_progress_container"></div></div><div class="plupload_cell plupload_upload_status"></div><div class="plupload_clearer">&nbsp;</div></div></td><td class="plupload_file_status"><span class="plupload_total_status">0%</span></td><td class="plupload_file_size"><span class="plupload_total_file_size">0 kb</span></td><td class="plupload_file_action"></td></tr></table></div></div></div><input class="plupload_count" value="0" type="hidden"></div>')}g.widget("ui.plupload",{contents_bak:"",runtime:null,options:{browse_button_hover:"ui-state-hover",browse_button_active:"ui-state-active",dragdrop:true,multiple_queues:true,buttons:{browse:true,start:true,stop:true},autostart:false,sortable:false,rename:false,max_file_count:0},FILE_COUNT_ERROR:-9001,_create:function(){var i=this,k,j;k=this.element.attr("id");if(!k){k=c.guid();this.element.attr("id",k)}this.id=k;this.contents_bak=this.element.html();d(this.element);this.container=g(".plupload_container",this.element).attr("id",k+"_container");this.filelist=g(".plupload_filelist_content",this.container).attr({id:k+"_filelist",unselectable:"on"});this.browse_button=g(".plupload_add",this.container).attr("id",k+"_browse");this.start_button=g(".plupload_start",this.container).attr("id",k+"_start");this.stop_button=g(".plupload_stop",this.container).attr("id",k+"_stop");if(g.ui.button){this.browse_button.button({icons:{primary:"ui-icon-circle-plus"}});this.start_button.button({icons:{primary:"ui-icon-circle-arrow-e"},disabled:true});this.stop_button.button({icons:{primary:"ui-icon-circle-close"}})}this.progressbar=g(".plupload_progress_container",this.container);if(g.ui.progressbar){this.progressbar.progressbar()}this.counter=g(".plupload_count",this.element).attr({id:k+"_count",name:k+"_count"});j=this.uploader=h[k]=new c.Uploader(g.extend({container:k,browse_button:k+"_browse"},this.options));j.bind("Error",function(l,m){if(m.code===c.INIT_ERROR){i.destroy()}});j.bind("Init",function(l,m){if(!i.options.buttons.browse){i.browse_button.button("disable").hide();l.disableBrowse(true)}if(!i.options.buttons.start){i.start_button.button("disable").hide()}if(!i.options.buttons.stop){i.stop_button.button("disable").hide()}if(!i.options.unique_names&&i.options.rename){i._enableRenaming()}if(j.features.dragdrop&&i.options.dragdrop){i._enableDragAndDrop()}i.container.attr("title",b("Using runtime: ")+(i.runtime=m.runtime));i.start_button.click(function(n){if(!g(this).button("option","disabled")){i.start()}n.preventDefault()});i.stop_button.click(function(n){i.stop();n.preventDefault()})});if(i.options.max_file_count){j.bind("FilesAdded",function(l,n){var o=[],m=n.length;var p=l.files.length+m-i.options.max_file_count;if(p>0){o=n.splice(m-p,p);l.trigger("Error",{code:i.FILE_COUNT_ERROR,message:b("File count error."),file:o})}})}j.init();j.bind("FilesAdded",function(l,m){i._trigger("selected",null,{up:l,files:m});if(i.options.autostart){setTimeout(function(){i.start()},10)}});j.bind("FilesRemoved",function(l,m){i._trigger("removed",null,{up:l,files:m})});j.bind("QueueChanged",function(){i._updateFileList()});j.bind("StateChanged",function(){i._handleState()});j.bind("UploadFile",function(l,m){i._handleFileStatus(m)});j.bind("FileUploaded",function(l,m){i._handleFileStatus(m);i._trigger("uploaded",null,{up:l,file:m})});j.bind("UploadProgress",function(l,m){g("#"+m.id).find(".plupload_file_status").html(m.percent+"%").end().find(".plupload_file_size").html(c.formatSize(m.size));i._handleFileStatus(m);i._updateTotalProgress();i._trigger("progress",null,{up:l,file:m})});j.bind("UploadComplete",function(l,m){i._trigger("complete",null,{up:l,files:m})});j.bind("Error",function(l,p){var n=p.file,o,m;if(n){o="<strong>"+p.message+"</strong>";m=p.details;if(m){o+=" <br /><i>"+p.details+"</i>"}else{switch(p.code){case c.FILE_EXTENSION_ERROR:m=b("File: %s").replace("%s",n.name);break;case c.FILE_SIZE_ERROR:m=b("File: %f, size: %s, max file size: %m").replace(/%([fsm])/g,function(r,q){switch(q){case"f":return n.name;case"s":return n.size;case"m":return c.parseSize(i.options.max_file_size)}});break;case i.FILE_COUNT_ERROR:m=b("Upload element accepts only %d file(s) at a time. Extra files were stripped.").replace("%d",i.options.max_file_count);break;case c.IMAGE_FORMAT_ERROR:m=c.translate("Image format either wrong or not supported.");break;case c.IMAGE_MEMORY_ERROR:m=c.translate("Runtime ran out of available memory.");break;case c.IMAGE_DIMENSIONS_ERROR:m=c.translate("Resoultion out of boundaries! <b>%s</b> runtime supports images only up to %wx%hpx.").replace(/%([swh])/g,function(r,q){switch(q){case"s":return l.runtime;case"w":return l.features.maxWidth;case"h":return l.features.maxHeight}});break;case c.HTTP_ERROR:m=b("Upload URL might be wrong or doesn't exist");break}o+=" <br /><i>"+m+"</i>"}i.notify("error",o);i._trigger("error",null,{up:l,file:n,error:o})}})},_setOption:function(j,k){var i=this;if(j=="buttons"&&typeof(k)=="object"){k=g.extend(i.options.buttons,k);if(!k.browse){i.browse_button.button("disable").hide();up.disableBrowse(true)}else{i.browse_button.button("enable").show();up.disableBrowse(false)}if(!k.start){i.start_button.button("disable").hide()}else{i.start_button.button("enable").show()}if(!k.stop){i.stop_button.button("disable").hide()}else{i.start_button.button("enable").show()}}i.uploader.settings[j]=k},start:function(){this.uploader.start();this._trigger("start",null)},stop:function(){this.uploader.stop();this._trigger("stop",null)},getFile:function(j){var i;if(typeof j==="number"){i=this.uploader.files[j]}else{i=this.uploader.getFile(j)}return i},removeFile:function(j){var i=this.getFile(j);if(i){this.uploader.removeFile(i)}},clearQueue:function(){this.uploader.splice()},getUploader:function(){return this.uploader},refresh:function(){this.uploader.refresh()},_handleState:function(){var j=this,i=this.uploader;if(i.state===c.STARTED){g(j.start_button).button("disable");g([]).add(j.stop_button).add(".plupload_started").removeClass("plupload_hidden");g(".plupload_upload_status",j.element).html(b("Uploaded %d/%d files").replace("%d/%d",i.total.uploaded+"/"+i.files.length));g(".plupload_header_content",j.element).addClass("plupload_header_content_bw")}else{g([]).add(j.stop_button).add(".plupload_started").addClass("plupload_hidden");if(j.options.multiple_queues){g(j.start_button).button("enable");g(".plupload_header_content",j.element).removeClass("plupload_header_content_bw")}j._updateFileList()}},_handleFileStatus:function(l){var n,j;if(!g("#"+l.id).length){return}switch(l.status){case c.DONE:n="plupload_done";j="ui-icon ui-icon-circle-check";break;case c.FAILED:n="ui-state-error plupload_failed";j="ui-icon ui-icon-alert";break;case c.QUEUED:n="plupload_delete";j="ui-icon ui-icon-circle-minus";break;case c.UPLOADING:n="ui-state-highlight plupload_uploading";j="ui-icon ui-icon-circle-arrow-w";var i=g(".plupload_scroll",this.container),m=i.scrollTop(),o=i.height(),k=g("#"+l.id).position().top+g("#"+l.id).height();if(o<k){i.scrollTop(m+k-o)}break}n+=" ui-state-default plupload_file";g("#"+l.id).attr("class",n).find(".ui-icon").attr("class",j)},_updateTotalProgress:function(){var i=this.uploader;this.progressbar.progressbar("value",i.total.percent);this.element.find(".plupload_total_status").html(i.total.percent+"%").end().find(".plupload_total_file_size").html(c.formatSize(i.total.size)).end().find(".plupload_upload_status").html(b("Uploaded %d/%d files").replace("%d/%d",i.total.uploaded+"/"+i.files.length))},_updateFileList:function(){var k=this,j=this.uploader,m=this.filelist,l=0,o,n=this.id+"_",i;if(g.ui.sortable&&this.options.sortable){g("tbody.ui-sortable",m).sortable("destroy")}m.empty();g.each(j.files,function(q,p){i="";o=n+l;if(p.status===c.DONE){if(p.target_name){i+='<input type="hidden" name="'+o+'_tmpname" value="'+c.xmlEncode(p.target_name)+'" />'}i+='<input type="hidden" name="'+o+'_name" value="'+c.xmlEncode(p.name)+'" />';i+='<input type="hidden" name="'+o+'_status" value="'+(p.status===c.DONE?"done":"failed")+'" />';l++;k.counter.val(l)}m.append('<tr class="ui-state-default plupload_file" id="'+p.id+'"><td class="plupload_cell plupload_file_name"><span>'+p.name+'</span></td><td class="plupload_cell plupload_file_status">'+p.percent+'%</td><td class="plupload_cell plupload_file_size">'+c.formatSize(p.size)+'</td><td class="plupload_cell plupload_file_action"><div class="ui-icon"></div>'+i+"</td></tr>");k._handleFileStatus(p);g("#"+p.id+".plupload_delete .ui-icon, #"+p.id+".plupload_done .ui-icon").click(function(r){g("#"+p.id).remove();j.removeFile(p);r.preventDefault()});k._trigger("updatelist",null,m)});if(j.total.queued===0){g(".ui-button-text",k.browse_button).html(b("Add Files"))}else{g(".ui-button-text",k.browse_button).html(b("%d files queued").replace("%d",j.total.queued))}if(j.files.length===(j.total.uploaded+j.total.failed)){k.start_button.button("disable")}else{k.start_button.button("enable")}m[0].scrollTop=m[0].scrollHeight;k._updateTotalProgress();if(!j.files.length&&j.features.dragdrop&&j.settings.dragdrop){g("#"+o+"_filelist").append('<tr><td class="plupload_droptext">'+b("Drag files here.")+"</td></tr>")}else{if(k.options.sortable&&g.ui.sortable){k._enableSortingList()}}},_enableRenaming:function(){var i=this;this.filelist.on("click",".plupload_delete .plupload_file_name span",function(o){var m=g(o.target),k,n,j,l="";k=i.uploader.getFile(m.parents("tr")[0].id);j=k.name;n=/^(.+)(\.[^.]+)$/.exec(j);if(n){j=n[1];l=n[2]}m.hide().after('<input class="plupload_file_rename" type="text" />');m.next().val(j).focus().blur(function(){m.show().next().remove()}).keydown(function(q){var p=g(this);if(g.inArray(q.keyCode,[13,27])!==-1){q.preventDefault();if(q.keyCode===13){k.name=p.val()+l;m.html(k.name)}p.blur()}})})},_enableDragAndDrop:function(){this.filelist.append('<tr><td class="plupload_droptext">'+b("Drag files here.")+"</td></tr>");this.filelist.parent().attr("id",this.id+"_dropbox");this.uploader.settings.drop_element=this.options.drop_element=this.id+"_dropbox"},_enableSortingList:function(){var j,i=this;if(g("tbody tr",this.filelist).length<2){return}g("tbody",this.filelist).sortable({containment:"parent",items:".plupload_delete",helper:function(l,k){return k.clone(true).find("td:not(.plupload_file_name)").remove().end().css("width","100%")},stop:function(p,o){var l,n,k,m=[];g.each(g(this).sortable("toArray"),function(q,r){m[m.length]=i.uploader.getFile(r)});m.unshift(m.length);m.unshift(0);Array.prototype.splice.apply(i.uploader.files,m)}})},notify:function(j,k){var i=g('<div class="plupload_message"><span class="plupload_message_close ui-icon ui-icon-circle-close" title="'+b("Close")+'"></span><p><span class="ui-icon"></span>'+k+"</p></div>");i.addClass("ui-state-"+(j==="error"?"error":"highlight")).find("p .ui-icon").addClass("ui-icon-"+(j==="error"?"alert":"info")).end().find(".plupload_message_close").click(function(){i.remove()}).end();g(".plupload_header_content",this.container).append(i)},destroy:function(){g(".plupload_button",this.element).unbind();if(g.ui.button){g(".plupload_add, .plupload_start, .plupload_stop",this.container).button("destroy")}if(g.ui.progressbar){this.progressbar.progressbar("destroy")}if(g.ui.sortable&&this.options.sortable){g("tbody",this.filelist).sortable("destroy")}this.uploader.destroy();this.element.empty().html(this.contents_bak);this.contents_bak="";g.Widget.prototype.destroy.apply(this)}})}(window,document,plupload,jQuery));;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/jquery.ui.plupload.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/diff.js
/**
 * Diff Match and Patch
 *
 * Copyright 2006 Google Inc.
 * http://code.google.com/p/google-diff-match-patch/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * Class containing the diff, match and patch methods.
 * @constructor
 */
function diff_match_patch() {

  // Defaults.
  // Redefine these in your program to override the defaults.

  // Number of seconds to map a diff before giving up (0 for infinity).
  this.Diff_Timeout = 1.0;
  // Cost of an empty edit operation in terms of edit characters.
  this.Diff_EditCost = 4;
  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
  this.Match_Threshold = 0.5;
  // How far to search for a match (0 = exact location, 1000+ = broad match).
  // A match this many characters away from the expected location will add
  // 1.0 to the score (0.0 is a perfect match).
  this.Match_Distance = 1000;
  // When deleting a large block of text (over ~64 characters), how close do
  // the contents have to be to match the expected contents. (0.0 = perfection,
  // 1.0 = very loose).  Note that Match_Threshold controls how closely the
  // end points of a delete need to match.
  this.Patch_DeleteThreshold = 0.5;
  // Chunk size for context length.
  this.Patch_Margin = 4;

  // The number of bits in an int.
  this.Match_MaxBits = 32;
}


//  DIFF FUNCTIONS


/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;

/** @typedef {{0: number, 1: string}} */
diff_match_patch.Diff;


/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean=} opt_checklines Optional speedup flag. If present and false,
 *     then don't run a line-level diff first to identify the changed areas.
 *     Defaults to true, which does a faster, slightly less optimal diff.
 * @param {number} opt_deadline Optional time when the diff should be complete
 *     by.  Used internally for recursive calls.  Users should set DiffTimeout
 *     instead.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 */
diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,
    opt_deadline) {
  // Set a deadline by which time the diff must be complete.
  if (typeof opt_deadline == 'undefined') {
    if (this.Diff_Timeout <= 0) {
      opt_deadline = Number.MAX_VALUE;
    } else {
      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;
    }
  }
  var deadline = opt_deadline;

  // Check for null inputs.
  if (text1 == null || text2 == null) {
    throw new Error('Null input. (diff_main)');
  }

  // Check for equality (speedup).
  if (text1 == text2) {
    if (text1) {
      return [[DIFF_EQUAL, text1]];
    }
    return [];
  }

  if (typeof opt_checklines == 'undefined') {
    opt_checklines = true;
  }
  var checklines = opt_checklines;

  // Trim off common prefix (speedup).
  var commonlength = this.diff_commonPrefix(text1, text2);
  var commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength);
  text2 = text2.substring(commonlength);

  // Trim off common suffix (speedup).
  commonlength = this.diff_commonSuffix(text1, text2);
  var commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength);
  text2 = text2.substring(0, text2.length - commonlength);

  // Compute the diff on the middle block.
  var diffs = this.diff_compute_(text1, text2, checklines, deadline);

  // Restore the prefix and suffix.
  if (commonprefix) {
    diffs.unshift([DIFF_EQUAL, commonprefix]);
  }
  if (commonsuffix) {
    diffs.push([DIFF_EQUAL, commonsuffix]);
  }
  this.diff_cleanupMerge(diffs);
  return diffs;
};


/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} checklines Speedup flag.  If false, then don't run a
 *     line-level diff first to identify the changed areas.
 *     If true, then run a faster, slightly less optimal diff.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,
    deadline) {
  var diffs;

  if (!text1) {
    // Just add some text (speedup).
    return [[DIFF_INSERT, text2]];
  }

  if (!text2) {
    // Just delete some text (speedup).
    return [[DIFF_DELETE, text1]];
  }

  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  var i = longtext.indexOf(shorttext);
  if (i != -1) {
    // Shorter text is inside the longer text (speedup).
    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
             [DIFF_EQUAL, shorttext],
             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
    // Swap insertions for deletions if diff is reversed.
    if (text1.length > text2.length) {
      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    }
    return diffs;
  }

  if (shorttext.length == 1) {
    // Single character string.
    // After the previous speedup, the character can't be an equality.
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }

  // Check to see if the problem can be split in two.
  var hm = this.diff_halfMatch_(text1, text2);
  if (hm) {
    // A half-match was found, sort out the return data.
    var text1_a = hm[0];
    var text1_b = hm[1];
    var text2_a = hm[2];
    var text2_b = hm[3];
    var mid_common = hm[4];
    // Send both pairs off for separate processing.
    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
    // Merge the results.
    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
  }

  if (checklines && text1.length > 100 && text2.length > 100) {
    return this.diff_lineMode_(text1, text2, deadline);
  }

  return this.diff_bisect_(text1, text2, deadline);
};


/**
 * Do a quick line-level diff on both strings, then rediff the parts for
 * greater accuracy.
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {
  // Scan the text on a line-by-line basis first.
  var a = this.diff_linesToChars_(text1, text2);
  text1 = a.chars1;
  text2 = a.chars2;
  var linearray = a.lineArray;

  var diffs = this.diff_main(text1, text2, false, deadline);

  // Convert the diff back to original text.
  this.diff_charsToLines_(diffs, linearray);
  // Eliminate freak matches (e.g. blank lines)
  this.diff_cleanupSemantic(diffs);

  // Rediff any replacement blocks, this time character-by-character.
  // Add a dummy entry at the end.
  diffs.push([DIFF_EQUAL, '']);
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete >= 1 && count_insert >= 1) {
          // Delete the offending records and add the merged ones.
          diffs.splice(pointer - count_delete - count_insert,
                       count_delete + count_insert);
          pointer = pointer - count_delete - count_insert;
          var a = this.diff_main(text_delete, text_insert, false, deadline);
          for (var j = a.length - 1; j >= 0; j--) {
            diffs.splice(pointer, 0, a[j]);
          }
          pointer = pointer + a.length;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
    pointer++;
  }
  diffs.pop();  // Remove the dummy entry at the end.

  return diffs;
};


/**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  var max_d = Math.ceil((text1_length + text2_length) / 2);
  var v_offset = max_d;
  var v_length = 2 * max_d;
  var v1 = new Array(v_length);
  var v2 = new Array(v_length);
  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
  // integers and undefined.
  for (var x = 0; x < v_length; x++) {
    v1[x] = -1;
    v2[x] = -1;
  }
  v1[v_offset + 1] = 0;
  v2[v_offset + 1] = 0;
  var delta = text1_length - text2_length;
  // If the total number of characters is odd, then the front path will collide
  // with the reverse path.
  var front = (delta % 2 != 0);
  // Offsets for start and end of k loop.
  // Prevents mapping of space beyond the grid.
  var k1start = 0;
  var k1end = 0;
  var k2start = 0;
  var k2end = 0;
  for (var d = 0; d < max_d; d++) {
    // Bail out if deadline is reached.
    if ((new Date()).getTime() > deadline) {
      break;
    }

    // Walk the front path one step.
    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
      var k1_offset = v_offset + k1;
      var x1;
      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
        x1 = v1[k1_offset + 1];
      } else {
        x1 = v1[k1_offset - 1] + 1;
      }
      var y1 = x1 - k1;
      while (x1 < text1_length && y1 < text2_length &&
             text1.charAt(x1) == text2.charAt(y1)) {
        x1++;
        y1++;
      }
      v1[k1_offset] = x1;
      if (x1 > text1_length) {
        // Ran off the right of the graph.
        k1end += 2;
      } else if (y1 > text2_length) {
        // Ran off the bottom of the graph.
        k1start += 2;
      } else if (front) {
        var k2_offset = v_offset + delta - k1;
        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
          // Mirror x2 onto top-left coordinate system.
          var x2 = text1_length - v2[k2_offset];
          if (x1 >= x2) {
            // Overlap detected.
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }

    // Walk the reverse path one step.
    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
      var k2_offset = v_offset + k2;
      var x2;
      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
        x2 = v2[k2_offset + 1];
      } else {
        x2 = v2[k2_offset - 1] + 1;
      }
      var y2 = x2 - k2;
      while (x2 < text1_length && y2 < text2_length &&
             text1.charAt(text1_length - x2 - 1) ==
             text2.charAt(text2_length - y2 - 1)) {
        x2++;
        y2++;
      }
      v2[k2_offset] = x2;
      if (x2 > text1_length) {
        // Ran off the left of the graph.
        k2end += 2;
      } else if (y2 > text2_length) {
        // Ran off the top of the graph.
        k2start += 2;
      } else if (!front) {
        var k1_offset = v_offset + delta - k2;
        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
          var x1 = v1[k1_offset];
          var y1 = v_offset + x1 - k1_offset;
          // Mirror x2 onto top-left coordinate system.
          x2 = text1_length - x2;
          if (x1 >= x2) {
            // Overlap detected.
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }
  }
  // Diff took too long and hit the deadline or
  // number of diffs equals number of characters, no commonality at all.
  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
};


/**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,
    deadline) {
  var text1a = text1.substring(0, x);
  var text2a = text2.substring(0, y);
  var text1b = text1.substring(x);
  var text2b = text2.substring(y);

  // Compute both diffs serially.
  var diffs = this.diff_main(text1a, text2a, false, deadline);
  var diffsb = this.diff_main(text1b, text2b, false, deadline);

  return diffs.concat(diffsb);
};


/**
 * Split two texts into an array of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
 *     An object containing the encoded text1, the encoded text2 and
 *     the array of unique strings.
 *     The zeroth element of the array of unique strings is intentionally blank.
 * @private
 */
diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {
  var lineArray = [];  // e.g. lineArray[4] == 'Hello\n'
  var lineHash = {};   // e.g. lineHash['Hello\n'] == 4

  // '\x00' is a valid character, but various debuggers don't like it.
  // So we'll insert a junk entry to avoid generating a null character.
  lineArray[0] = '';

  /**
   * Split a text into an array of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * Modifies linearray and linehash through being a closure.
   * @param {string} text String to encode.
   * @return {string} Encoded string.
   * @private
   */
  function diff_linesToCharsMunge_(text) {
    var chars = '';
    // Walk the text, pulling out a substring for each line.
    // text.split('\n') would would temporarily double our memory footprint.
    // Modifying text would create many large strings to garbage collect.
    var lineStart = 0;
    var lineEnd = -1;
    // Keeping our own length variable is faster than looking it up.
    var lineArrayLength = lineArray.length;
    while (lineEnd < text.length - 1) {
      lineEnd = text.indexOf('\n', lineStart);
      if (lineEnd == -1) {
        lineEnd = text.length - 1;
      }
      var line = text.substring(lineStart, lineEnd + 1);
      lineStart = lineEnd + 1;

      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :
          (lineHash[line] !== undefined)) {
        chars += String.fromCharCode(lineHash[line]);
      } else {
        chars += String.fromCharCode(lineArrayLength);
        lineHash[line] = lineArrayLength;
        lineArray[lineArrayLength++] = line;
      }
    }
    return chars;
  }

  var chars1 = diff_linesToCharsMunge_(text1);
  var chars2 = diff_linesToCharsMunge_(text2);
  return {chars1: chars1, chars2: chars2, lineArray: lineArray};
};


/**
 * Rehydrate the text in a diff from a string of line hashes to real lines of
 * text.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {!Array.<string>} lineArray Array of unique strings.
 * @private
 */
diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {
  for (var x = 0; x < diffs.length; x++) {
    var chars = diffs[x][1];
    var text = [];
    for (var y = 0; y < chars.length; y++) {
      text[y] = lineArray[chars.charCodeAt(y)];
    }
    diffs[x][1] = text.join('');
  }
};


/**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (text1.substring(pointerstart, pointermid) ==
        text2.substring(pointerstart, pointermid)) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 ||
      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine if the suffix of one string is the prefix of another.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of the first
 *     string and the start of the second string.
 * @private
 */
diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  // Eliminate the null case.
  if (text1_length == 0 || text2_length == 0) {
    return 0;
  }
  // Truncate the longer string.
  if (text1_length > text2_length) {
    text1 = text1.substring(text1_length - text2_length);
  } else if (text1_length < text2_length) {
    text2 = text2.substring(0, text1_length);
  }
  var text_length = Math.min(text1_length, text2_length);
  // Quick check for the worst case.
  if (text1 == text2) {
    return text_length;
  }

  // Start by looking for a single character match
  // and increase length until no match is found.
  // Performance analysis: http://neil.fraser.name/news/2010/11/04/
  var best = 0;
  var length = 1;
  while (true) {
    var pattern = text1.substring(text_length - length);
    var found = text2.indexOf(pattern);
    if (found == -1) {
      return best;
    }
    length += found;
    if (found == 0 || text1.substring(text_length - length) ==
        text2.substring(0, length)) {
      best = length;
      length++;
    }
  }
};


/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 * @private
 */
diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {
  if (this.Diff_Timeout <= 0) {
    // Don't risk returning a non-optimal diff if we have unlimited time.
    return null;
  }
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    return null;  // Pointless.
  }
  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */
  function diff_halfMatchI_(longtext, shorttext, i) {
    // Start with a 1/4 length substring at position i as a seed.
    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    var j = -1;
    var best_common = '';
    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),
                                               shorttext.substring(j));
      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),
                                               shorttext.substring(0, j));
      if (best_common.length < suffixLength + prefixLength) {
        best_common = shorttext.substring(j - suffixLength, j) +
            shorttext.substring(j, j + prefixLength);
        best_longtext_a = longtext.substring(0, i - suffixLength);
        best_longtext_b = longtext.substring(i + prefixLength);
        best_shorttext_a = shorttext.substring(0, j - suffixLength);
        best_shorttext_b = shorttext.substring(j + prefixLength);
      }
    }
    if (best_common.length * 2 >= longtext.length) {
      return [best_longtext_a, best_longtext_b,
              best_shorttext_a, best_shorttext_b, best_common];
    } else {
      return null;
    }
  }

  // First check if the second quarter is the seed for a half-match.
  var hm1 = diff_halfMatchI_(longtext, shorttext,
                             Math.ceil(longtext.length / 4));
  // Check again based on the third quarter.
  var hm2 = diff_halfMatchI_(longtext, shorttext,
                             Math.ceil(longtext.length / 2));
  var hm;
  if (!hm1 && !hm2) {
    return null;
  } else if (!hm2) {
    hm = hm1;
  } else if (!hm1) {
    hm = hm2;
  } else {
    // Both matched.  Select the longest.
    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  }

  // A half-match was found, sort out the return data.
  var text1_a, text1_b, text2_a, text2_b;
  if (text1.length > text2.length) {
    text1_a = hm[0];
    text1_b = hm[1];
    text2_a = hm[2];
    text2_b = hm[3];
  } else {
    text2_a = hm[0];
    text2_b = hm[1];
    text1_a = hm[2];
    text1_b = hm[3];
  }
  var mid_common = hm[4];
  return [text1_a, text1_b, text2_a, text2_b, mid_common];
};


/**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  /** @type {?string} */
  var lastequality = null;
  // Always equal to diffs[equalities[equalitiesLength - 1]][1]
  var pointer = 0;  // Index of current position.
  // Number of characters that changed prior to the equality.
  var length_insertions1 = 0;
  var length_deletions1 = 0;
  // Number of characters that changed after the equality.
  var length_insertions2 = 0;
  var length_deletions2 = 0;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.
      equalities[equalitiesLength++] = pointer;
      length_insertions1 = length_insertions2;
      length_deletions1 = length_deletions2;
      length_insertions2 = 0;
      length_deletions2 = 0;
      lastequality = diffs[pointer][1];
    } else {  // An insertion or deletion.
      if (diffs[pointer][0] == DIFF_INSERT) {
        length_insertions2 += diffs[pointer][1].length;
      } else {
        length_deletions2 += diffs[pointer][1].length;
      }
      // Eliminate an equality that is smaller or equal to the edits on both
      // sides of it.
      if (lastequality && (lastequality.length <=
          Math.max(length_insertions1, length_deletions1)) &&
          (lastequality.length <= Math.max(length_insertions2,
                                           length_deletions2))) {
        // Duplicate record.
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        // Throw away the equality we just deleted.
        equalitiesLength--;
        // Throw away the previous equality (it needs to be reevaluated).
        equalitiesLength--;
        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
        length_insertions1 = 0;  // Reset the counters.
        length_deletions1 = 0;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastequality = null;
        changes = true;
      }
    }
    pointer++;
  }

  // Normalize the diff.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
  this.diff_cleanupSemanticLossless(diffs);

  // Find any overlaps between deletions and insertions.
  // e.g: <del>abcxxx</del><ins>xxxdef</ins>
  //   -> <del>abc</del>xxx<ins>def</ins>
  // e.g: <del>xxxabc</del><ins>defxxx</ins>
  //   -> <ins>def</ins>xxx<del>abc</del>
  // Only extract an overlap if it is as big as the edit ahead or behind it.
  pointer = 1;
  while (pointer < diffs.length) {
    if (diffs[pointer - 1][0] == DIFF_DELETE &&
        diffs[pointer][0] == DIFF_INSERT) {
      var deletion = diffs[pointer - 1][1];
      var insertion = diffs[pointer][1];
      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
      if (overlap_length1 >= overlap_length2) {
        if (overlap_length1 >= deletion.length / 2 ||
            overlap_length1 >= insertion.length / 2) {
          // Overlap found.  Insert an equality and trim the surrounding edits.
          diffs.splice(pointer, 0,
              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);
          diffs[pointer - 1][1] =
              deletion.substring(0, deletion.length - overlap_length1);
          diffs[pointer + 1][1] = insertion.substring(overlap_length1);
          pointer++;
        }
      } else {
        if (overlap_length2 >= deletion.length / 2 ||
            overlap_length2 >= insertion.length / 2) {
          // Reverse overlap found.
          // Insert an equality and swap and trim the surrounding edits.
          diffs.splice(pointer, 0,
              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);
          diffs[pointer - 1][0] = DIFF_INSERT;
          diffs[pointer - 1][1] =
              insertion.substring(0, insertion.length - overlap_length2);
          diffs[pointer + 1][0] = DIFF_DELETE;
          diffs[pointer + 1][1] =
              deletion.substring(overlap_length2);
          pointer++;
        }
      }
      pointer++;
    }
    pointer++;
  }
};


/**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
  /**
   * Given two strings, compute a score representing whether the internal
   * boundary falls on logical boundaries.
   * Scores range from 6 (best) to 0 (worst).
   * Closure, but does not reference any external variables.
   * @param {string} one First string.
   * @param {string} two Second string.
   * @return {number} The score.
   * @private
   */
  function diff_cleanupSemanticScore_(one, two) {
    if (!one || !two) {
      // Edges are the best.
      return 6;
    }

    // Each port of this function behaves slightly differently due to
    // subtle differences in each language's definition of things like
    // 'whitespace'.  Since this function's purpose is largely cosmetic,
    // the choice has been made to use each language's native features
    // rather than force total conformity.
    var char1 = one.charAt(one.length - 1);
    var char2 = two.charAt(0);
    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);
    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);
    var whitespace1 = nonAlphaNumeric1 &&
        char1.match(diff_match_patch.whitespaceRegex_);
    var whitespace2 = nonAlphaNumeric2 &&
        char2.match(diff_match_patch.whitespaceRegex_);
    var lineBreak1 = whitespace1 &&
        char1.match(diff_match_patch.linebreakRegex_);
    var lineBreak2 = whitespace2 &&
        char2.match(diff_match_patch.linebreakRegex_);
    var blankLine1 = lineBreak1 &&
        one.match(diff_match_patch.blanklineEndRegex_);
    var blankLine2 = lineBreak2 &&
        two.match(diff_match_patch.blanklineStartRegex_);

    if (blankLine1 || blankLine2) {
      // Five points for blank lines.
      return 5;
    } else if (lineBreak1 || lineBreak2) {
      // Four points for line breaks.
      return 4;
    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
      // Three points for end of sentences.
      return 3;
    } else if (whitespace1 || whitespace2) {
      // Two points for whitespace.
      return 2;
    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
      // One point for non-alphanumeric.
      return 1;
    }
    return 0;
  }

  var pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      var equality1 = diffs[pointer - 1][1];
      var edit = diffs[pointer][1];
      var equality2 = diffs[pointer + 1][1];

      // First, shift the edit as far left as possible.
      var commonOffset = this.diff_commonSuffix(equality1, edit);
      if (commonOffset) {
        var commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset);
        edit = commonString + edit.substring(0, edit.length - commonOffset);
        equality2 = commonString + equality2;
      }

      // Second, step character by character right, looking for the best fit.
      var bestEquality1 = equality1;
      var bestEdit = edit;
      var bestEquality2 = equality2;
      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +
          diff_cleanupSemanticScore_(edit, equality2);
      while (edit.charAt(0) === equality2.charAt(0)) {
        equality1 += edit.charAt(0);
        edit = edit.substring(1) + equality2.charAt(0);
        equality2 = equality2.substring(1);
        var score = diff_cleanupSemanticScore_(equality1, edit) +
            diff_cleanupSemanticScore_(edit, equality2);
        // The >= encourages trailing rather than leading whitespace on edits.
        if (score >= bestScore) {
          bestScore = score;
          bestEquality1 = equality1;
          bestEdit = edit;
          bestEquality2 = equality2;
        }
      }

      if (diffs[pointer - 1][1] != bestEquality1) {
        // We have an improvement, save it back to the diff.
        if (bestEquality1) {
          diffs[pointer - 1][1] = bestEquality1;
        } else {
          diffs.splice(pointer - 1, 1);
          pointer--;
        }
        diffs[pointer][1] = bestEdit;
        if (bestEquality2) {
          diffs[pointer + 1][1] = bestEquality2;
        } else {
          diffs.splice(pointer + 1, 1);
          pointer--;
        }
      }
    }
    pointer++;
  }
};

// Define some regex patterns for matching boundaries.
diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
diff_match_patch.whitespaceRegex_ = /\s/;
diff_match_patch.linebreakRegex_ = /[\r\n]/;
diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;

/**
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  /** @type {?string} */
  var lastequality = null;
  // Always equal to diffs[equalities[equalitiesLength - 1]][1]
  var pointer = 0;  // Index of current position.
  // Is there an insertion operation before the last equality.
  var pre_ins = false;
  // Is there a deletion operation before the last equality.
  var pre_del = false;
  // Is there an insertion operation after the last equality.
  var post_ins = false;
  // Is there a deletion operation after the last equality.
  var post_del = false;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.
      if (diffs[pointer][1].length < this.Diff_EditCost &&
          (post_ins || post_del)) {
        // Candidate found.
        equalities[equalitiesLength++] = pointer;
        pre_ins = post_ins;
        pre_del = post_del;
        lastequality = diffs[pointer][1];
      } else {
        // Not a candidate, and can never become one.
        equalitiesLength = 0;
        lastequality = null;
      }
      post_ins = post_del = false;
    } else {  // An insertion or deletion.
      if (diffs[pointer][0] == DIFF_DELETE) {
        post_del = true;
      } else {
        post_ins = true;
      }
      /*
       * Five types to be split:
       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
       * <ins>A</ins>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<ins>C</ins>
       * <ins>A</del>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<del>C</del>
       */
      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||
                           ((lastequality.length < this.Diff_EditCost / 2) &&
                            (pre_ins + pre_del + post_ins + post_del) == 3))) {
        // Duplicate record.
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        equalitiesLength--;  // Throw away the equality we just deleted;
        lastequality = null;
        if (pre_ins && pre_del) {
          // No changes made which could affect previous entry, keep going.
          post_ins = post_del = true;
          equalitiesLength = 0;
        } else {
          equalitiesLength--;  // Throw away the previous equality.
          pointer = equalitiesLength > 0 ?
              equalities[equalitiesLength - 1] : -1;
          post_ins = post_del = false;
        }
        changes = true;
      }
    }
    pointer++;
  }

  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  var commonlength;
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete + count_insert > 1) {
          if (count_delete !== 0 && count_insert !== 0) {
            // Factor out any common prefixies.
            commonlength = this.diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if ((pointer - count_delete - count_insert) > 0 &&
                  diffs[pointer - count_delete - count_insert - 1][0] ==
                  DIFF_EQUAL) {
                diffs[pointer - count_delete - count_insert - 1][1] +=
                    text_insert.substring(0, commonlength);
              } else {
                diffs.splice(0, 0, [DIFF_EQUAL,
                                    text_insert.substring(0, commonlength)]);
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            // Factor out any common suffixies.
            commonlength = this.diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] = text_insert.substring(text_insert.length -
                  commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(0, text_insert.length -
                  commonlength);
              text_delete = text_delete.substring(0, text_delete.length -
                  commonlength);
            }
          }
          // Delete the offending records and add the merged ones.
          if (count_delete === 0) {
            diffs.splice(pointer - count_insert,
                count_delete + count_insert, [DIFF_INSERT, text_insert]);
          } else if (count_insert === 0) {
            diffs.splice(pointer - count_delete,
                count_delete + count_insert, [DIFF_DELETE, text_delete]);
          } else {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_DELETE, text_delete],
                [DIFF_INSERT, text_insert]);
          }
          pointer = pointer - count_delete - count_insert +
                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
          // Merge this equality with the previous one.
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === '') {
    diffs.pop();  // Remove the dummy entry at the end.
  }

  // Second pass: look for single edits surrounded on both sides by equalities
  // which can be shifted sideways to eliminate an equality.
  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
  var changes = false;
  pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      if (diffs[pointer][1].substring(diffs[pointer][1].length -
          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
        // Shift the edit over the previous equality.
        diffs[pointer][1] = diffs[pointer - 1][1] +
            diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                        diffs[pointer - 1][1].length);
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
          diffs[pointer + 1][1]) {
        // Shift the edit over the next equality.
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] =
            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
            diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  // If shifts were made, the diff needs reordering and another shift sweep.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {number} loc Location within text1.
 * @return {number} Location within text2.
 */
diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
  var chars1 = 0;
  var chars2 = 0;
  var last_chars1 = 0;
  var last_chars2 = 0;
  var x;
  for (x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.
      chars1 += diffs[x][1].length;
    }
    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.
      chars2 += diffs[x][1].length;
    }
    if (chars1 > loc) {  // Overshot the location.
      break;
    }
    last_chars1 = chars1;
    last_chars2 = chars2;
  }
  // Was the location was deleted?
  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
    return last_chars2;
  }
  // Add the remaining character length.
  return last_chars2 + (loc - last_chars1);
};


/**
 * Convert a diff array into a pretty HTML report.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} HTML representation.
 */
diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
  var html = [];
  var pattern_amp = /&/g;
  var pattern_lt = /</g;
  var pattern_gt = />/g;
  var pattern_para = /\n/g;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];    // Operation (insert, delete, equal)
    var data = diffs[x][1];  // Text of change.
    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')
        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');
    switch (op) {
      case DIFF_INSERT:
        html[x] = '<ins style="background:#e6ffe6;">' + text + '</ins>';
        break;
      case DIFF_DELETE:
        html[x] = '<del style="background:#ffe6e6;">' + text + '</del>';
        break;
      case DIFF_EQUAL:
        html[x] = '<span>' + text + '</span>';
        break;
    }
  }
  return html.join('');
};


/**
 * Compute and return the source text (all equalities and deletions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Source text.
 */
diff_match_patch.prototype.diff_text1 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute and return the destination text (all equalities and insertions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Destination text.
 */
diff_match_patch.prototype.diff_text2 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_DELETE) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {number} Number of changes.
 */
diff_match_patch.prototype.diff_levenshtein = function(diffs) {
  var levenshtein = 0;
  var insertions = 0;
  var deletions = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];
    var data = diffs[x][1];
    switch (op) {
      case DIFF_INSERT:
        insertions += data.length;
        break;
      case DIFF_DELETE:
        deletions += data.length;
        break;
      case DIFF_EQUAL:
        // A deletion and an insertion is one substitution.
        levenshtein += Math.max(insertions, deletions);
        insertions = 0;
        deletions = 0;
        break;
    }
  }
  levenshtein += Math.max(insertions, deletions);
  return levenshtein;
};


/**
 * Crush the diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Delta text.
 */
diff_match_patch.prototype.diff_toDelta = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    switch (diffs[x][0]) {
      case DIFF_INSERT:
        text[x] = '+' + encodeURI(diffs[x][1]);
        break;
      case DIFF_DELETE:
        text[x] = '-' + diffs[x][1].length;
        break;
      case DIFF_EQUAL:
        text[x] = '=' + diffs[x][1].length;
        break;
    }
  }
  return text.join('\t').replace(/%20/g, ' ');
};


/**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full diff.
 * @param {string} text1 Source string for the diff.
 * @param {string} delta Delta text.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @throws {!Error} If invalid input.
 */
diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
  var diffs = [];
  var diffsLength = 0;  // Keeping our own length var is faster in JS.
  var pointer = 0;  // Cursor in text1
  var tokens = delta.split(/\t/g);
  for (var x = 0; x < tokens.length; x++) {
    // Each token begins with a one character parameter which specifies the
    // operation of this token (delete, insert, equality).
    var param = tokens[x].substring(1);
    switch (tokens[x].charAt(0)) {
      case '+':
        try {
          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];
        } catch (ex) {
          // Malformed URI sequence.
          throw new Error('Illegal escape in diff_fromDelta: ' + param);
        }
        break;
      case '-':
        // Fall through.
      case '=':
        var n = parseInt(param, 10);
        if (isNaN(n) || n < 0) {
          throw new Error('Invalid number in diff_fromDelta: ' + param);
        }
        var text = text1.substring(pointer, pointer += n);
        if (tokens[x].charAt(0) == '=') {
          diffs[diffsLength++] = [DIFF_EQUAL, text];
        } else {
          diffs[diffsLength++] = [DIFF_DELETE, text];
        }
        break;
      default:
        // Blank tokens are ok (from a trailing \t).
        // Anything else is an error.
        if (tokens[x]) {
          throw new Error('Invalid diff operation in diff_fromDelta: ' +
                          tokens[x]);
        }
    }
  }
  if (pointer != text1.length) {
    throw new Error('Delta length (' + pointer +
        ') does not equal source text length (' + text1.length + ').');
  }
  return diffs;
};


//  MATCH FUNCTIONS


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 */
diff_match_patch.prototype.match_main = function(text, pattern, loc) {
  // Check for null inputs.
  if (text == null || pattern == null || loc == null) {
    throw new Error('Null input. (match_main)');
  }

  loc = Math.max(0, Math.min(loc, text.length));
  if (text == pattern) {
    // Shortcut (potentially not guaranteed by the algorithm)
    return 0;
  } else if (!text.length) {
    // Nothing to match.
    return -1;
  } else if (text.substring(loc, loc + pattern.length) == pattern) {
    // Perfect match at the perfect spot!  (Includes case of null pattern)
    return loc;
  } else {
    // Do a fuzzy compare.
    return this.match_bitap_(text, pattern, loc);
  }
};


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc' using the
 * Bitap algorithm.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 * @private
 */
diff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {
  if (pattern.length > this.Match_MaxBits) {
    throw new Error('Pattern too long for this browser.');
  }

  // Initialise the alphabet.
  var s = this.match_alphabet_(pattern);

  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Compute and return the score for a match with e errors and x location.
   * Accesses loc and pattern through being a closure.
   * @param {number} e Number of errors in match.
   * @param {number} x Location of match.
   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
   * @private
   */
  function match_bitapScore_(e, x) {
    var accuracy = e / pattern.length;
    var proximity = Math.abs(loc - x);
    if (!dmp.Match_Distance) {
      // Dodge divide by zero error.
      return proximity ? 1.0 : accuracy;
    }
    return accuracy + (proximity / dmp.Match_Distance);
  }

  // Highest score beyond which we give up.
  var score_threshold = this.Match_Threshold;
  // Is there a nearby exact match? (speedup)
  var best_loc = text.indexOf(pattern, loc);
  if (best_loc != -1) {
    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
    // What about in the other direction? (speedup)
    best_loc = text.lastIndexOf(pattern, loc + pattern.length);
    if (best_loc != -1) {
      score_threshold =
          Math.min(match_bitapScore_(0, best_loc), score_threshold);
    }
  }

  // Initialise the bit arrays.
  var matchmask = 1 << (pattern.length - 1);
  best_loc = -1;

  var bin_min, bin_mid;
  var bin_max = pattern.length + text.length;
  var last_rd;
  for (var d = 0; d < pattern.length; d++) {
    // Scan for the best match; each iteration allows for one more error.
    // Run a binary search to determine how far from 'loc' we can stray at this
    // error level.
    bin_min = 0;
    bin_mid = bin_max;
    while (bin_min < bin_mid) {
      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
        bin_min = bin_mid;
      } else {
        bin_max = bin_mid;
      }
      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
    }
    // Use the result from this iteration as the maximum for the next.
    bin_max = bin_mid;
    var start = Math.max(1, loc - bin_mid + 1);
    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;

    var rd = Array(finish + 2);
    rd[finish + 1] = (1 << d) - 1;
    for (var j = finish; j >= start; j--) {
      // The alphabet (s) is a sparse hash, so the following line generates
      // warnings.
      var charMatch = s[text.charAt(j - 1)];
      if (d === 0) {  // First pass: exact match.
        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
      } else {  // Subsequent passes: fuzzy match.
        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |
                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |
                last_rd[j + 1];
      }
      if (rd[j] & matchmask) {
        var score = match_bitapScore_(d, j - 1);
        // This match will almost certainly be better than any existing match.
        // But check anyway.
        if (score <= score_threshold) {
          // Told you so.
          score_threshold = score;
          best_loc = j - 1;
          if (best_loc > loc) {
            // When passing loc, don't exceed our current distance from loc.
            start = Math.max(1, 2 * loc - best_loc);
          } else {
            // Already passed loc, downhill from here on in.
            break;
          }
        }
      }
    }
    // No hope for a (better) match at greater error levels.
    if (match_bitapScore_(d + 1, loc) > score_threshold) {
      break;
    }
    last_rd = rd;
  }
  return best_loc;
};


/**
 * Initialise the alphabet for the Bitap algorithm.
 * @param {string} pattern The text to encode.
 * @return {!Object} Hash of character locations.
 * @private
 */
diff_match_patch.prototype.match_alphabet_ = function(pattern) {
  var s = {};
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] = 0;
  }
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);
  }
  return s;
};


//  PATCH FUNCTIONS


/**
 * Increase the context until it is unique,
 * but don't let the pattern expand beyond Match_MaxBits.
 * @param {!diff_match_patch.patch_obj} patch The patch to grow.
 * @param {string} text Source text.
 * @private
 */
diff_match_patch.prototype.patch_addContext_ = function(patch, text) {
  if (text.length == 0) {
    return;
  }
  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
  var padding = 0;

  // Look for the first and last matches of pattern in text.  If two different
  // matches are found, increase the pattern length.
  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&
         pattern.length < this.Match_MaxBits - this.Patch_Margin -
         this.Patch_Margin) {
    padding += this.Patch_Margin;
    pattern = text.substring(patch.start2 - padding,
                             patch.start2 + patch.length1 + padding);
  }
  // Add one chunk for good luck.
  padding += this.Patch_Margin;

  // Add the prefix.
  var prefix = text.substring(patch.start2 - padding, patch.start2);
  if (prefix) {
    patch.diffs.unshift([DIFF_EQUAL, prefix]);
  }
  // Add the suffix.
  var suffix = text.substring(patch.start2 + patch.length1,
                              patch.start2 + patch.length1 + padding);
  if (suffix) {
    patch.diffs.push([DIFF_EQUAL, suffix]);
  }

  // Roll back the start points.
  patch.start1 -= prefix.length;
  patch.start2 -= prefix.length;
  // Extend the lengths.
  patch.length1 += prefix.length + suffix.length;
  patch.length2 += prefix.length + suffix.length;
};


/**
 * Compute a list of patches to turn text1 into text2.
 * Use diffs if provided, otherwise compute it ourselves.
 * There are four ways to call this function, depending on what data is
 * available to the caller:
 * Method 1:
 * a = text1, b = text2
 * Method 2:
 * a = diffs
 * Method 3 (optimal):
 * a = text1, b = diffs
 * Method 4 (deprecated, use method 3):
 * a = text1, b = text2, c = diffs
 *
 * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or
 * Array of diff tuples for text1 to text2 (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or
 * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples
 * for text1 to text2 (method 4) or undefined (methods 1,2,3).
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */
diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {
  var text1, diffs;
  if (typeof a == 'string' && typeof opt_b == 'string' &&
      typeof opt_c == 'undefined') {
    // Method 1: text1, text2
    // Compute diffs from text1 and text2.
    text1 = /** @type {string} */(a);
    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);
    if (diffs.length > 2) {
      this.diff_cleanupSemantic(diffs);
      this.diff_cleanupEfficiency(diffs);
    }
  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&
      typeof opt_c == 'undefined') {
    // Method 2: diffs
    // Compute text1 from diffs.
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);
    text1 = this.diff_text1(diffs);
  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&
      typeof opt_c == 'undefined') {
    // Method 3: text1, diffs
    text1 = /** @type {string} */(a);
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);
  } else if (typeof a == 'string' && typeof opt_b == 'string' &&
      opt_c && typeof opt_c == 'object') {
    // Method 4: text1, text2, diffs
    // text2 is not used.
    text1 = /** @type {string} */(a);
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);
  } else {
    throw new Error('Unknown call format to patch_make.');
  }

  if (diffs.length === 0) {
    return [];  // Get rid of the null case.
  }
  var patches = [];
  var patch = new diff_match_patch.patch_obj();
  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.
  var char_count1 = 0;  // Number of characters into the text1 string.
  var char_count2 = 0;  // Number of characters into the text2 string.
  // Start with text1 (prepatch_text) and apply the diffs until we arrive at
  // text2 (postpatch_text).  We recreate the patches one by one to determine
  // context info.
  var prepatch_text = text1;
  var postpatch_text = text1;
  for (var x = 0; x < diffs.length; x++) {
    var diff_type = diffs[x][0];
    var diff_text = diffs[x][1];

    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
      // A new patch starts here.
      patch.start1 = char_count1;
      patch.start2 = char_count2;
    }

    switch (diff_type) {
      case DIFF_INSERT:
        patch.diffs[patchDiffLength++] = diffs[x];
        patch.length2 += diff_text.length;
        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +
                         postpatch_text.substring(char_count2);
        break;
      case DIFF_DELETE:
        patch.length1 += diff_text.length;
        patch.diffs[patchDiffLength++] = diffs[x];
        postpatch_text = postpatch_text.substring(0, char_count2) +
                         postpatch_text.substring(char_count2 +
                             diff_text.length);
        break;
      case DIFF_EQUAL:
        if (diff_text.length <= 2 * this.Patch_Margin &&
            patchDiffLength && diffs.length != x + 1) {
          // Small equality inside a patch.
          patch.diffs[patchDiffLength++] = diffs[x];
          patch.length1 += diff_text.length;
          patch.length2 += diff_text.length;
        } else if (diff_text.length >= 2 * this.Patch_Margin) {
          // Time for a new patch.
          if (patchDiffLength) {
            this.patch_addContext_(patch, prepatch_text);
            patches.push(patch);
            patch = new diff_match_patch.patch_obj();
            patchDiffLength = 0;
            // Unlike Unidiff, our patch lists have a rolling context.
            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff
            // Update prepatch text & pos to reflect the application of the
            // just completed patch.
            prepatch_text = postpatch_text;
            char_count1 = char_count2;
          }
        }
        break;
    }

    // Update the current character count.
    if (diff_type !== DIFF_INSERT) {
      char_count1 += diff_text.length;
    }
    if (diff_type !== DIFF_DELETE) {
      char_count2 += diff_text.length;
    }
  }
  // Pick up the leftover patch if not empty.
  if (patchDiffLength) {
    this.patch_addContext_(patch, prepatch_text);
    patches.push(patch);
  }

  return patches;
};


/**
 * Given an array of patches, return another array that is identical.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */
diff_match_patch.prototype.patch_deepCopy = function(patches) {
  // Making deep copies is hard in JavaScript.
  var patchesCopy = [];
  for (var x = 0; x < patches.length; x++) {
    var patch = patches[x];
    var patchCopy = new diff_match_patch.patch_obj();
    patchCopy.diffs = [];
    for (var y = 0; y < patch.diffs.length; y++) {
      patchCopy.diffs[y] = patch.diffs[y].slice();
    }
    patchCopy.start1 = patch.start1;
    patchCopy.start2 = patch.start2;
    patchCopy.length1 = patch.length1;
    patchCopy.length2 = patch.length2;
    patchesCopy[x] = patchCopy;
  }
  return patchesCopy;
};


/**
 * Merge a set of patches onto the text.  Return a patched text, as well
 * as a list of true/false values indicating which patches were applied.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @param {string} text Old text.
 * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the
 *      new text and an array of boolean values.
 */
diff_match_patch.prototype.patch_apply = function(patches, text) {
  if (patches.length == 0) {
    return [text, []];
  }

  // Deep copy the patches so that no changes are made to originals.
  patches = this.patch_deepCopy(patches);

  var nullPadding = this.patch_addPadding(patches);
  text = nullPadding + text + nullPadding;

  this.patch_splitMax(patches);
  // delta keeps track of the offset between the expected and actual location
  // of the previous patch.  If there are patches expected at positions 10 and
  // 20, but the first patch was found at 12, delta is 2 and the second patch
  // has an effective expected position of 22.
  var delta = 0;
  var results = [];
  for (var x = 0; x < patches.length; x++) {
    var expected_loc = patches[x].start2 + delta;
    var text1 = this.diff_text1(patches[x].diffs);
    var start_loc;
    var end_loc = -1;
    if (text1.length > this.Match_MaxBits) {
      // patch_splitMax will only provide an oversized pattern in the case of
      // a monster delete.
      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),
                                  expected_loc);
      if (start_loc != -1) {
        end_loc = this.match_main(text,
            text1.substring(text1.length - this.Match_MaxBits),
            expected_loc + text1.length - this.Match_MaxBits);
        if (end_loc == -1 || start_loc >= end_loc) {
          // Can't find valid trailing context.  Drop this patch.
          start_loc = -1;
        }
      }
    } else {
      start_loc = this.match_main(text, text1, expected_loc);
    }
    if (start_loc == -1) {
      // No match found.  :(
      results[x] = false;
      // Subtract the delta for this failed patch from subsequent patches.
      delta -= patches[x].length2 - patches[x].length1;
    } else {
      // Found a match.  :)
      results[x] = true;
      delta = start_loc - expected_loc;
      var text2;
      if (end_loc == -1) {
        text2 = text.substring(start_loc, start_loc + text1.length);
      } else {
        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
      }
      if (text1 == text2) {
        // Perfect match, just shove the replacement text in.
        text = text.substring(0, start_loc) +
               this.diff_text2(patches[x].diffs) +
               text.substring(start_loc + text1.length);
      } else {
        // Imperfect match.  Run a diff to get a framework of equivalent
        // indices.
        var diffs = this.diff_main(text1, text2, false);
        if (text1.length > this.Match_MaxBits &&
            this.diff_levenshtein(diffs) / text1.length >
            this.Patch_DeleteThreshold) {
          // The end points match, but the content is unacceptably bad.
          results[x] = false;
        } else {
          this.diff_cleanupSemanticLossless(diffs);
          var index1 = 0;
          var index2;
          for (var y = 0; y < patches[x].diffs.length; y++) {
            var mod = patches[x].diffs[y];
            if (mod[0] !== DIFF_EQUAL) {
              index2 = this.diff_xIndex(diffs, index1);
            }
            if (mod[0] === DIFF_INSERT) {  // Insertion
              text = text.substring(0, start_loc + index2) + mod[1] +
                     text.substring(start_loc + index2);
            } else if (mod[0] === DIFF_DELETE) {  // Deletion
              text = text.substring(0, start_loc + index2) +
                     text.substring(start_loc + this.diff_xIndex(diffs,
                         index1 + mod[1].length));
            }
            if (mod[0] !== DIFF_DELETE) {
              index1 += mod[1].length;
            }
          }
        }
      }
    }
  }
  // Strip the padding off.
  text = text.substring(nullPadding.length, text.length - nullPadding.length);
  return [text, results];
};


/**
 * Add some padding on text start and end so that edges can match something.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} The padding string added to each side.
 */
diff_match_patch.prototype.patch_addPadding = function(patches) {
  var paddingLength = this.Patch_Margin;
  var nullPadding = '';
  for (var x = 1; x <= paddingLength; x++) {
    nullPadding += String.fromCharCode(x);
  }

  // Bump all the patches forward.
  for (var x = 0; x < patches.length; x++) {
    patches[x].start1 += paddingLength;
    patches[x].start2 += paddingLength;
  }

  // Add some padding on start of first diff.
  var patch = patches[0];
  var diffs = patch.diffs;
  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.unshift([DIFF_EQUAL, nullPadding]);
    patch.start1 -= paddingLength;  // Should be 0.
    patch.start2 -= paddingLength;  // Should be 0.
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[0][1].length) {
    // Grow first equality.
    var extraLength = paddingLength - diffs[0][1].length;
    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
    patch.start1 -= extraLength;
    patch.start2 -= extraLength;
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  // Add some padding on end of last diff.
  patch = patches[patches.length - 1];
  diffs = patch.diffs;
  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.push([DIFF_EQUAL, nullPadding]);
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[diffs.length - 1][1].length) {
    // Grow last equality.
    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  return nullPadding;
};


/**
 * Look through the patches and break up any which are longer than the maximum
 * limit of the match algorithm.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 */
diff_match_patch.prototype.patch_splitMax = function(patches) {
  var patch_size = this.Match_MaxBits;
  for (var x = 0; x < patches.length; x++) {
    if (patches[x].length1 <= patch_size) {
      continue;
    }
    var bigpatch = patches[x];
    // Remove the big old patch.
    patches.splice(x--, 1);
    var start1 = bigpatch.start1;
    var start2 = bigpatch.start2;
    var precontext = '';
    while (bigpatch.diffs.length !== 0) {
      // Create one of several smaller patches.
      var patch = new diff_match_patch.patch_obj();
      var empty = true;
      patch.start1 = start1 - precontext.length;
      patch.start2 = start2 - precontext.length;
      if (precontext !== '') {
        patch.length1 = patch.length2 = precontext.length;
        patch.diffs.push([DIFF_EQUAL, precontext]);
      }
      while (bigpatch.diffs.length !== 0 &&
             patch.length1 < patch_size - this.Patch_Margin) {
        var diff_type = bigpatch.diffs[0][0];
        var diff_text = bigpatch.diffs[0][1];
        if (diff_type === DIFF_INSERT) {
          // Insertions are harmless.
          patch.length2 += diff_text.length;
          start2 += diff_text.length;
          patch.diffs.push(bigpatch.diffs.shift());
          empty = false;
        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&
                   patch.diffs[0][0] == DIFF_EQUAL &&
                   diff_text.length > 2 * patch_size) {
          // This is a large deletion.  Let it pass in one chunk.
          patch.length1 += diff_text.length;
          start1 += diff_text.length;
          empty = false;
          patch.diffs.push([diff_type, diff_text]);
          bigpatch.diffs.shift();
        } else {
          // Deletion or equality.  Only take as much as we can stomach.
          diff_text = diff_text.substring(0,
              patch_size - patch.length1 - this.Patch_Margin);
          patch.length1 += diff_text.length;
          start1 += diff_text.length;
          if (diff_type === DIFF_EQUAL) {
            patch.length2 += diff_text.length;
            start2 += diff_text.length;
          } else {
            empty = false;
          }
          patch.diffs.push([diff_type, diff_text]);
          if (diff_text == bigpatch.diffs[0][1]) {
            bigpatch.diffs.shift();
          } else {
            bigpatch.diffs[0][1] =
                bigpatch.diffs[0][1].substring(diff_text.length);
          }
        }
      }
      // Compute the head context for the next patch.
      precontext = this.diff_text2(patch.diffs);
      precontext =
          precontext.substring(precontext.length - this.Patch_Margin);
      // Append the end context for this patch.
      var postcontext = this.diff_text1(bigpatch.diffs)
                            .substring(0, this.Patch_Margin);
      if (postcontext !== '') {
        patch.length1 += postcontext.length;
        patch.length2 += postcontext.length;
        if (patch.diffs.length !== 0 &&
            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
          patch.diffs[patch.diffs.length - 1][1] += postcontext;
        } else {
          patch.diffs.push([DIFF_EQUAL, postcontext]);
        }
      }
      if (!empty) {
        patches.splice(++x, 0, patch);
      }
    }
  }
};


/**
 * Take a list of patches and return a textual representation.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} Text representation of patches.
 */
diff_match_patch.prototype.patch_toText = function(patches) {
  var text = [];
  for (var x = 0; x < patches.length; x++) {
    text[x] = patches[x];
  }
  return text.join('');
};


/**
 * Parse a textual representation of patches and return a list of Patch objects.
 * @param {string} textline Text representation of patches.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 * @throws {!Error} If invalid input.
 */
diff_match_patch.prototype.patch_fromText = function(textline) {
  var patches = [];
  if (!textline) {
    return patches;
  }
  var text = textline.split('\n');
  var textPointer = 0;
  var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
  while (textPointer < text.length) {
    var m = text[textPointer].match(patchHeader);
    if (!m) {
      throw new Error('Invalid patch string: ' + text[textPointer]);
    }
    var patch = new diff_match_patch.patch_obj();
    patches.push(patch);
    patch.start1 = parseInt(m[1], 10);
    if (m[2] === '') {
      patch.start1--;
      patch.length1 = 1;
    } else if (m[2] == '0') {
      patch.length1 = 0;
    } else {
      patch.start1--;
      patch.length1 = parseInt(m[2], 10);
    }

    patch.start2 = parseInt(m[3], 10);
    if (m[4] === '') {
      patch.start2--;
      patch.length2 = 1;
    } else if (m[4] == '0') {
      patch.length2 = 0;
    } else {
      patch.start2--;
      patch.length2 = parseInt(m[4], 10);
    }
    textPointer++;

    while (textPointer < text.length) {
      var sign = text[textPointer].charAt(0);
      try {
        var line = decodeURI(text[textPointer].substring(1));
      } catch (ex) {
        // Malformed URI sequence.
        throw new Error('Illegal escape in patch_fromText: ' + line);
      }
      if (sign == '-') {
        // Deletion.
        patch.diffs.push([DIFF_DELETE, line]);
      } else if (sign == '+') {
        // Insertion.
        patch.diffs.push([DIFF_INSERT, line]);
      } else if (sign == ' ') {
        // Minor equality.
        patch.diffs.push([DIFF_EQUAL, line]);
      } else if (sign == '@') {
        // Start of next patch.
        break;
      } else if (sign === '') {
        // Blank line?  Whatever.
      } else {
        // WTF?
        throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
      }
      textPointer++;
    }
  }
  return patches;
};


/**
 * Class representing one patch operation.
 * @constructor
 */
diff_match_patch.patch_obj = function() {
  /** @type {!Array.<!diff_match_patch.Diff>} */
  this.diffs = [];
  /** @type {?number} */
  this.start1 = null;
  /** @type {?number} */
  this.start2 = null;
  /** @type {number} */
  this.length1 = 0;
  /** @type {number} */
  this.length2 = 0;
};


/**
 * Emmulate GNU diff's format.
 * Header: @@ -382,8 +481,9 @@
 * Indicies are printed as 1-based, not 0-based.
 * @return {string} The GNU diff string.
 */
diff_match_patch.patch_obj.prototype.toString = function() {
  var coords1, coords2;
  if (this.length1 === 0) {
    coords1 = this.start1 + ',0';
  } else if (this.length1 == 1) {
    coords1 = this.start1 + 1;
  } else {
    coords1 = (this.start1 + 1) + ',' + this.length1;
  }
  if (this.length2 === 0) {
    coords2 = this.start2 + ',0';
  } else if (this.length2 == 1) {
    coords2 = this.start2 + 1;
  } else {
    coords2 = (this.start2 + 1) + ',' + this.length2;
  }
  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\n'];
  var op;
  // Escape the body of the patch with %xx notation.
  for (var x = 0; x < this.diffs.length; x++) {
    switch (this.diffs[x][0]) {
      case DIFF_INSERT:
        op = '+';
        break;
      case DIFF_DELETE:
        op = '-';
        break;
      case DIFF_EQUAL:
        op = ' ';
        break;
    }
    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\n';
  }
  return text.join('').replace(/%20/g, ' ');
};


// Export these global variables so that they survive Google's JS compiler.
// In a browser, 'this' will be 'window'.
// Users of node.js should 'require' the uncompressed version since Google's
// JS compiler may break the following exports for non-browser environments.
this['diff_match_patch'] = diff_match_patch;
this['DIFF_DELETE'] = DIFF_DELETE;
this['DIFF_INSERT'] = DIFF_INSERT;
this['DIFF_EQUAL'] = DIFF_EQUAL;
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/diff.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/jquery-pnotify.js
/*
 * jQuery Pines Notify (pnotify) Plugin 1.2.2
 *
 * http://pinesframework.org/pnotify/
 * Copyright (c) 2009-2012 Hunter Perrin
 *
 * Triple license under the GPL, LGPL, and MPL:
 *	  http://www.gnu.org/licenses/gpl.html
 *	  http://www.gnu.org/licenses/lgpl.html
 *	  http://www.mozilla.org/MPL/MPL-1.1.html
 */

(function($) {
	var history_handle_top,
		timer,
		body,
		jwindow = $(window),
		styling = {
			jqueryui: {
				container: "ui-widget ui-widget-content ui-corner-all",
				notice: "ui-state-highlight",
				// (The actual jQUI notice icon looks terrible.)
				notice_icon: "ui-icon ui-icon-info",
				info: "",
				info_icon: "ui-icon ui-icon-info",
				success: "ui-state-default",
				success_icon: "ui-icon ui-icon-circle-check",
				error: "ui-state-error",
				error_icon: "ui-icon ui-icon-alert",
				closer: "ui-icon ui-icon-close",
				pin_up: "ui-icon ui-icon-pin-w",
				pin_down: "ui-icon ui-icon-pin-s",
				hi_menu: "ui-state-default ui-corner-bottom",
				hi_btn: "ui-state-default ui-corner-all",
				hi_btnhov: "ui-state-hover",
				hi_hnd: "ui-icon ui-icon-grip-dotted-horizontal"
			},
			bootstrap: {
				container: "alert",
				notice: "",
				notice_icon: "icon-exclamation-sign",
				info: "alert-info",
				info_icon: "icon-info-sign",
				success: "alert-success",
				success_icon: "icon-ok-sign",
				error: "alert-error",
				error_icon: "icon-warning-sign",
				closer: "icon-remove",
				pin_up: "icon-pause",
				pin_down: "icon-play",
				hi_menu: "well",
				hi_btn: "btn",
				hi_btnhov: "",
				hi_hnd: "icon-chevron-down"
			}
		};
	// Set global variables.
	var do_when_ready = function(){
		body = $("body");
		jwindow = $(window);
		// Reposition the notices when the window resizes.
		jwindow.bind('resize', function(){
			if (timer)
				clearTimeout(timer);
			timer = setTimeout($.pnotify_position_all, 10);
		});
	};
	if (document.body)
		do_when_ready();
	else
		$(do_when_ready);
	$.extend({
		pnotify_remove_all: function () {
			var notices_data = jwindow.data("pnotify");
			/* POA: Added null-check */
			if (notices_data && notices_data.length) {
				$.each(notices_data, function(){
					if (this.pnotify_remove)
						this.pnotify_remove();
				});
			}
		},
		pnotify_position_all: function () {
			// This timer is used for queueing this function so it doesn't run
			// repeatedly.
			if (timer)
				clearTimeout(timer);
			timer = null;
			// Get all the notices.
			var notices_data = jwindow.data("pnotify");
			if (!notices_data || !notices_data.length)
				return;
			// Reset the next position data.
			$.each(notices_data, function(){
				var s = this.opts.stack;
				if (!s) return;
				s.nextpos1 = s.firstpos1;
				s.nextpos2 = s.firstpos2;
				s.addpos2 = 0;
				s.animation = true;
			});
			$.each(notices_data, function(){
				this.pnotify_position();
			});
		},
		pnotify: function(options) {
			// Stores what is currently being animated (in or out).
			var animating;

			// Build main options.
			var opts;
			if (typeof options != "object") {
				opts = $.extend({}, $.pnotify.defaults);
				opts.text = options;
			} else {
				opts = $.extend({}, $.pnotify.defaults, options);
			}
			// Translate old pnotify_ style options.
			for (var i in opts) {
				if (typeof i == "string" && i.match(/^pnotify_/))
					opts[i.replace(/^pnotify_/, "")] = opts[i];
			}

			if (opts.before_init) {
				if (opts.before_init(opts) === false)
					return null;
			}

			// This keeps track of the last element the mouse was over, so
			// mouseleave, mouseenter, etc can be called.
			var nonblock_last_elem;
			// This is used to pass events through the notice if it is non-blocking.
			var nonblock_pass = function(e, e_name){
				pnotify.css("display", "none");
				var element_below = document.elementFromPoint(e.clientX, e.clientY);
				pnotify.css("display", "block");
				var jelement_below = $(element_below);
				var cursor_style = jelement_below.css("cursor");
				pnotify.css("cursor", cursor_style != "auto" ? cursor_style : "default");
				// If the element changed, call mouseenter, mouseleave, etc.
				if (!nonblock_last_elem || nonblock_last_elem.get(0) != element_below) {
					if (nonblock_last_elem) {
						dom_event.call(nonblock_last_elem.get(0), "mouseleave", e.originalEvent);
						dom_event.call(nonblock_last_elem.get(0), "mouseout", e.originalEvent);
					}
					dom_event.call(element_below, "mouseenter", e.originalEvent);
					dom_event.call(element_below, "mouseover", e.originalEvent);
				}
				dom_event.call(element_below, e_name, e.originalEvent);
				// Remember the latest element the mouse was over.
				nonblock_last_elem = jelement_below;
			};

			// Get our styling object.
			var styles = styling[opts.styling];

			// Create our widget.
			// Stop animation, reset the removal timer, and show the close
			// button when the user mouses over.
			var pnotify = $("<div />", {
				"class": "ui-pnotify "+opts.addclass,
				"css": {"display": "none"},
				"mouseenter": function(e){
					if (opts.nonblock) e.stopPropagation();
					if (opts.mouse_reset && animating == "out") {
						// If it's animating out, animate back in really quickly.
						pnotify.stop(true);
						animating = "in";
						pnotify.css("height", "auto").animate({"width": opts.width, "opacity": opts.nonblock ? opts.nonblock_opacity : opts.opacity}, "fast");
					}
					if (opts.nonblock) {
						// If it's non-blocking, animate to the other opacity.
						pnotify.stop().animate({"opacity": opts.nonblock_opacity}, "fast");
					}
					// Stop the close timer.
					if (opts.hide && opts.mouse_reset) pnotify.pnotify_cancel_remove();
					// Show the buttons.
					if (opts.sticker && !opts.nonblock) pnotify.sticker.trigger("pnotify_icon").css("visibility", "visible");
					if (opts.closer && !opts.nonblock) pnotify.closer.css("visibility", "visible");
				},
				"mouseleave": function(e){
					if (opts.nonblock) e.stopPropagation();
					nonblock_last_elem = null;
					pnotify.css("cursor", "auto");
					// Animate back to the normal opacity.
					if (opts.nonblock && animating != "out")
						pnotify.stop().animate({"opacity": opts.opacity}, "fast");
					// Start the close timer.
					if (opts.hide && opts.mouse_reset) pnotify.pnotify_queue_remove();
					// Hide the buttons.
					if (opts.sticker_hover)
						pnotify.sticker.css("visibility", "hidden");
					if (opts.closer_hover)
						pnotify.closer.css("visibility", "hidden");
					$.pnotify_position_all();
				},
				"mouseover": function(e){
					if (opts.nonblock) e.stopPropagation();
				},
				"mouseout": function(e){
					if (opts.nonblock) e.stopPropagation();
				},
				"mousemove": function(e){
					if (opts.nonblock) {
						e.stopPropagation();
						nonblock_pass(e, "onmousemove");
					}
				},
				"mousedown": function(e){
					if (opts.nonblock) {
						e.stopPropagation();
						e.preventDefault();
						nonblock_pass(e, "onmousedown");
					}
				},
				"mouseup": function(e){
					if (opts.nonblock) {
						e.stopPropagation();
						e.preventDefault();
						nonblock_pass(e, "onmouseup");
					}
				},
				"click": function(e){
					if (opts.nonblock) {
						e.stopPropagation();
						nonblock_pass(e, "onclick");
					}
				},
				"dblclick": function(e){
					if (opts.nonblock) {
						e.stopPropagation();
						nonblock_pass(e, "ondblclick");
					}
				}
			});
			pnotify.opts = opts;
			// Create a container for the notice contents.
                        var stateClass;
                        if (opts.state) {
                            stateClass = 'ui-state-' + opts.state;
                        } else if (styles[opts.type]) {
                            stateClass = styles[opts.type];
                        } else {
                            stateClass = styles.notice;
                        }
			pnotify.container = $("<div />", {
                            "class": styles.container + " ui-pnotify-container " + stateClass
                        }).appendTo(pnotify);
			if (opts.cornerclass != "")
				pnotify.container.removeClass("ui-corner-all").addClass(opts.cornerclass);
			// Create a drop shadow.
			if (opts.shadow)
				pnotify.container.addClass("ui-pnotify-shadow");

			// The current version of Pines Notify.
			pnotify.pnotify_version = "1.2.2";

			// This function is for updating the notice.
			pnotify.pnotify = function(options) {
				// Update the notice.
				var old_opts = opts;
				if (typeof options == "string")
					opts.text = options;
				else
					opts = $.extend({}, opts, options);
				// Translate old pnotify_ style options.
				for (var i in opts) {
					if (typeof i == "string" && i.match(/^pnotify_/))
						opts[i.replace(/^pnotify_/, "")] = opts[i];
				}
				pnotify.opts = opts;
				// Update the corner class.
				if (opts.cornerclass != old_opts.cornerclass)
					pnotify.container.removeClass("ui-corner-all").addClass(opts.cornerclass);
				// Update the shadow.
				if (opts.shadow != old_opts.shadow) {
					if (opts.shadow)
						pnotify.container.addClass("ui-pnotify-shadow");
					else
						pnotify.container.removeClass("ui-pnotify-shadow");
				}
				// Update the additional classes.
				if (opts.addclass === false)
					pnotify.removeClass(old_opts.addclass);
				else if (opts.addclass !== old_opts.addclass)
					pnotify.removeClass(old_opts.addclass).addClass(opts.addclass);
				// Update the title.
				if (opts.title === false)
					pnotify.title_container.slideUp("fast");
				else if (opts.title !== old_opts.title) {
					if (opts.title_escape)
						pnotify.title_container.text(opts.title).slideDown(200);
					else
						pnotify.title_container.html(opts.title).slideDown(200);
				}
				// Update the text.
				if (opts.text === false) {
					pnotify.text_container.slideUp("fast");
				} else if (opts.text !== old_opts.text) {
					if (opts.text_escape)
						pnotify.text_container.text(opts.text).slideDown(200);
					else
						pnotify.text_container.html(opts.insert_brs ? String(opts.text).replace(/\n/g, "<br />") : opts.text).slideDown(200);
				}
				// Update values for history menu access.
				pnotify.pnotify_history = opts.history;
				pnotify.pnotify_hide = opts.hide;
				// Change the notice type.
				if (opts.type != old_opts.type)
					pnotify.container.removeClass(styles.error+" "+styles.notice+" "+styles.success+" "+styles.info).addClass(opts.type == "error" ? styles.error : (opts.type == "info" ? styles.info : (opts.type == "success" ? styles.success : styles.notice)));
				if (opts.icon !== old_opts.icon || (opts.icon === true && opts.type != old_opts.type)) {
					// Remove any old icon.
					pnotify.container.find("div.ui-pnotify-icon").remove();
					if (opts.icon !== false) {
						// Build the new icon.
						$("<div />", {"class": "ui-pnotify-icon"})
						.append($("<span />", {"class": opts.icon === true ? (opts.type == "error" ? styles.error_icon : (opts.type == "info" ? styles.info_icon : (opts.type == "success" ? styles.success_icon : styles.notice_icon))) : opts.icon}))
						.prependTo(pnotify.container);
					}
				}
				// Update the width.
				if (opts.width !== old_opts.width)
					pnotify.animate({width: opts.width});
				// Update the minimum height.
				if (opts.min_height !== old_opts.min_height)
					pnotify.container.animate({minHeight: opts.min_height});
				// Update the opacity.
				if (opts.opacity !== old_opts.opacity)
					pnotify.fadeTo(opts.animate_speed, opts.opacity);
				// Update the sticker and closer buttons.
				if (!opts.closer || opts.nonblock)
					pnotify.closer.css("display", "none");
				else
					pnotify.closer.css("display", "block");
				if (!opts.sticker || opts.nonblock)
					pnotify.sticker.css("display", "none");
				else
					pnotify.sticker.css("display", "block");
				// Update the sticker icon.
				pnotify.sticker.trigger("pnotify_icon");
				// Update the hover status of the buttons.
				if (opts.sticker_hover)
					pnotify.sticker.css("visibility", "hidden");
				else if (!opts.nonblock)
					pnotify.sticker.css("visibility", "visible");
				if (opts.closer_hover)
					pnotify.closer.css("visibility", "hidden");
				else if (!opts.nonblock)
					pnotify.closer.css("visibility", "visible");
				// Update the timed hiding.
				if (!opts.hide)
					pnotify.pnotify_cancel_remove();
				else if (!old_opts.hide)
					pnotify.pnotify_queue_remove();
				pnotify.pnotify_queue_position();
				return pnotify;
			};

			// Position the notice. dont_skip_hidden causes the notice to
			// position even if it's not visible.
			pnotify.pnotify_position = function(dont_skip_hidden){
				// Get the notice's stack.
				var s = pnotify.opts.stack;
				if (!s) return;
				if (!s.nextpos1)
					s.nextpos1 = s.firstpos1;
				if (!s.nextpos2)
					s.nextpos2 = s.firstpos2;
				if (!s.addpos2)
					s.addpos2 = 0;
				var hidden = pnotify.css("display") == "none";
				// Skip this notice if it's not shown.
				if (!hidden || dont_skip_hidden) {
					var curpos1, curpos2;
					// Store what will need to be animated.
					var animate = {};
					// Calculate the current pos1 value.
					var csspos1;
					switch (s.dir1) {
						case "down":
							csspos1 = "top";
							break;
						case "up":
							csspos1 = "bottom";
							break;
						case "left":
							csspos1 = "right";
							break;
						case "right":
							csspos1 = "left";
							break;
					}
					curpos1 = parseInt(pnotify.css(csspos1));
					if (isNaN(curpos1))
						curpos1 = 0;
					// Remember the first pos1, so the first visible notice goes there.
					if (typeof s.firstpos1 == "undefined" && !hidden) {
						s.firstpos1 = curpos1;
						s.nextpos1 = s.firstpos1;
					}
					// Calculate the current pos2 value.
					var csspos2;
					switch (s.dir2) {
						case "down":
							csspos2 = "top";
							break;
						case "up":
							csspos2 = "bottom";
							break;
						case "left":
							csspos2 = "right";
							break;
						case "right":
							csspos2 = "left";
							break;
					}
					curpos2 = parseInt(pnotify.css(csspos2));
					if (isNaN(curpos2))
						curpos2 = 0;
					// Remember the first pos2, so the first visible notice goes there.
					if (typeof s.firstpos2 == "undefined" && !hidden) {
						s.firstpos2 = curpos2;
						s.nextpos2 = s.firstpos2;
					}
					// Check that it's not beyond the viewport edge.
					if ((s.dir1 == "down" && s.nextpos1 + pnotify.height() > jwindow.height()) ||
						(s.dir1 == "up" && s.nextpos1 + pnotify.height() > jwindow.height()) ||
						(s.dir1 == "left" && s.nextpos1 + pnotify.width() > jwindow.width()) ||
						(s.dir1 == "right" && s.nextpos1 + pnotify.width() > jwindow.width()) ) {
						// If it is, it needs to go back to the first pos1, and over on pos2.
						s.nextpos1 = s.firstpos1;
						s.nextpos2 += s.addpos2 + (typeof s.spacing2 == "undefined" ? 25 : s.spacing2);
						s.addpos2 = 0;
					}
					// Animate if we're moving on dir2.
					if (s.animation && s.nextpos2 < curpos2) {
						switch (s.dir2) {
							case "down":
								animate.top = s.nextpos2+"px";
								break;
							case "up":
								animate.bottom = s.nextpos2+"px";
								break;
							case "left":
								animate.right = s.nextpos2+"px";
								break;
							case "right":
								animate.left = s.nextpos2+"px";
								break;
						}
					} else {
						if(s.nextpos2)
							pnotify.css(csspos2, s.nextpos2+"px");
					}
					// Keep track of the widest/tallest notice in the column/row, so we can push the next column/row.
					switch (s.dir2) {
						case "down":
						case "up":
							if (pnotify.outerHeight(true) > s.addpos2)
								s.addpos2 = pnotify.height();
							break;
						case "left":
						case "right":
							if (pnotify.outerWidth(true) > s.addpos2)
								s.addpos2 = pnotify.width();
							break;
					}
					// Move the notice on dir1.
					if (s.nextpos1) {
						// Animate if we're moving toward the first pos.
						if (s.animation && (curpos1 > s.nextpos1 || animate.top || animate.bottom || animate.right || animate.left)) {
							switch (s.dir1) {
								case "down":
									animate.top = s.nextpos1+"px";
									break;
								case "up":
									animate.bottom = s.nextpos1+"px";
									break;
								case "left":
									animate.right = s.nextpos1+"px";
									break;
								case "right":
									animate.left = s.nextpos1+"px";
									break;
							}
						} else
							pnotify.css(csspos1, s.nextpos1+"px");
					}
					// Run the animation.
					if (animate.top || animate.bottom || animate.right || animate.left)
						pnotify.animate(animate, {duration: this.opts.position_animate_speed, queue: false});
					// Calculate the next dir1 position.
					switch (s.dir1) {
						case "down":
						case "up":
							s.nextpos1 += pnotify.height() + (typeof s.spacing1 == "undefined" ? 25 : s.spacing1);
							break;
						case "left":
						case "right":
							s.nextpos1 += pnotify.width() + (typeof s.spacing1 == "undefined" ? 25 : s.spacing1);
							break;
					}
				}
			};

			// Queue the positiona all function so it doesn't run repeatedly and
			// use up resources.
			pnotify.pnotify_queue_position = function(milliseconds){
				if (timer)
					clearTimeout(timer);
				if (!milliseconds)
					milliseconds = 10;
				timer = setTimeout($.pnotify_position_all, milliseconds);
			};

			// Display the notice.
			pnotify.pnotify_display = function() {
                // Remove oldest notifications leaving only opts.maxonscreen on screen
                notices_data = jwindow.data("pnotify");
                if (notices_data && (notices_data.length > opts.maxonscreen)) {
                    $.each(notices_data.slice(0, notices_data.length - opts.maxonscreen), function(){
                        if (this.pnotify_remove)
                            this.pnotify_remove();
                        });
                };
				// If the notice is not in the DOM, append it.
				if (!pnotify.parent().length)
					pnotify.appendTo(body);
				// Run callback.
				if (opts.before_open) {
					if (opts.before_open(pnotify) === false)
						return;
				}
				// Try to put it in the right position.
				if (opts.stack.push != "top")
					pnotify.pnotify_position(true);
				// First show it, then set its opacity, then hide it.
				if (opts.animation == "fade" || opts.animation.effect_in == "fade") {
					// If it's fading in, it should start at 0.
					pnotify.show().fadeTo(0, 0).hide();
				} else {
					// Or else it should be set to the opacity.
					if (opts.opacity != 1)
						pnotify.show().fadeTo(0, opts.opacity).hide();
				}
				pnotify.animate_in(function(){
					if (opts.after_open)
						opts.after_open(pnotify);

					pnotify.pnotify_queue_position();

					// Now set it to hide.
					if (opts.hide)
						pnotify.pnotify_queue_remove();
				});
			};

			// Remove the notice.
			pnotify.pnotify_remove = function() {
				if (pnotify.timer) {
					window.clearTimeout(pnotify.timer);
					pnotify.timer = null;
				}
				// Run callback.
				if (opts.before_close) {
					if (opts.before_close(pnotify) === false)
						return;
				}
				pnotify.animate_out(function(){
					if (opts.after_close) {
						if (opts.after_close(pnotify) === false)
							return;
					}
					pnotify.pnotify_queue_position();
					// If we're supposed to remove the notice from the DOM, do it.
					if (opts.remove)
						pnotify.detach();
				});
			};

			// Animate the notice in.
			pnotify.animate_in = function(callback){
				// Declare that the notice is animating in. (Or has completed animating in.)
				animating = "in";
				var animation;
				if (typeof opts.animation.effect_in != "undefined")
					animation = opts.animation.effect_in;
				else
					animation = opts.animation;
				if (animation == "none") {
					pnotify.show();
					callback();
				} else if (animation == "show")
					pnotify.show(opts.animate_speed, callback);
				else if (animation == "fade")
					pnotify.show().fadeTo(opts.animate_speed, opts.opacity, callback);
				else if (animation == "slide")
					pnotify.slideDown(opts.animate_speed, callback);
				else if (typeof animation == "function")
					animation("in", callback, pnotify);
				else
					pnotify.show(animation, (typeof opts.animation.options_in == "object" ? opts.animation.options_in : {}), opts.animate_speed, callback);
			};

			// Animate the notice out.
			pnotify.animate_out = function(callback){
				// Declare that the notice is animating out. (Or has completed animating out.)
				animating = "out";
				var animation;
				if (typeof opts.animation.effect_out != "undefined")
					animation = opts.animation.effect_out;
				else
					animation = opts.animation;
				if (animation == "none") {
					pnotify.hide();
					callback();
				} else if (animation == "show")
					pnotify.hide(opts.animate_speed, callback);
				else if (animation == "fade")
					pnotify.fadeOut(opts.animate_speed, callback);
				else if (animation == "slide")
					pnotify.slideUp(opts.animate_speed, callback);
				else if (typeof animation == "function")
					animation("out", callback, pnotify);
				else
					pnotify.hide(animation, (typeof opts.animation.options_out == "object" ? opts.animation.options_out : {}), opts.animate_speed, callback);
			};

			// Cancel any pending removal timer.
			pnotify.pnotify_cancel_remove = function() {
				if (pnotify.timer)
					window.clearTimeout(pnotify.timer);
			};

			// Queue a removal timer.
			pnotify.pnotify_queue_remove = function() {
				// Cancel any current removal timer.
				pnotify.pnotify_cancel_remove();
				pnotify.timer = window.setTimeout(function(){
					pnotify.pnotify_remove();
				}, (isNaN(opts.delay) ? 0 : opts.delay));
			};

			// Provide a button to close the notice.
			pnotify.closer = $("<div />", {
				"class": "ui-pnotify-closer",
				"css": {"cursor": "pointer", "visibility": opts.closer_hover ? "hidden" : "visible"},
				"click": function(){
					pnotify.pnotify_remove();
					pnotify.sticker.css("visibility", "hidden");
					pnotify.closer.css("visibility", "hidden");
				}
			})
			.append($("<span />", {"class": styles.closer, "title": opts.labels.close}))
			.appendTo(pnotify.container);
			if (!opts.closer || opts.nonblock)
				pnotify.closer.css("display", "none");

			// Provide a button to stick the notice.
			pnotify.sticker = $("<div />", {
				"class": "ui-pnotify-sticker",
				"css": {"cursor": "pointer", "visibility": opts.sticker_hover ? "hidden" : "visible"},
				"click": function(){
					opts.hide = !opts.hide;
					if (opts.hide)
						pnotify.pnotify_queue_remove();
					else
						pnotify.pnotify_cancel_remove();
					$(this).trigger("pnotify_icon");
				}
			})
			.bind("pnotify_icon", function(){
				$(this).children().removeClass(styles.pin_up+" "+styles.pin_down).addClass(opts.hide ? styles.pin_up : styles.pin_down);
			})
			.append($("<span />", {"class": styles.pin_up, "title": opts.labels.stick}))
			.appendTo(pnotify.container);
			if (!opts.sticker || opts.nonblock)
				pnotify.sticker.css("display", "none");

			// Add the appropriate icon.
			if (opts.icon !== false) {
				$("<div />", {"class": "ui-pnotify-icon"})
				.append($("<span />", {"class": opts.icon === true ? (opts.type == "error" ? styles.error_icon : (opts.type == "info" ? styles.info_icon : (opts.type == "success" ? styles.success_icon : styles.notice_icon))) : opts.icon}))
				.prependTo(pnotify.container);
			}

			// Add a title.
			pnotify.title_container = $("<span />", {
				"class": "ui-pnotify-title"
			})
			.appendTo(pnotify.container);
			if (opts.title === false)
				pnotify.title_container.hide();
			else if (opts.title_escape)
				pnotify.title_container.text(opts.title);
			else
				pnotify.title_container.html(opts.title);

			// Add text.
			pnotify.text_container = $("<div />", {
				"class": "ui-pnotify-text"
			})
			.appendTo(pnotify.container);
			if (opts.text === false)
				pnotify.text_container.hide();
			else if (opts.text_escape)
				pnotify.text_container.text(opts.text);
			else
				pnotify.text_container.html(opts.insert_brs ? String(opts.text).replace(/\n/g, "<br />") : opts.text);

			// Set width and min height.
			if (typeof opts.width == "string")
				pnotify.css("width", opts.width);
			if (typeof opts.min_height == "string")
				pnotify.container.css("min-height", opts.min_height);

			// The history variable controls whether the notice gets redisplayed
			// by the history pull down.
			pnotify.pnotify_history = opts.history;
			// The hide variable controls whether the history pull down should
			// queue a removal timer.
			pnotify.pnotify_hide = opts.hide;

			// Add the notice to the notice array.
			var notices_data = jwindow.data("pnotify");
			if (notices_data == null || typeof notices_data != "object")
				notices_data = [];
			if (opts.stack.push == "top")
				notices_data = $.merge([pnotify], notices_data);
			else
				notices_data = $.merge(notices_data, [pnotify]);
			jwindow.data("pnotify", notices_data);
			// Now position all the notices if they are to push to the top.
			if (opts.stack.push == "top")
				pnotify.pnotify_queue_position(1);

			// Run callback.
			if (opts.after_init)
				opts.after_init(pnotify);

			if (opts.history) {
				// If there isn't a history pull down, create one.
				var history_menu = jwindow.data("pnotify_history");
				if (typeof history_menu == "undefined") {
					history_menu = $("<div />", {
						"class": "ui-pnotify-history-container "+styles.hi_menu,
						"mouseleave": function(){
							history_menu.animate({top: "-"+history_handle_top+"px"}, {duration: 100, queue: false});
						}
					})
					.append($("<div />", {"class": "ui-pnotify-history-header", "text": opts.labels.redisplay}))
					.append($("<button />", {
							"class": "ui-pnotify-history-all "+styles.hi_btn,
							"text": opts.labels.all,
							"mouseenter": function(){
								$(this).addClass(styles.hi_btnhov);
							},
							"mouseleave": function(){
								$(this).removeClass(styles.hi_btnhov);
							},
							"click": function(){
								// Display all notices. (Disregarding non-history notices.)
								$.each(notices_data, function(){
									if (this.pnotify_history) {
										if (this.is(":visible")) {
											if (this.pnotify_hide)
												this.pnotify_queue_remove();
										} else if (this.pnotify_display)
											this.pnotify_display();
									}
								});
								return false;
							}
					}))
					.append($("<button />", {
							"class": "ui-pnotify-history-last "+styles.hi_btn,
							"text": opts.labels.last,
							"mouseenter": function(){
								$(this).addClass(styles.hi_btnhov);
							},
							"mouseleave": function(){
								$(this).removeClass(styles.hi_btnhov);
							},
							"click": function(){
								// Look up the last history notice, and display it.
								var i = -1;
								var notice;
								do {
									if (i == -1)
										notice = notices_data.slice(i);
									else
										notice = notices_data.slice(i, i+1);
									if (!notice[0])
										break;
									i--;
								} while (!notice[0].pnotify_history || notice[0].is(":visible"));
								if (!notice[0])
									return false;
								if (notice[0].pnotify_display)
									notice[0].pnotify_display();
								return false;
							}
					}))
					.appendTo(body);

					// Make a handle so the user can pull down the history tab.
					var handle = $("<span />", {
						"class": "ui-pnotify-history-pulldown "+styles.hi_hnd,
						"mouseenter": function(){
							history_menu.animate({top: "0"}, {duration: 100, queue: false});
						}
					})
					.appendTo(history_menu);

					// Get the top of the handle.
					history_handle_top = handle.offset().top + 2;
					// Hide the history pull down up to the top of the handle.
					history_menu.css({top: "-"+history_handle_top+"px"});
					// Save the history pull down.
					jwindow.data("pnotify_history", history_menu);
				}
			}

			// Mark the stack so it won't animate the new notice.
			opts.stack.animation = false;

			// Display the notice.
			if (opts.auto_display)
				pnotify.pnotify_display();

			return pnotify;
		}
	});

	// Some useful regexes.
	var re_on = /^on/,
		re_mouse_events = /^(dbl)?click$|^mouse(move|down|up|over|out|enter|leave)$|^contextmenu$/,
		re_ui_events = /^(focus|blur|select|change|reset)$|^key(press|down|up)$/,
		re_html_events = /^(scroll|resize|(un)?load|abort|error)$/;
	// Fire a DOM event.
	var dom_event = function(e, orig_e){
		var event_object;
		e = e.toLowerCase();
		if (document.createEvent && this.dispatchEvent) {
			// FireFox, Opera, Safari, Chrome
			e = e.replace(re_on, '');
			if (e.match(re_mouse_events)) {
				// This allows the click event to fire on the notice. There is
				// probably a much better way to do it.
				$(this).offset();
				event_object = document.createEvent("MouseEvents");
				event_object.initMouseEvent(
					e, orig_e.bubbles, orig_e.cancelable, orig_e.view, orig_e.detail,
					orig_e.screenX, orig_e.screenY, orig_e.clientX, orig_e.clientY,
					orig_e.ctrlKey, orig_e.altKey, orig_e.shiftKey, orig_e.metaKey, orig_e.button, orig_e.relatedTarget
				);
			} else if (e.match(re_ui_events)) {
				event_object = document.createEvent("UIEvents");
				event_object.initUIEvent(e, orig_e.bubbles, orig_e.cancelable, orig_e.view, orig_e.detail);
			} else if (e.match(re_html_events)) {
				event_object = document.createEvent("HTMLEvents");
				event_object.initEvent(e, orig_e.bubbles, orig_e.cancelable);
			}
			if (!event_object) return;
			this.dispatchEvent(event_object);
		} else {
			// Internet Explorer
			if (!e.match(re_on)) e = "on"+e;
			event_object = document.createEventObject(orig_e);
			this.fireEvent(e, event_object);
		}
	};

	$.pnotify.defaults = {
		// The notice's title.
		title: false,
		// Whether to escape the content of the title. (Not allow HTML.)
		title_escape: false,
		// The notice's text.
		text: false,
		// Whether to escape the content of the text. (Not allow HTML.)
		text_escape: false,
		// What styling classes to use. (Can be either jqueryui or bootstrap.)
		styling: "bootstrap",
		// Additional classes to be added to the notice. (For custom styling.)
		addclass: "",
		// Class to be added to the notice for corner styling.
		cornerclass: "",
		// Create a non-blocking notice. It lets the user click elements underneath it.
		nonblock: false,
		// The opacity of the notice (if it's non-blocking) when the mouse is over it.
		nonblock_opacity: .2,
		// Display a pull down menu to redisplay previous notices, and place the notice in the history.
		history: true,
        // Maximum number of notifications to have onscreen
        maxonscreen: Infinity,
		// Display the notice when it is created. Turn this off to add notifications to the history without displaying them.
		auto_display: true,
		// Width of the notice.
		width: "300px",
		// Minimum height of the notice. It will expand to fit content.
		min_height: "16px",
		// Type of the notice. "notice", "info", "success", or "error".
		type: "notice",
		// Set icon to true to use the default icon for the selected style/type, false for no icon, or a string for your own icon class.
		icon: true,
		// The animation to use when displaying and hiding the notice. "none", "show", "fade", and "slide" are built in to jQuery. Others require jQuery UI. Use an object with effect_in and effect_out to use different effects.
		animation: "fade",
		// Speed at which the notice animates in and out. "slow", "def" or "normal", "fast" or number of milliseconds.
		animate_speed: "slow",
		// Specify a specific duration of position animation
		position_animate_speed: 500,
		// Opacity of the notice.
		opacity: 1,
		// Display a drop shadow.
		shadow: true,
		// Provide a button for the user to manually close the notice.
		closer: true,
		// Only show the closer button on hover.
		closer_hover: true,
		// Provide a button for the user to manually stick the notice.
		sticker: true,
		// Only show the sticker button on hover.
		sticker_hover: true,
		// After a delay, remove the notice.
		hide: true,
		// Delay in milliseconds before the notice is removed.
		delay: 8000,
		// Reset the hide timer if the mouse moves over the notice.
		mouse_reset: true,
		// Remove the notice's elements from the DOM after it is removed.
		remove: true,
		// Change new lines to br tags.
		insert_brs: true,
		// The stack on which the notices will be placed. Also controls the direction the notices stack.
		stack: {"dir1": "down", "dir2": "left", "push": "bottom", "spacing1": 25, "spacing2": 25},
                //Lets you change the displayed text, facilitating the internationalization.
                labels: {
                    redisplay: "Redisplay",
                    all: "All",
                    last: "Last",
                    close: "Close",
                    stick: "Stick"
                }
	};
})(jQuery);;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/jquery-pnotify.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/classlist.js
/*
 * classList.js: Cross-browser full element.classList implementation.
 * 2012-11-15
 *
 * By Eli Grey, http://eligrey.com
 * Public Domain.
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/
// <ie>
if ("document" in self && !(
                "classList" in document.createElement("_") &&
                "classList" in document.createElementNS("http://www.w3.org/2000/svg", "svg")
        )) {

(function (view) {

"use strict";

if (!('Element' in view)) return;

var
          classListProp = "classList"
        , protoProp = "prototype"
        , elemCtrProto = view.Element[protoProp]
        , objCtr = Object
        , strTrim = String[protoProp].trim || function () {
                return this.replace(/^\s+|\s+$/g, "");
        }
        , arrIndexOf = Array[protoProp].indexOf || function (item) {
                var
                          i = 0
                        , len = this.length
                ;
                for (; i < len; i++) {
                        if (i in this && this[i] === item) {
                                return i;
                        }
                }
                return -1;
        }
        // Vendors: please allow content code to instantiate DOMExceptions
        , DOMEx = function (type, message) {
                this.name = type;
                this.code = DOMException[type];
                this.message = message;
        }
        , checkTokenAndGetIndex = function (classList, token) {
                if (token === "") {
                        throw new DOMEx(
                                  "SYNTAX_ERR"
                                , "An invalid or illegal string was specified"
                        );
                }
                if (/\s/.test(token)) {
                        throw new DOMEx(
                                  "INVALID_CHARACTER_ERR"
                                , "String contains an invalid character"
                        );
                }
                return arrIndexOf.call(classList, token);
        }
        , ClassList = function (elem) {
                var
                          trimmedClasses = strTrim.call(elem.getAttribute("class"))
                        , classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
                        , i = 0
                        , len = classes.length
                ;
                for (; i < len; i++) {
                        this.push(classes[i]);
                }
                this._updateClassName = function () {
                        elem.setAttribute("class", this.toString());
                };
        }
        , classListProto = ClassList[protoProp] = []
        , classListGetter = function () {
                return new ClassList(this);
        }
;
// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp] = Error[protoProp];
classListProto.item = function (i) {
        return this[i] || null;
};
classListProto.contains = function (token) {
        token += "";
        return checkTokenAndGetIndex(this, token) !== -1;
};
classListProto.add = function () {
        var
                  tokens = arguments
                , i = 0
                , l = tokens.length
                , token
                , updated = false
        ;
        do {
                token = tokens[i] + "";
                if (checkTokenAndGetIndex(this, token) === -1) {
                        this.push(token);
                        updated = true;
                }
        }
        while (++i < l);

        if (updated) {
                this._updateClassName();
        }
};
classListProto.remove = function () {
        var
                  tokens = arguments
                , i = 0
                , l = tokens.length
                , token
                , updated = false
        ;
        do {
                token = tokens[i] + "";
                var index = checkTokenAndGetIndex(this, token);
                if (index !== -1) {
                        this.splice(index, 1);
                        updated = true;
                }
        }
        while (++i < l);

        if (updated) {
                this._updateClassName();
        }
};
classListProto.toggle = function (token, forse) {
        token += "";

        var
                  result = this.contains(token)
                , method = result ?
                        forse !== true && "remove"
                :
                        forse !== false && "add"
        ;

        if (method) {
                this[method](token);
        }

        return !result;
};
classListProto.toString = function () {
        return this.join(" ");
};

if (objCtr.defineProperty) {
        var classListPropDesc = {
                  get: classListGetter
                , enumerable: true
                , configurable: true
        };
        try {
                objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
        } catch (ex) { // IE 8 doesn't support enumerable:true
                if (ex.number === -0x7FF5EC54) {
                        classListPropDesc.enumerable = false;
                        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
                }
        }
} else if (objCtr[protoProp].__defineGetter__) {
        elemCtrProto.__defineGetter__(classListProp, classListGetter);
}

}(self));

}
// </ie>
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/classlist.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/pixastic.custom.js
/*
 * Pixastic Lib - Core Functions - v0.1.3
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

var Pixastic = (function() {


	function addEvent(el, event, handler) {
		if (el.addEventListener)
			el.addEventListener(event, handler, false);
		else if (el.attachEvent)
			el.attachEvent("on" + event, handler);
	}

	function onready(handler) {
		var handlerDone = false;
		var execHandler = function() {
			if (!handlerDone) {
				handlerDone = true;
				handler();
			}
		}
		document.write("<"+"script defer src=\"//:\" id=\"__onload_ie_pixastic__\"></"+"script>");
		var script = document.getElementById("__onload_ie_pixastic__");
		script.onreadystatechange = function() {
			if (script.readyState == "complete") {
				script.parentNode.removeChild(script);
				execHandler();
			}
		}
		if (document.addEventListener)
			document.addEventListener("DOMContentLoaded", execHandler, false);
		addEvent(window, "load", execHandler);
	}

	function init() {
		var imgEls = getElementsByClass("pixastic", null, "img");
		var canvasEls = getElementsByClass("pixastic", null, "canvas");
		var elements = imgEls.concat(canvasEls);
		for (var i=0;i<elements.length;i++) {
			(function() {

			var el = elements[i];
			var actions = [];
			var classes = el.className.split(" ");
			for (var c=0;c<classes.length;c++) {
				var cls = classes[c];
				if (cls.substring(0,9) == "pixastic-") {
					var actionName = cls.substring(9);
					if (actionName != "")
						actions.push(actionName);
				}
			}
			if (actions.length) {
				if (el.tagName.toLowerCase() == "img") {
					var dataImg = new Image();
					dataImg.src = el.src;
					if (dataImg.complete) {
						for (var a=0;a<actions.length;a++) {
							var res = Pixastic.applyAction(el, el, actions[a], null);
							if (res)
								el = res;
						}
					} else {
						dataImg.onload = function() {
							for (var a=0;a<actions.length;a++) {
								var res = Pixastic.applyAction(el, el, actions[a], null)
								if (res)
									el = res;
							}
						}
					}
				} else {
					setTimeout(function() {
						for (var a=0;a<actions.length;a++) {
							var res = Pixastic.applyAction(
								el, el, actions[a], null
							);
							if (res)
								el = res;
						}
					},1);
				}
			}

			})();
		}
	}

	if (typeof pixastic_parseonload != "undefined" && pixastic_parseonload)
		onready(init);

	// getElementsByClass by Dustin Diaz, http://www.dustindiaz.com/getelementsbyclass/
	function getElementsByClass(searchClass,node,tag) {
	        var classElements = new Array();
	        if ( node == null )
	                node = document;
	        if ( tag == null )
	                tag = '*';

	        var els = node.getElementsByTagName(tag);
	        var elsLen = els.length;
	        var pattern = new RegExp("(^|\\s)"+searchClass+"(\\s|$)");
	        for (i = 0, j = 0; i < elsLen; i++) {
	                if ( pattern.test(els[i].className) ) {
	                        classElements[j] = els[i];
	                        j++;
	                }
	        }
	        return classElements;
	}

	var debugElement;

	function writeDebug(text, level) {
		if (!Pixastic.debug) return;
		try {
			switch (level) {
				case "warn" :
					console.warn("Pixastic:", text);
					break;
				case "error" :
					console.error("Pixastic:", text);
					break;
				default:
					console.log("Pixastic:", text);
			}
		} catch(e) {
		}
		if (!debugElement) {

		}
	}

	// canvas capability checks

	var hasCanvas = (function() {
		var c = document.createElement("canvas");
		var val = false;
		try {
			val = !!((typeof c.getContext == "function") && c.getContext("2d"));
		} catch(e) {}
		return function() {
			return val;
		}
	})();

	var hasCanvasImageData = (function() {
		var c = document.createElement("canvas");
		var val = false;
		var ctx;
		try {
			if (typeof c.getContext == "function" && (ctx = c.getContext("2d"))) {
				val = (typeof ctx.getImageData == "function");
			}
		} catch(e) {}
		return function() {
			return val;
		}
	})();

	var hasGlobalAlpha = (function() {
		var hasAlpha = false;
		var red = document.createElement("canvas");
		if (hasCanvas() && hasCanvasImageData()) {
			red.width = red.height = 1;
			var redctx = red.getContext("2d");
			redctx.fillStyle = "rgb(255,0,0)";
			redctx.fillRect(0,0,1,1);

			var blue = document.createElement("canvas");
			blue.width = blue.height = 1;
			var bluectx = blue.getContext("2d");
			bluectx.fillStyle = "rgb(0,0,255)";
			bluectx.fillRect(0,0,1,1);

			redctx.globalAlpha = 0.5;
			redctx.drawImage(blue, 0, 0);
			var reddata = redctx.getImageData(0,0,1,1).data;

			hasAlpha = (reddata[2] != 255);
		}
		return function() {
			return hasAlpha;
		}
	})();


	// return public interface

	return {

		parseOnLoad : false,

		debug : false,

		applyAction : function(img, dataImg, actionName, options) {

			options = options || {};

			var imageIsCanvas = (img.tagName.toLowerCase() == "canvas");
			if (imageIsCanvas && Pixastic.Client.isIE()) {
				if (Pixastic.debug) writeDebug("Tried to process a canvas element but browser is IE.");
				return false;
			}

			var canvas, ctx;
			var hasOutputCanvas = false;
			if (Pixastic.Client.hasCanvas()) {
				hasOutputCanvas = !!options.resultCanvas;
				canvas = options.resultCanvas || document.createElement("canvas");
				ctx = canvas.getContext("2d");
			}

			var w = img.offsetWidth;
			var h = img.offsetHeight;

			if (imageIsCanvas) {
				w = img.width;
				h = img.height;
			}

			// offsetWidth/Height might be 0 if the image is not in the document
			if (w == 0 || h == 0) {
				if (img.parentNode == null) {
					// add the image to the doc (way out left), read its dimensions and remove it again
					var oldpos = img.style.position;
					var oldleft = img.style.left;
					img.style.position = "absolute";
					img.style.left = "-9999px";
					document.body.appendChild(img);
					w = img.offsetWidth;
					h = img.offsetHeight;
					document.body.removeChild(img);
					img.style.position = oldpos;
					img.style.left = oldleft;
				} else {
					if (Pixastic.debug) writeDebug("Image has 0 width and/or height.");
					return;
				}
			}

			if (actionName.indexOf("(") > -1) {
				var tmp = actionName;
				actionName = tmp.substr(0, tmp.indexOf("("));
				var arg = tmp.match(/\((.*?)\)/);
				if (arg[1]) {
					arg = arg[1].split(";");
					for (var a=0;a<arg.length;a++) {
						thisArg = arg[a].split("=");
						if (thisArg.length == 2) {
							if (thisArg[0] == "rect") {
								var rectVal = thisArg[1].split(",");
								options[thisArg[0]] = {
									left : parseInt(rectVal[0],10)||0,
									top : parseInt(rectVal[1],10)||0,
									width : parseInt(rectVal[2],10)||0,
									height : parseInt(rectVal[3],10)||0
								}
							} else {
								options[thisArg[0]] = thisArg[1];
							}
						}
					}
				}
			}

			if (!options.rect) {
				options.rect = {
					left : 0, top : 0, width : w, height : h
				};
			} else {
				options.rect.left = Math.round(options.rect.left);
				options.rect.top = Math.round(options.rect.top);
				options.rect.width = Math.round(options.rect.width);
				options.rect.height = Math.round(options.rect.height);
			}

			var validAction = false;
			if (Pixastic.Actions[actionName] && typeof Pixastic.Actions[actionName].process == "function") {
				validAction = true;
			}
			if (!validAction) {
				if (Pixastic.debug) writeDebug("Invalid action \"" + actionName + "\". Maybe file not included?");
				return false;
			}
			if (!Pixastic.Actions[actionName].checkSupport()) {
				if (Pixastic.debug) writeDebug("Action \"" + actionName + "\" not supported by this browser.");
				return false;
			}

			if (Pixastic.Client.hasCanvas()) {
				if (canvas !== img) {
					canvas.width = w;
					canvas.height = h;
				}
				if (!hasOutputCanvas) {
					canvas.style.width = w+"px";
					canvas.style.height = h+"px";
				}
				ctx.drawImage(dataImg,0,0,w,h);

				if (!img.__pixastic_org_image) {
					canvas.__pixastic_org_image = img;
					canvas.__pixastic_org_width = w;
					canvas.__pixastic_org_height = h;
				} else {
					canvas.__pixastic_org_image = img.__pixastic_org_image;
					canvas.__pixastic_org_width = img.__pixastic_org_width;
					canvas.__pixastic_org_height = img.__pixastic_org_height;
				}

			} else if (Pixastic.Client.isIE() && typeof img.__pixastic_org_style == "undefined") {
				img.__pixastic_org_style = img.style.cssText;
			}

			var params = {
				image : img,
				canvas : canvas,
				width : w,
				height : h,
				useData : true,
				options : options
			}

			// Ok, let's do it!

			var res = Pixastic.Actions[actionName].process(params);

			if (!res) {
				return false;
			}

			if (Pixastic.Client.hasCanvas()) {
				if (params.useData) {
					if (Pixastic.Client.hasCanvasImageData()) {
						canvas.getContext("2d").putImageData(params.canvasData, options.rect.left, options.rect.top);

						// Opera doesn't seem to update the canvas until we draw something on it, lets draw a 0x0 rectangle.
						// Is this still so?
						canvas.getContext("2d").fillRect(0,0,0,0);
					}
				}

				if (!options.leaveDOM) {
					// copy properties and stuff from the source image
					canvas.title = img.title;
					canvas.imgsrc = img.imgsrc;
					if (!imageIsCanvas) canvas.alt  = img.alt;
					if (!imageIsCanvas) canvas.imgsrc = img.src;
					canvas.className = img.className;
					canvas.style.cssText = img.style.cssText;
					canvas.name = img.name;
					canvas.tabIndex = img.tabIndex;
					canvas.id = img.id;
					if (img.parentNode && img.parentNode.replaceChild) {
						img.parentNode.replaceChild(canvas, img);
					}
				}

				options.resultCanvas = canvas;

				return canvas;
			}

			return img;
		},

		prepareData : function(params, getCopy) {
			var ctx = params.canvas.getContext("2d");
			var rect = params.options.rect;
			var dataDesc = ctx.getImageData(rect.left, rect.top, rect.width, rect.height);
			var data = dataDesc.data;
			if (!getCopy) params.canvasData = dataDesc;
			return data;
		},

		// load the image file
		process : function(img, actionName, options, callback) {
			if (img.tagName.toLowerCase() == "img") {
				var dataImg = new Image();
				dataImg.src = img.src;
				if (dataImg.complete) {
					var res = Pixastic.applyAction(img, dataImg, actionName, options);
					if (callback) callback(res);
					return res;
				} else {
					dataImg.onload = function() {
						var res = Pixastic.applyAction(img, dataImg, actionName, options)
						if (callback) callback(res);
					}
				}
			}
			if (img.tagName.toLowerCase() == "canvas") {
				var res = Pixastic.applyAction(img, img, actionName, options);
				if (callback) callback(res);
				return res;
			}
		},

		revert : function(img) {
			if (Pixastic.Client.hasCanvas()) {
				if (img.tagName.toLowerCase() == "canvas" && img.__pixastic_org_image) {
					img.width = img.__pixastic_org_width;
					img.height = img.__pixastic_org_height;
					img.getContext("2d").drawImage(img.__pixastic_org_image, 0, 0);

					if (img.parentNode && img.parentNode.replaceChild) {
						img.parentNode.replaceChild(img.__pixastic_org_image, img);
					}

					return img;
				}
			} else if (Pixastic.Client.isIE()) {
 				if (typeof img.__pixastic_org_style != "undefined")
					img.style.cssText = img.__pixastic_org_style;
			}
		},

		Client : {
			hasCanvas : hasCanvas,
			hasCanvasImageData : hasCanvasImageData,
			hasGlobalAlpha : hasGlobalAlpha,
			isIE : function() {
				return !!document.all && !!window.attachEvent && !window.opera;
			}
		},

		Actions : {}
	}


})();
/*
 * Pixastic Lib - Blur filter - v0.1.0
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.blur = {
	process : function(params) {

		if (typeof params.options.fixMargin == "undefined")
			params.options.fixMargin = true;

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);
			var dataCopy = Pixastic.prepareData(params, true)

			/*
			var kernel = [
				[0.5, 	1, 	0.5],
				[1, 	2, 	1],
				[0.5, 	1, 	0.5]
			];
			*/

			var kernel = [
				[0, 	1, 	0],
				[1, 	2, 	1],
				[0, 	1, 	0]
			];

			var weight = 0;
			for (var i=0;i<3;i++) {
				for (var j=0;j<3;j++) {
					weight += kernel[i][j];
				}
			}

			weight = 1 / (weight*2);

			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;

			var w4 = w*4;
			var y = h;
			do {
				var offsetY = (y-1)*w4;

				var prevY = (y == 1) ? 0 : y-2;
				var nextY = (y == h) ? y - 1 : y;

				var offsetYPrev = prevY*w*4;
				var offsetYNext = nextY*w*4;

				var x = w;
				do {
					var offset = offsetY + (x*4-4);

					var offsetPrev = offsetYPrev + ((x == 1) ? 0 : x-2) * 4;
					var offsetNext = offsetYNext + ((x == w) ? x-1 : x) * 4;

					data[offset] = (
						/*
						dataCopy[offsetPrev - 4]
						+ dataCopy[offsetPrev+4]
						+ dataCopy[offsetNext - 4]
						+ dataCopy[offsetNext+4]
						+
						*/
						(dataCopy[offsetPrev]
						+ dataCopy[offset-4]
						+ dataCopy[offset+4]
						+ dataCopy[offsetNext])		* 2
						+ dataCopy[offset] 		* 4
						) * weight;

					data[offset+1] = (
						/*
						dataCopy[offsetPrev - 3]
						+ dataCopy[offsetPrev+5]
						+ dataCopy[offsetNext - 3]
						+ dataCopy[offsetNext+5]
						+
						*/
						(dataCopy[offsetPrev+1]
						+ dataCopy[offset-3]
						+ dataCopy[offset+5]
						+ dataCopy[offsetNext+1])	* 2
						+ dataCopy[offset+1] 		* 4
						) * weight;

					data[offset+2] = (
						/*
						dataCopy[offsetPrev - 2]
						+ dataCopy[offsetPrev+6]
						+ dataCopy[offsetNext - 2]
						+ dataCopy[offsetNext+6]
						+
						*/
						(dataCopy[offsetPrev+2]
						+ dataCopy[offset-2]
						+ dataCopy[offset+6]
						+ dataCopy[offsetNext+2])	* 2
						+ dataCopy[offset+2] 		* 4
						) * weight;

				} while (--x);
			} while (--y);

			return true;

		} else if (Pixastic.Client.isIE()) {
			params.image.style.filter += " progid:DXImageTransform.Microsoft.Blur(pixelradius=1.5)";

			if (params.options.fixMargin) {
				params.image.style.marginLeft = (parseInt(params.image.style.marginLeft,10)||0) - 2 + "px";
				params.image.style.marginTop = (parseInt(params.image.style.marginTop,10)||0) - 2 + "px";
			}

			return true;
		}
	},
	checkSupport : function() {
		return (Pixastic.Client.hasCanvasImageData() || Pixastic.Client.isIE());
	}
}/*
 * Pixastic Lib - Brightness/Contrast filter - v0.1.1
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.brightness = {

	process : function(params) {

		var brightness = parseInt(params.options.brightness,10) || 0;
		var contrast = parseFloat(params.options.contrast)||0;
		var legacy = !!(params.options.legacy && params.options.legacy != "false");

		if (legacy) {
			brightness = Math.min(150,Math.max(-150,brightness));
		} else {
			var brightMul = 1 + Math.min(150,Math.max(-150,brightness)) / 150;
		}
		contrast = Math.max(0,contrast+1);

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);
			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;

			var p = w*h;
			var pix = p*4, pix1, pix2;

			var mul, add;
			if (contrast != 1) {
				if (legacy) {
					mul = contrast;
					add = (brightness - 128) * contrast + 128;
				} else {
					mul = brightMul * contrast;
					add = - contrast * 128 + 128;
				}
			} else {  // this if-then is not necessary anymore, is it?
				if (legacy) {
					mul = 1;
					add = brightness;
				} else {
					mul = brightMul;
					add = 0;
				}
			}
			var r, g, b;
			while (p--) {
				if ((r = data[pix-=4] * mul + add) > 255 )
					data[pix] = 255;
				else if (r < 0)
					data[pix] = 0;
				else
 					data[pix] = r;

				if ((g = data[pix1=pix+1] * mul + add) > 255 )
					data[pix1] = 255;
				else if (g < 0)
					data[pix1] = 0;
				else
					data[pix1] = g;

				if ((b = data[pix2=pix+2] * mul + add) > 255 )
					data[pix2] = 255;
				else if (b < 0)
					data[pix2] = 0;
				else
					data[pix2] = b;
			}
			return true;
		}
	},
	checkSupport : function() {
		return Pixastic.Client.hasCanvasImageData();
	}
}

/*
 * Pixastic Lib - Color adjust filter - v0.1.1
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.coloradjust = {

	process : function(params) {
		var red = parseFloat(params.options.red) || 0;
		var green = parseFloat(params.options.green) || 0;
		var blue = parseFloat(params.options.blue) || 0;

		red = Math.round(red*255);
		green = Math.round(green*255);
		blue = Math.round(blue*255);

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);
			var rect = params.options.rect;

			var p = rect.width*rect.height;
			var pix = p*4, pix1, pix2;

			var r, g, b;
			while (p--) {
				pix -= 4;

				if (red) {
					if ((r = data[pix] + red) < 0 )
						data[pix] = 0;
					else if (r > 255 )
						data[pix] = 255;
					else
						data[pix] = r;
				}

				if (green) {
					if ((g = data[pix1=pix+1] + green) < 0 )
						data[pix1] = 0;
					else if (g > 255 )
						data[pix1] = 255;
					else
						data[pix1] = g;
				}

				if (blue) {
					if ((b = data[pix2=pix+2] + blue) < 0 )
						data[pix2] = 0;
					else if (b > 255 )
						data[pix2] = 255;
					else
						data[pix2] = b;
				}
			}
			return true;
		}
	},
	checkSupport : function() {
		return (Pixastic.Client.hasCanvasImageData());
	}
}
/*
 * Pixastic Lib - Desaturation filter - v0.1.1
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.desaturate = {

	process : function(params) {
		var useAverage = !!(params.options.average && params.options.average != "false");

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);
			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;

			var p = w*h;
			var pix = p*4, pix1, pix2;

			if (useAverage) {
				while (p--)
					data[pix-=4] = data[pix1=pix+1] = data[pix2=pix+2] = (data[pix]+data[pix1]+data[pix2])/3
			} else {
				while (p--)
					data[pix-=4] = data[pix1=pix+1] = data[pix2=pix+2] = (data[pix]*0.3 + data[pix1]*0.59 + data[pix2]*0.11);
			}
			return true;
		} else if (Pixastic.Client.isIE()) {
			params.image.style.filter += " gray";
			return true;
		}
	},
	checkSupport : function() {
		return (Pixastic.Client.hasCanvasImageData() || Pixastic.Client.isIE());
	}
}/*
 * Pixastic Lib - Glow - v0.1.0
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */


Pixastic.Actions.glow = {
	process : function(params) {

		var amount = (parseFloat(params.options.amount)||0);
		var blurAmount = parseFloat(params.options.radius)||0;

		amount = Math.min(1,Math.max(0,amount));
		blurAmount = Math.min(5,Math.max(0,blurAmount));

		if (Pixastic.Client.hasCanvasImageData()) {
			var rect = params.options.rect;

			var blurCanvas = document.createElement("canvas");
			blurCanvas.width = params.width;
			blurCanvas.height = params.height;
			var blurCtx = blurCanvas.getContext("2d");
			blurCtx.drawImage(params.canvas,0,0);

			var scale = 2;
			var smallWidth = Math.round(params.width / scale);
			var smallHeight = Math.round(params.height / scale);

			var copy = document.createElement("canvas");
			copy.width = smallWidth;
			copy.height = smallHeight;

			var clear = true;
			var steps = Math.round(blurAmount * 20);

			var copyCtx = copy.getContext("2d");
			for (var i=0;i<steps;i++) {
				var scaledWidth = Math.max(1,Math.round(smallWidth - i));
				var scaledHeight = Math.max(1,Math.round(smallHeight - i));

				copyCtx.clearRect(0,0,smallWidth,smallHeight);

				copyCtx.drawImage(
					blurCanvas,
					0,0,params.width,params.height,
					0,0,scaledWidth,scaledHeight
				);

				blurCtx.clearRect(0,0,params.width,params.height);

				blurCtx.drawImage(
					copy,
					0,0,scaledWidth,scaledHeight,
					0,0,params.width,params.height
				);
			}

			var data = Pixastic.prepareData(params);
			var blurData = Pixastic.prepareData({canvas:blurCanvas,options:params.options});

			var p = rect.width * rect.height;

			var pix = p*4, pix1 = pix + 1, pix2 = pix + 2, pix3 = pix + 3;
			while (p--) {
				if ((data[pix-=4] += amount * blurData[pix]) > 255) data[pix] = 255;
				if ((data[pix1-=4] += amount * blurData[pix1]) > 255) data[pix1] = 255;
				if ((data[pix2-=4] += amount * blurData[pix2]) > 255) data[pix2] = 255;
			}

			return true;
		}
	},
	checkSupport : function() {
		return Pixastic.Client.hasCanvasImageData();
	}
}



/*
 * Pixastic Lib - HSL Adjust  - v0.1.1
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.hsl = {
	process : function(params) {

		var hue = parseInt(params.options.hue,10)||0;
		var saturation = (parseInt(params.options.saturation,10)||0) / 100;
		var lightness = (parseInt(params.options.lightness,10)||0) / 100;


		// this seems to give the same result as Photoshop
		if (saturation < 0) {
			var satMul = 1+saturation;
		} else {
			var satMul = 1+saturation*2;
		}

		hue = (hue%360) / 360;
		var hue6 = hue * 6;

		var rgbDiv = 1 / 255;

		var light255 = lightness * 255;
		var lightp1 = 1 + lightness;
		var lightm1 = 1 - lightness;
		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);

			var rect = params.options.rect;

			var p = rect.width * rect.height;

			var pix = p*4, pix1 = pix + 1, pix2 = pix + 2, pix3 = pix + 3;

			while (p--) {

				var r = data[pix-=4];
				var g = data[pix1=pix+1];
				var b = data[pix2=pix+2];

				if (hue != 0 || saturation != 0) {
					// ok, here comes rgb to hsl + adjust + hsl to rgb, all in one jumbled mess.
					// It's not so pretty, but it's been optimized to get somewhat decent performance.
					// The transforms were originally adapted from the ones found in Graphics Gems, but have been heavily modified.
					var vs = r;
					if (g > vs) vs = g;
					if (b > vs) vs = b;
					var ms = r;
					if (g < ms) ms = g;
					if (b < ms) ms = b;
					var vm = (vs-ms);
					var l = (ms+vs)/510;
					if (l > 0) {
						if (vm > 0) {
							if (l <= 0.5) {
								var s = vm / (vs+ms) * satMul;
								if (s > 1) s = 1;
								var v = (l * (1+s));
							} else {
								var s = vm / (510-vs-ms) * satMul;
								if (s > 1) s = 1;
								var v = (l+s - l*s);
							}
							if (r == vs) {
								if (g == ms)
									var h = 5 + ((vs-b)/vm) + hue6;
								else
									var h = 1 - ((vs-g)/vm) + hue6;
							} else if (g == vs) {
								if (b == ms)
									var h = 1 + ((vs-r)/vm) + hue6;
								else
									var h = 3 - ((vs-b)/vm) + hue6;
							} else {
								if (r == ms)
									var h = 3 + ((vs-g)/vm) + hue6;
								else
									var h = 5 - ((vs-r)/vm) + hue6;
							}
							if (h < 0) h+=6;
							if (h >= 6) h-=6;
							var m = (l+l-v);
							var sextant = h>>0;
							if (sextant == 0) {
								r = v*255; g = (m+((v-m)*(h-sextant)))*255; b = m*255;
							} else if (sextant == 1) {
								r = (v-((v-m)*(h-sextant)))*255; g = v*255; b = m*255;
							} else if (sextant == 2) {
								r = m*255; g = v*255; b = (m+((v-m)*(h-sextant)))*255;
							} else if (sextant == 3) {
								r = m*255; g = (v-((v-m)*(h-sextant)))*255; b = v*255;
							} else if (sextant == 4) {
								r = (m+((v-m)*(h-sextant)))*255; g = m*255; b = v*255;
							} else if (sextant == 5) {
								r = v*255; g = m*255; b = (v-((v-m)*(h-sextant)))*255;
							}
						}
					}
				}

				if (lightness < 0) {
					r *= lightp1;
					g *= lightp1;
					b *= lightp1;
				} else if (lightness > 0) {
					r = r * lightm1 + light255;
					g = g * lightm1 + light255;
					b = b * lightm1 + light255;
				}

				if (r < 0)
					data[pix] = 0
				else if (r > 255)
					data[pix] = 255
				else
					data[pix] = r;

				if (g < 0)
					data[pix1] = 0
				else if (g > 255)
					data[pix1] = 255
				else
					data[pix1] = g;

				if (b < 0)
					data[pix2] = 0
				else if (b > 255)
					data[pix2] = 255
				else
					data[pix2] = b;

			}

			return true;
		}
	},
	checkSupport : function() {
		return Pixastic.Client.hasCanvasImageData();
	}

}
/*
 * Pixastic Lib - Invert filter - v0.1.1
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.invert = {
	process : function(params) {
		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);

			var invertAlpha = !!params.options.invertAlpha;
			var rect = params.options.rect;

			var p = rect.width * rect.height;

			var pix = p*4, pix1 = pix + 1, pix2 = pix + 2, pix3 = pix + 3;

			while (p--) {
				data[pix-=4] = 255 - data[pix];
				data[pix1-=4] = 255 - data[pix1];
				data[pix2-=4] = 255 - data[pix2];
				if (invertAlpha)
					data[pix3-=4] = 255 - data[pix3];
			}

			return true;
		} else if (Pixastic.Client.isIE()) {
			params.image.style.filter += " invert";
			return true;
		}
	},
	checkSupport : function() {
		return (Pixastic.Client.hasCanvasImageData() || Pixastic.Client.isIE());
	}
}
/*
 * Pixastic Lib - Posterize effect - v0.1.0
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.posterize = {

	process : function(params) {


		var numLevels = 256;
		if (typeof params.options.levels != "undefined")
			numLevels = parseInt(params.options.levels,10)||1;

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);

			numLevels = Math.max(2,Math.min(256,numLevels));

			var numAreas = 256 / numLevels;
			var numValues = 256 / (numLevels-1);

			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;
			var w4 = w*4;
			var y = h;
			do {
				var offsetY = (y-1)*w4;
				var x = w;
				do {
					var offset = offsetY + (x-1)*4;

					var r = numValues * ((data[offset] / numAreas)>>0);
					var g = numValues * ((data[offset+1] / numAreas)>>0);
					var b = numValues * ((data[offset+2] / numAreas)>>0);

					if (r > 255) r = 255;
					if (g > 255) g = 255;
					if (b > 255) b = 255;

					data[offset] = r;
					data[offset+1] = g;
					data[offset+2] = b;

				} while (--x);
			} while (--y);
			return true;
		}
	},
	checkSupport : function() {
		return Pixastic.Client.hasCanvasImageData();
	}
}


/*
 * Pixastic Lib - Remove noise - v0.1.0
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.removenoise = {
	process : function(params) {

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);

			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;

			var w4 = w*4;
			var y = h;
			do {
				var offsetY = (y-1)*w4;

				var nextY = (y == h) ? y - 1 : y;
				var prevY = (y == 1) ? 0 : y-2;

				var offsetYPrev = prevY*w*4;
				var offsetYNext = nextY*w*4;

				var x = w;
				do {
					var offset = offsetY + (x*4-4);

					var offsetPrev = offsetYPrev + ((x == 1) ? 0 : x-2) * 4;
					var offsetNext = offsetYNext + ((x == w) ? x-1 : x) * 4;

					var minR, maxR, minG, maxG, minB, maxB;

					minR = maxR = data[offsetPrev];
					var r1 = data[offset-4], r2 = data[offset+4], r3 = data[offsetNext];
					if (r1 < minR) minR = r1;
					if (r2 < minR) minR = r2;
					if (r3 < minR) minR = r3;
					if (r1 > maxR) maxR = r1;
					if (r2 > maxR) maxR = r2;
					if (r3 > maxR) maxR = r3;

					minG = maxG = data[offsetPrev+1];
					var g1 = data[offset-3], g2 = data[offset+5], g3 = data[offsetNext+1];
					if (g1 < minG) minG = g1;
					if (g2 < minG) minG = g2;
					if (g3 < minG) minG = g3;
					if (g1 > maxG) maxG = g1;
					if (g2 > maxG) maxG = g2;
					if (g3 > maxG) maxG = g3;

					minB = maxB = data[offsetPrev+2];
					var b1 = data[offset-2], b2 = data[offset+6], b3 = data[offsetNext+2];
					if (b1 < minB) minB = b1;
					if (b2 < minB) minB = b2;
					if (b3 < minB) minB = b3;
					if (b1 > maxB) maxB = b1;
					if (b2 > maxB) maxB = b2;
					if (b3 > maxB) maxB = b3;

					if (data[offset] > maxR) {
						data[offset] = maxR;
					} else if (data[offset] < minR) {
						data[offset] = minR;
					}
					if (data[offset+1] > maxG) {
						data[offset+1] = maxG;
					} else if (data[offset+1] < minG) {
						data[offset+1] = minG;
					}
					if (data[offset+2] > maxB) {
						data[offset+2] = maxB;
					} else if (data[offset+2] < minB) {
						data[offset+2] = minB;
					}

				} while (--x);
			} while (--y);

			return true;
		}
	},
	checkSupport : function() {
		return Pixastic.Client.hasCanvasImageData();
	}
}/*
 * Pixastic Lib - Sepia filter - v0.1.0
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.sepia = {

	process : function(params) {
		var mode = (parseInt(params.options.mode,10)||0);
		if (mode < 0) mode = 0;
		if (mode > 1) mode = 1;

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);
			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;
			var w4 = w*4;
			var y = h;
			do {
				var offsetY = (y-1)*w4;
				var x = w;
				do {
					var offset = offsetY + (x-1)*4;

					if (mode) {
						// a bit faster, but not as good
						var d = data[offset] * 0.299 + data[offset+1] * 0.587 + data[offset+2] * 0.114;
						var r = (d + 39);
						var g = (d + 14);
						var b = (d - 36);
					} else {
						// Microsoft
						var or = data[offset];
						var og = data[offset+1];
						var ob = data[offset+2];

						var r = (or * 0.393 + og * 0.769 + ob * 0.189);
						var g = (or * 0.349 + og * 0.686 + ob * 0.168);
						var b = (or * 0.272 + og * 0.534 + ob * 0.131);
					}

					if (r < 0) r = 0; if (r > 255) r = 255;
					if (g < 0) g = 0; if (g > 255) g = 255;
					if (b < 0) b = 0; if (b > 255) b = 255;

					data[offset] = r;
					data[offset+1] = g;
					data[offset+2] = b;

				} while (--x);
			} while (--y);
			return true;
		}
	},
	checkSupport : function() {
		return Pixastic.Client.hasCanvasImageData();
	}
}/*
 * Pixastic Lib - Sharpen filter - v0.1.0
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.sharpen = {
	process : function(params) {

		var strength = 0;
		if (typeof params.options.amount != "undefined")
			strength = parseFloat(params.options.amount)||0;

		if (strength < 0) strength = 0;
		if (strength > 1) strength = 1;

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);
			var dataCopy = Pixastic.prepareData(params, true)

			var mul = 15;
			var mulOther = 1 + 3*strength;

			var kernel = [
				[0, 	-mulOther, 	0],
				[-mulOther, 	mul, 	-mulOther],
				[0, 	-mulOther, 	0]
			];

			var weight = 0;
			for (var i=0;i<3;i++) {
				for (var j=0;j<3;j++) {
					weight += kernel[i][j];
				}
			}

			weight = 1 / weight;

			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;

			mul *= weight;
			mulOther *= weight;

			var w4 = w*4;
			var y = h;
			do {
				var offsetY = (y-1)*w4;

				var nextY = (y == h) ? y - 1 : y;
				var prevY = (y == 1) ? 0 : y-2;

				var offsetYPrev = prevY*w4;
				var offsetYNext = nextY*w4;

				var x = w;
				do {
					var offset = offsetY + (x*4-4);

					var offsetPrev = offsetYPrev + ((x == 1) ? 0 : x-2) * 4;
					var offsetNext = offsetYNext + ((x == w) ? x-1 : x) * 4;

					var r = ((
						- dataCopy[offsetPrev]
						- dataCopy[offset-4]
						- dataCopy[offset+4]
						- dataCopy[offsetNext])		* mulOther
						+ dataCopy[offset] 	* mul
						);

					var g = ((
						- dataCopy[offsetPrev+1]
						- dataCopy[offset-3]
						- dataCopy[offset+5]
						- dataCopy[offsetNext+1])	* mulOther
						+ dataCopy[offset+1] 	* mul
						);

					var b = ((
						- dataCopy[offsetPrev+2]
						- dataCopy[offset-2]
						- dataCopy[offset+6]
						- dataCopy[offsetNext+2])	* mulOther
						+ dataCopy[offset+2] 	* mul
						);


					if (r < 0 ) r = 0;
					if (g < 0 ) g = 0;
					if (b < 0 ) b = 0;
					if (r > 255 ) r = 255;
					if (g > 255 ) g = 255;
					if (b > 255 ) b = 255;

					data[offset] = r;
					data[offset+1] = g;
					data[offset+2] = b;

				} while (--x);
			} while (--y);

			return true;

		}
	},
	checkSupport : function() {
		return Pixastic.Client.hasCanvasImageData();
	}
}
/*
 * Pixastic Lib - Solarize filter - v0.1.0
 * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
 * License: [http://www.pixastic.com/lib/license.txt]
 */

Pixastic.Actions.solarize = {

	process : function(params) {
		var useAverage = !!(params.options.average && params.options.average != "false");

		if (Pixastic.Client.hasCanvasImageData()) {
			var data = Pixastic.prepareData(params);
			var rect = params.options.rect;
			var w = rect.width;
			var h = rect.height;
			var w4 = w*4;
			var y = h;
			do {
				var offsetY = (y-1)*w4;
				var x = w;
				do {
					var offset = offsetY + (x-1)*4;

					var r = data[offset];
					var g = data[offset+1];
					var b = data[offset+2];

					if (r > 127) r = 255 - r;
					if (g > 127) g = 255 - g;
					if (b > 127) b = 255 - b;

					data[offset] = r;
					data[offset+1] = g;
					data[offset+2] = b;

				} while (--x);
			} while (--y);
			return true;
		}
	},
	checkSupport : function() {
		return (Pixastic.Client.hasCanvasImageData());
	}
};
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-dependencies/pixastic.custom.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/ajax.js
var ajax = function(args) {
    var url = args.url;
    if (args.data && args.method !== 'POST' || args.queryString) {
        url += '?' + ajax.prepare(args.data);
        args.data = undefined;
    } else if (typeof args.data !== 'undefined') {
        args.data = ajax.prepare(args.data);
    }
    ajax.send(url, args.success, args.method || 'GET', args.data, args.async, args.headers || {})
};

ajax.prepare = function(data) {
    var query = [];
    for (var key in data) {
        query.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));
    }
    return query.join('&');
};

ajax.send = function(url, callback, method, data, async, headers) {
    var x = new XMLHttpRequest();
    x.open(method, url, async);
    x.onreadystatechange = function() {
        if (x.readyState == 4) {
            callback(x.responseText, x)
        }
    };
    x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    if (method == 'POST') {
        x.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    }
    for (var header in headers) {
        x.setRequestHeader(header, headers[header]);
    }
    x.send(data)
};

ajax.get = function(url, data, successCallback, async, headers, method) {
    ajax({
        url: url,
        data: data,
        success: successCallback,
        async: async,
        headers: headers,
        method: method || 'GET'
    });
};

ajax.post = function(url, data, successCallback, async, headers, method) {
    ajax({
        url: url,
        data: data,
        success: successCallback,
        async: async,
        headers: headers,
        method: method || 'POST'
    });
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/ajax.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/debug.js
// <debug/>


// <strict/>
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/debug.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/event.js
function eventMouseEnter(node, callback) {
    node.addEventListener('mouseover', function(event) {
        if (!event.relatedTarget || (event.relatedTarget !== this && !(this.compareDocumentPosition(event.relatedTarget) & Node.DOCUMENT_POSITION_CONTAINED_BY))) {
            callback.call(node, event);
        }
    });
};

function eventMouseLeave(node, callback) {
    node.addEventListener('mouseout', function(event) {
        if (!event.relatedTarget || (event.relatedTarget !== this && !(this.compareDocumentPosition(event.relatedTarget) & Node.DOCUMENT_POSITION_CONTAINED_BY))) {
            callback.call(node, event);
        }
    });
};

function eventEventable(object) {
    object.prototype.events = {};
    object.prototype.bindOptions = function(options) {
        for (var name in options) {
            this.bind(name, options[name]);
        }
    };
    object.prototype.bind = function(name, callback) {
        // <strict/>
        var names = name.split(/,\s*/);
        for (var i = 0, l = names.length; i < l; i++) {
            if (!this.events[names[i]]) {
                this.events[names[i]] = [];
            }
            this.events[names[i]].push(callback);
        }
    };
    object.prototype.fire = function(name, args) {
        var result = [];

        // <debug/>

        if (this.events[name]) {
            for (var i = 0; i < this.events[name].length; i++) {
                var event = this.events[name][i],
                    currentResult = event.apply(this, args);
                if (typeof currentResult !== 'undefined') {
                    result = result.concat(currentResult);
                }
            }
        }

        return result;
    };
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/event.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/format.js
function formatBytes(bytes, decimalPlaces) {
    if (typeof decimalPlaces === 'undefined') {
        decimalPlaces = 2;
    }
    var suffix = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    for (var i = 0; bytes > 1024 && i < 8; i++) {
        bytes /= 1024;
    }
    return Math.round(bytes, decimalPlaces) + ' ' + suffix[i];
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/format.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/i18n.js
/**
 * @fileOverview Editor internationalization (i18n) private functions and properties.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 */

/**
 * @type String|null
 */
var currentLocale = null;

var localeFallback = 'en';

/**
 * @type Object
 */
var locales = {};

/**
 * @type Object
 */
var localeNames = {};

/**
 *
 * @static
 * @param {String} languageCode The language code (e.g. `en`, `fr`, `zh-CN`).
 * @param {String} nativeName The languages native name.
 * @param {Object} [strings] Locale keys mapped to phrases.
 */
function registerLocale(name, nativeName, strings) {
    // <strict/>
    // <debug/>

    locales[name] = strings;
    localeNames[name] = nativeName;
}

/**
 * Extends an existing locale, or registers it if it does not already exist.
 *
 * @static
 * @param {String} languageCode The language code (e.g. `en`, `fr`, `zh-CN`).
 * @param {String|Object} nativeName The languages native name, or an locale keys mapped to phrases.
 * @param {Object} [strings] Locale keys mapped to phrases.
 */
function extendLocale(languageCode, nativeName, strings) {
    if (typeof locales[languageCode] === 'undefined') {
        registerLocale(languageCode, nativeName, strings);
    } else {
        // <debug/>

        // Allow only passing the nativeName once.
        strings = strings || nativeName;

        for (var key in strings) {
            locales[languageCode][key] = strings[key];
        }
    }
}

/**
 * @param {String} key
 */
function setLocale(key) {
    if (currentLocale !== key) {
        // <debug/>

        currentLocale = key;
        Raptor.eachInstance(function() {
            this.localeChange();
        });
    }
}

/**
 * Return the localised string for the current locale if present, else the
 * localised string for the first available locale, failing that return the
 * string.
 *
 * @param  {string} string
 * @param  {Boolean} allowMissing If true and the localized string is missing, false is returned.
 * @return {string|false}
 */
function getLocalizedString(string, allowMissing) {
    if (typeof locales[currentLocale] !== 'undefined' &&
            typeof locales[currentLocale][string] !== 'undefined') {
        return locales[currentLocale][string];
    }

    if (typeof locales[localeFallback] !== 'undefined' &&
            typeof locales[localeFallback][string] !== 'undefined') {
        return locales[localeFallback][string];
    }

    for (var localeName in localeNames) {
        if (typeof locales[localeName][string] !== 'undefined') {
            return locales[localeName][string];
        }
    }

    if (allowMissing) {
        return false;
    }

    // <debug/>
    return string;
}

/**
 * Internationalisation function. Translates a string with tagged variable
 * references to the current locale.
 *
 * <p>
 * Variable references should be surrounded with double curly braces {{ }}
 *      e.g. "This string has a variable: {{my.variable}} which will not be translated"
 * </p>
 *
 * @static
 * @param {String} string
 * @param {Object|false} variables If false, then no string is returned by default.
 */
function tr(string, variables) {
    if (!currentLocale) {
        var lastLocale = Raptor.persist('locale');
        if (lastLocale) {
            currentLocale = lastLocale;
        }
    }
    if (!currentLocale) {
        currentLocale = 'en';
    }

    // Get the current locale translated string
    string = getLocalizedString(string, variables === false);
    if (string === false) {
        return false;
    }

    // Convert the variables
    if (!variables) {
        return string;
    } else {
        for (var key in variables) {
            string = string.replace('{{' + key + '}}', variables[key]);
        }
        return string;
    }
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/i18n.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/node.js

/**
 * Generates a unique ID for a node.
 *
 * @returns {String} The unique ID.
 */
function nodeUniqueId(node) {
    if (!node || !node.id) {
        var id;
        do {
            id = 'ruid-' + Math.random().toString().replace('.', '');
        } while (document.getElementById(id))
        if (!node) {
            return id;
        }
        node.id = id;
    }
    return node.id;
}

function nodeClosestByClassName(node, className) {
    while (node.parentNode && node.parentNode.className != className) {
        node = node.parentNode;
    }
    if (node.parentNode) {
        return node.parentNode;
    }
    return null;
}

function nodeFromHtml(html, wrapper) {
    var node = document.createElement(wrapper || 'div');
    node.innerHTML = html;
    return node.children[0];
}

function nodeClassSwitch(node, classAdd, classRemove) {
    node.classList.add(classAdd);
    node.classList.remove(classRemove);
}

function nodeLastChild(node) {
    var lastChild = node.lastChild
    while (lastChild && lastChild.nodeType !== 1) {
        lastChild = lastChild.previousSibling;
    }
    return lastChild;
}

function nodeOffsetTop(node) {
    var offsetTop = 0;
    do {
        if (node.tagName === 'BODY') {
            break;
        } else {
            offsetTop += node.offsetTop;
        }
        node = node.offsetParent;
    } while(node);
    return offsetTop;
}

function nodeFreezeHeight(node) {
    if (typeof node.dataset.height === 'undefined') {
        node.dataset.height = node.style.height;
        node.style.height = document.body.clientHeight + 'px';
    }
}

function nodeUnfreezeHeight(node) {
    if (typeof node.dataset.height !== 'undefined') {
        node.style.height = node.dataset.height;
        delete node.dataset.height;
    }
}

function nodeMatches(node, selector) {
    var method =
        Element.prototype.matches ||
        Element.prototype.matchesSelector ||
        Element.prototype.mozMatchesSelector ||
        Element.prototype.msMatchesSelector ||
        Element.prototype.oMatchesSelector;
    return method.call(node, selector);
}

function nodeFindUnnested(node, findSelector, nestedSelector) {
    var nodes = node.querySelectorAll(findSelector),
        result = [];
    for (var i = 0; i < nodes.length; i++) {
        var closest = nodes[i];
        do {
            if (nodeMatches(closest, nestedSelector)) {
                break;
            }
        } while (closest = closest.parentNode);
        if (closest == node) {
            result.push(nodes[i]);
        }
    }
    return result;
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/node.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/persist.js
function persistSet(key, value) {
    // Local storage throws an error when using XUL
    try {
        if (localStorage) {
            var storage;
            if (localStorage.raptor) {
                storage = JSON.parse(localStorage.raptor);
            } else {
                storage = {};
            }
            storage[key] = value;
            localStorage.raptor = JSON.stringify(storage);
            return true;
        }
    } catch (e) {
    }
    return false;
};

function persistGet(key, defaultValue) {
    // Local storage throws an error when using XUL
    try {
        if (localStorage) {
            var storage;
            if (localStorage.raptor) {
                storage = JSON.parse(localStorage.raptor);
            } else {
                storage = {};
            }
            return storage[key];
        }
    } catch (e) {
    }
    return defaultValue;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/persist.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/plugin.js
function Plugin(overrides) {
    for (var key in overrides) {
        this[key] = overrides[key];
    }
};

Plugin.prototype.init = function() {}

function pluginPluggable(object) {
    object.registerPlugin = function(plugin) {
        // <strict/>

        this.prototype.plugins[plugin.name] = plugin;
    };
    object.prototype.plugins = {};
    object.prototype.pluginInstances = {};
};

function pluginPrepare(pluggable, plugin, pluginOptions, pluginAttributes) {
    // <strict/>

    var instance = $.extend({}, plugin);

    var options = $.extend({}, pluggable.options, {
        baseClass: 'raptor-plugin-' + stringFromCamelCase(plugin.name)
    }, instance.options, pluginOptions);

    instance.pluggable = pluggable;
    instance.options = options;

    for (var key in pluginAttributes) {
        instance[key] = pluginAttributes[key];
    }

    // <strict/>
    var ui = instance.init();

    return {
        ui: ui,
        instance: instance
    };
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/plugin.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/state.js
var stateDirty = {};

jQuery(window).on('beforeunload', stateCheckDirty);

function stateSetDirty(owner, dirty) {
    if (dirty) {
        stateDirty[owner] = dirty;
    } else {
        delete stateDirty[owner];
    }
}

function stateCheckDirty(event) {
    var dirty = false;
    for (var key in stateDirty) {
        if (typeof stateDirty[key] === 'function') {
            if (stateDirty[key]()) {
                dirty = true;
            }
        } else if (stateDirty[key]) {
            dirty = true;
        }
    }
    if (dirty) {
        var confirmationMessage = 'There are unsaved changes on this page. Are you sure you wish to navigate away?';
        (event || window.event).returnValue = confirmationMessage;
        return confirmationMessage;
    }
};
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/state.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/string.js
function stringHash(string) {
    return string
        .split('')
        .reduce(function(a, b){
            a = ((a << 5) - a) + b.charCodeAt(0);
            return a & a
        }, 0);
}

function stringUcFirst(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function stringFromCamelCase(string, delimiter) {
    return string.replace(/([A-Z])/g, function(match) {
        return (delimiter || '-') + match.toLowerCase();
    });
}

function stringToCamelCase(string, ucFirst) {
    var result = string.toLowerCase().replace(/[^a-z0-9](.)/ig, function(match, char) {
        return char.toUpperCase();
    });
    if (ucFirst !== false) {
        result = stringUcFirst(result);
    }
    return result;
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/string.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/template.js
/**
 * @fileOverview Template helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 *
 * @type type
 */
var templateCache = { 
    "unsupported": "<div class=\"raptor-ui {{baseClass}}-unsupported-overlay\"></div> <div class=\"raptor-ui {{baseClass}}-unsupported-content\"> It has been detected that you a using a browser that is not supported by Raptor, please use one of the following browsers: <ul> <li><a href=\"http://www.google.com/chrome\">Google Chrome</a></li> <li><a href=\"http://www.firefox.com\">Mozilla Firefox</a></li> <li><a href=\"http://www.google.com/chromeframe\">Internet Explorer with Chrome Frame</a></li> </ul> <div class=\"{{baseClass}}-unsupported-input\"> <button class=\"{{baseClass}}-unsupported-close\">Close</button> <input name=\"{{baseClass}}-unsupported-show\" type=\"checkbox\" /> <label>Don't show this message again</label> </div> <div>",
    "class-menu.item": "<li><a data-value=\"{{value}}\">{{label}}</a></li>",
    "click-button-to-edit.button": "<button class=\"{{baseClass}}-button\">tr('clickButtonToEditPluginButton')</button>",
    "color-menu-basic.automatic": "<li><a data-color=\"automatic\"><div class=\"{{baseClass}}-swatch\" style=\"display: none\"></div> <span>tr('colorMenuBasicAutomatic')</span></a></li>",
    "color-menu-basic.item": "<li><a data-color=\"{{className}}\"><div class=\"{{baseClass}}-swatch\" style=\"background-color: {{color}}\"></div> <span>{{label}}</span></a></li>",
    "embed.dialog": "<div class=\"{{baseClass}}-panel-tabs ui-tabs ui-widget ui-widget-content ui-corner-all\"> <ul class=\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\"> <li class=\"ui-state-default ui-corner-top ui-tabs-selected ui-state-active\"><a>tr('embedDialogTabCode')</a></li> <li class=\"ui-state-default ui-corner-top\"><a>tr('embedDialogTabPreview')</a></li> </ul> <div class=\"{{baseClass}}-code-tab\"> <p>tr('embedDialogTabCodeContent')</p> <textarea></textarea> </div> <div class=\"{{baseClass}}-preview-tab\" style=\"display: none\"> <p>tr('embedDialogTabPreviewContent')</p> <div class=\"{{baseClass}}-preview\"></div> </div> </div>",
    "font-family.menu-item": "<li><a data-font=\"{{fontName}}\"><span>{{fontTitle}}</span></a></li>",
    "image-resize.dialog": "<div class=\"raptor-resize-image\"> <div> <label for=\"{{baseClass}}-width\">tr('imageResizeDialogWidth')</label> <input class=\"form-text\" id=\"{{baseClass}}-width\" name=\"width\" type=\"text\" placeholder=\"tr('imageResizeDialogWidthPlaceHolder')\"/> </div> <div> <label for=\"{{baseClass}}-height\">tr('imageResizeDialogHeight')</label> <input class=\"form-text\" id=\"{{baseClass}}-height\" name=\"height\" type=\"text\" placeholder=\"tr('imageResizeDialogHeightPlaceHolder')\"/> </div> <div class=\"{{baseClass}}-lock-proportions-container\"> <span class=\"{{baseClass}}-lock-proportions\"> <span class=\"ui-button-text\">Constrain proportions</span> <span class=\"ui-icon ui-icon-locked\"></span> </span> </div> </div>",
    "insert-file.dialog": "<div> <div> <label class=\"form-label\">tr('insertFileURLLabel')</label> <input type=\"text\" name=\"location\" class=\"form-text\" placeholder=\"tr('insertFileURLPlaceHolder')\"/> </div> <div> <label class=\"form-label\">tr('insertFileNameLabel')</label> <input type=\"text\" name=\"name\" class=\"form-text\" placeholder=\"tr('insertFileNamePlaceHolder')\"/> </div> </div>",
    "language-menu.item": "<li><a data-value=\"{{value}}\"><span class=\"ui-icon ui-icon-flag-{{icon}}\"></span>{{label}}</a></li>",
    "link.dialog": "<div style=\"display:none\" class=\"{{baseClass}}-panel\"> <div class=\"{{baseClass}}-menu\"> <p>tr('linkCreateDialogMenuHeader')</p> <fieldset data-menu=\"\"></fieldset> </div> <div class=\"{{baseClass}}-wrap\"> <div class=\"{{baseClass}}-content\" data-content=\"\"></div> </div> </div>",
    "link.document": "<h2>tr('linkTypeDocumentHeader')</h2> <fieldset> <label for=\"{{baseClass}}-document-href\">tr('linkTypeDocumentLocationLabel')</label> <input id=\"{{baseClass}}-document-href\" value=\"http://\" name=\"location\" class=\"{{baseClass}}-document-href\" type=\"text\" placeholder=\"tr('linkTypeDocumentLocationPlaceHolder')\" /> </fieldset> <h2>tr('linkTypeDocumentNewWindowHeader')</h2> <fieldset> <label for=\"{{baseClass}}-document-target\"> <input id=\"{{baseClass}}-document-target\" name=\"blank\" type=\"checkbox\" /> <span>tr('linkTypeDocumentNewWindowLabel')</span> </label> </fieldset> tr('linkTypeDocumentInfo')",
    "link.email": "<h2>tr('linkTypeEmailHeader')</h2> <fieldset class=\"{{baseClass}}-email\"> <label for=\"{{baseClass}}-email\">tr('linkTypeEmailToLabel')</label> <input id=\"{{baseClass}}-email\" name=\"email\" type=\"text\" placeholder=\"tr('linkTypeEmailToPlaceHolder')\"/> </fieldset> <fieldset class=\"{{baseClass}}-email\"> <label for=\"{{baseClass}}-email-subject\">tr('linkTypeEmailSubjectLabel')</label> <input id=\"{{baseClass}}-email-subject\" name=\"subject\" type=\"text\" placeholder=\"tr('linkTypeEmailSubjectPlaceHolder')\"/> </fieldset>",
    "link.error": "<div style=\"display:none\" class=\"ui-widget {{baseClass}}-error-message {{messageClass}}\"> <div class=\"ui-state-error ui-corner-all\"> <p> <span class=\"ui-icon ui-icon-alert\"></span> {{message}} </p> </div> </div>",
    "link.external": "<h2>tr('linkTypeExternalHeader')</h2> <fieldset> <label for=\"{{baseClass}}-external-href\">tr('linkTypeExternalLocationLabel')</label> <input id=\"{{baseClass}}-external-href\" value=\"http://\" name=\"location\" class=\"{{baseClass}}-external-href\" type=\"text\" placeholder=\"tr('linkTypeExternalLocationPlaceHolder')\" /> </fieldset> <h2>tr('linkTypeExternalNewWindowHeader')</h2> <fieldset> <label for=\"{{baseClass}}-external-target\"> <input id=\"{{baseClass}}-external-target\" name=\"blank\" type=\"checkbox\" checked=\"checked\" /> <span>tr('linkTypeExternalNewWindowLabel')</span> </label> </fieldset> tr('linkTypeExternalInfo')",
    "link.file-url": "<h2>tr('Link to a document or other file')</h2> <fieldset> <label for=\"{{baseClass}}-external-href\">tr('Location')</label> <input id=\"{{baseClass}}-external-href\" value=\"http://\" name=\"location\" class=\"{{baseClass}}-external-href\" type=\"text\" placeholder=\"tr('Enter your URL')\" /> </fieldset> <h2>tr('New window')</h2> <fieldset> <label for=\"{{baseClass}}-external-target\"> <input id=\"{{baseClass}}-external-target\" name=\"blank\" type=\"checkbox\" /> <span>tr('Check this box to have the file open in a new browser window')</span> </label> </fieldset> <h2>tr('Not sure what to put in the box above?')</h2> <ol> <li>tr('Ensure the file has been uploaded to your website')</li> <li>tr('Open the uploaded file in your browser')</li> <li>tr(\"Copy the file's URL from your browser's address bar and paste it into the box above\")</li> </ol>",
    "link.internal": "<h2>tr('linkTypeInternalHeader')</h2> <fieldset> <label for=\"{{baseClass}}-internal-href\">tr('linkTypeInternalLocationLabel') {{domain}}</label> <input id=\"{{baseClass}}-internal-href\" value=\"\" name=\"location\" class=\"{{baseClass}}-internal-href\" type=\"text\" placeholder=\"tr('linkTypeInternalLocationPlaceHolder')\" /> </fieldset> <h2>tr('linkTypeInternalNewWindowHeader')</h2> <fieldset> <label for=\"{{baseClass}}-internal-target\"> <input id=\"{{baseClass}}-internal-target\" name=\"blank\" type=\"checkbox\" /> <span>tr('linkTypeInternalNewWindowLabel')</span> </label> </fieldset> tr('linkTypeInternalInfo')",
    "link.label": "<label> <input type=\"radio\" name=\"link-type\" autocomplete=\"off\"/> <span>{{label}}</span> </label>",
    "paste.dialog": "<div class=\"{{baseClass}}-panel ui-dialog-content ui-widget-content\"> <div class=\"{{baseClass}}-panel-tabs ui-tabs ui-widget ui-widget-content ui-corner-all\"> <ul class=\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\"> <li class=\"{{baseClass}}-tab-formatted-clean ui-state-default ui-corner-top ui-state-active ui-tabs-selected\" style=\"display: none\"><a>tr('pasteDialogFormattedCleaned')</a></li> <li class=\"{{baseClass}}-tab-plain-text ui-state-default ui-corner-top\" style=\"display: none\"><a>tr('pasteDialogPlain')</a></li> <li class=\"{{baseClass}}-tab-formatted-unclean ui-state-default ui-corner-top\" style=\"display: none\"><a>tr('pasteDialogFormattedUnclean')</a></li> <li class=\"{{baseClass}}-tab-source ui-state-default ui-corner-top\" style=\"display: none\"><a>tr('pasteDialogSource')</a></li> </ul> <div class=\"{{baseClass}}-tab {{baseClass}}-content-formatted-clean\" style=\"display: none\"> <div contenteditable=\"true\" class=\"{{baseClass}}-area {{baseClass}}-markup\"></div> </div> <div class=\"{{baseClass}}-tab {{baseClass}}-content-plain-text\" style=\"display: none\"> <div contenteditable=\"true\" class=\"{{baseClass}}-area {{baseClass}}-plain\"></div> </div> <div class=\"{{baseClass}}-tab {{baseClass}}-content-formatted-unclean\" style=\"display: none\"> <div contenteditable=\"true\" class=\"{{baseClass}}-area {{baseClass}}-rich\"></div> </div> <div class=\"{{baseClass}}-tab {{baseClass}}-content-source\" style=\"display: none\"> <div contenteditable=\"true\" class=\"{{baseClass}}-area {{baseClass}}-source\"></div> </div> </div> </div>",
    "snippet-menu.item": "<li><a data-name=\"{{name}}\">{{name}}</a></li>",
    "special-characters.dialog": "<div> tr('specialCharactersHelp') <br/> <ul></ul> </div>",
    "special-characters.tab-button": "<button data-setKey=\"{{setKey}}\" data-charactersIndex=\"{{charactersIndex}}\" title=\"{{description}}\">{{htmlEntity}}</button>",
    "special-characters.tab-content": "<div id=\"{{baseClass}}-{{key}}\"></div>",
    "special-characters.tab-li": "<li><a href=\"#{{baseClass}}-{{key}}\">{{name}}</a></li>",
    "statistics.dialog": "<div> <ul> <li data-name=\"characters\"></li> <li data-name=\"words\"></li> <li data-name=\"sentences\"></li> <li data-name=\"truncation\"></li> </ul> </div>",
    "table.create-menu": "<table class=\"{{baseClass}}-menu\"> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table>",
    "tag-menu.item": "<li><a data-value=\"{{tag}}\">{{name}}</a></li>",
    "unsaved-edit-warning.warning": "<div class=\"{{baseClass}} ui-corner-tl\"> <span class=\"ui-icon ui-icon-alert\"></span> <span>tr('unsavedEditWarningText')</span> </div>",
    "view-source.dialog": "<div class=\"{{baseClass}}-inner-wrapper\"> <textarea></textarea> </div>"
 };

function templateRegister(name, content) {
    templateCache[name] = content;
}

function templateGet(name) {
    return templateCache[name];
};

/**
 *
 * @param {type} template
 * @param {type} variables
 * @returns {unresolved}
 */
function templateConvertTokens(template, variables) {
    // Translate template
    template = template.replace(/tr\(['"]{1}(.*?)['"]{1}\)/g, function(match, key) {
        key = key.replace(/\\(.?)/g, function (s, slash) {
            switch (slash) {
                case '\\': {
                    return '\\';
                }
                case '0': {
                    return '\u0000';
                }
                case '': {
                    return '';
                }
                default: {
                    return slash;
                }
            }
        });
        return tr(key);
    });

    // Replace variables
    variables = $.extend({}, this.options, variables || {});
    variables = templateGetVariables(variables);
    template = template.replace(/\{\{(.*?)\}\}/g, function(match, variable) {
        // <debug/>
        return variables[variable];
    });

    return template;
};

/**
 *
 * @param {type} variables
 * @param {type} prefix
 * @param {type} depth
 * @returns {unresolved}
 */
function templateGetVariables(variables, prefix, depth) {
    prefix = prefix ? prefix + '.' : '';
    var maxDepth = 5;
    if (!depth) depth = 1;
    var result = {};
    for (var name in variables) {
        if (typeof variables[name] === 'object' && depth < maxDepth) {
            var inner = templateGetVariables(variables[name], prefix + name, ++depth);
            for (var innerName in inner) {
                result[innerName] = inner[innerName];
            }
        } else {
            result[prefix + name] = variables[name];
        }
    }
    return result;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/template.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/toolbar.js
function toolbarLayout(pluggable, uiOrder, panelElement, pluginAttributes) {
    panelElement = $(panelElement || document.createElement('div'));
    // Loop the UI component order option
    for (var i = 0, l = uiOrder.length; i < l; i++) {
        var uiGroupContainer = $('<div/>')
            .addClass('raptor-layout-toolbar-group');

        // Loop each UI in the group
        var uiGroup = uiOrder[i];
        for (var ii = 0, ll = uiGroup.length; ii < ll; ii++) {
            // Check the UI has been registered
            if (!pluggable.plugins[uiGroup[ii]]) {
                // <strict/>
                continue;
            }

            var pluginOptions = pluggable.plugins[uiGroup[ii]];
            if (pluginOptions === false) {
                continue;
            }

            var component = pluginPrepare(pluggable, pluggable.plugins[uiGroup[ii]], pluginOptions, pluginAttributes);

            pluggable.pluginInstances[uiGroup[ii]] = component.instance;

            if (typeIsElement(component.ui)) {
                // Fix corner classes
                component.ui.removeClass('ui-corner-all');

                // Append the UI object to the group
                uiGroupContainer.append(component.ui);
            }
        }

        // Append the UI group to the editor toolbar
        if (uiGroupContainer.children().length > 0) {
            uiGroupContainer.appendTo(panelElement);
        }
    }

    // Fix corner classes
    panelElement.find('.ui-button:first-child').addClass('ui-corner-left');
    panelElement.find('.ui-button:last-child').addClass('ui-corner-right');
    return panelElement[0];
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/toolbar.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/types.js
/**
 * @fileOverview Type checking functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author Michael Robinson michael@panmedia.co.nz
 * @author David Neilsen david@panmedia.co.nz
 */

/**
 * Determine whether object is a number
 * {@link http://stackoverflow.com/a/1421988/187954}.
 *
 * @param  {mixed} object The object to be tested
 * @return {Boolean} True if the object is a number.
 */
function typeIsNumber(object) {
    return !isNaN(object - 0) && object !== null;
}

/**
 * Determines whether object is a string.
 *
 * @param {mixed} object The object to be tested.
 * @returns {Boolean} True if the object is a string.
 */
function typeIsString(object) {
    return typeof object === 'string';
}

/**
 * @param  {mixed} object
 * @return {boolean} True if object is an Array.
 */
function typeIsArray(object) {
    return object instanceof Array;
}

/**
 * Determines whether object is a node.
 *
 * @param {mixed} object The object to be tested.
 * @returns {Boolean} True if the object is a node.
 */
function typeIsNode(object) {
    return object instanceof Node;
}

/**
 * @param  {mixed} object
 * @return {boolean} True if object is a text node.
 */
function typeIsTextNode(object) {
    if (typeIsNode(object)) {
        return object.nodeType === Node.TEXT_NODE;
    }

    if (typeIsElement(object)) {
        return typeIsNode(object[0]);
    }

    return false;
}

/**
 * Determines whether object is a jQuery element.
 *
 * @param {mixed} object The object to be tested.
 * @returns {Boolean} True if the object is a jQUery element.
 */
function typeIsElement(object) {
    return object instanceof jQuery;
}

function typeIsJQueryCompatible(object) {
    return object instanceof Node || object instanceof NodeList || object instanceof HTMLCollection || object instanceof jQuery;
};
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/types.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ar.js
/**
 * @fileOverview Arabic strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ar', 'العربية', {
    alignCenterTitle: "محاذاة توسيط النص",
    alignJustifyTitle: "محاذاة النص إلى تبرير",
    alignLeftTitle: "محاذاة النص لليسار",
    alignRightTitle: "محاذاة النص إلى اليمين",
    cancelDialogCancelButton: "مواصلة تحرير",
    cancelDialogContent: "هل أنت متأكد من أنك تريد إلغاء التحرير؟ سيتم فقدان كافة التغييرات!",
    cancelDialogOKButton: "إلغاء التحرير",
    cancelDialogTitle: "إلغاء التحرير",
    cancelTitle: "إلغاء التحرير",
    classMenuTitle: "منتقي نمط",
    clearFormattingTitle: "مسح التنسيق",
    clickButtonToEditText: "تحرير",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "تلقائي",
    colorMenuBasicBlack: "الأسود",
    colorMenuBasicBlue: "الأزرق",
    colorMenuBasicGreen: "الأخضر",
    colorMenuBasicGrey: "رمادي",
    colorMenuBasicOrange: "أورانج",
    colorMenuBasicPurple: "اللون الأرجواني",
    colorMenuBasicRed: "الأحمر",
    colorMenuBasicTitle: "تغيير لون النص",
    colorMenuBasicWhite: "الأبيض",
    dockToElementTitle: "الإرساء\/إلغاء إرساء محرر لعنصر",
    dockToScreenTitle: "الإرساء\/إلغاء إرساء محرر للشاشة",
    embedDialogCancelButton: "إلغاء الأمر",
    embedDialogOKButton: "تضمين كائن",
    embedDialogTabCode: "تضمين التعليمات البرمجية",
    embedDialogTabCodeContent: "لصق الخاص بك تضمين رمز في ناحية النص أدناه:",
    embedDialogTabPreview: "معاينة",
    embedDialogTabPreviewContent: "يتم عرض معاينة للكائن المضمن الخاص بك أدناه:",
    embedDialogTitle: "تضمين كائن",
    embedTitle: "تضمين كائن",
    errorUINoName: "واجهة المستخدم \"{{ui}}\" غير صالح (يجب أن يكون لديك خاصية اسم)",
    errorUINotObject: "واجهة المستخدم \"{{ui}}\" غير صالح (يجب أن يكون كائن)",
    errorUIOverride: "تم بالفعل تسجيل واجهة المستخدم \"{{name}}\"، وسيتم الكتابة فوق",
    fileManagerDialogTitle: "إدارة الملفات",
    fileManagerTitle: "إدارة الملفات",
    floatLeftTitle: "محاذاة الصورة إلى اليسار",
    floatNoneTitle: "إزالة الصورة محاذاة",
    floatRightTitle: "محاذاة الصورة إلى اليمين",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "هزلية دون",
    fontFamilyMenuFontCourier: "الحقيبة الجديدة",
    fontFamilyMenuFontDefault: "الخط الافتراضي",
    fontFamilyMenuFontGeorgia: "جورجيا",
    fontFamilyMenuFontImpact: "أثر",
    fontFamilyMenuFontPalatino: "بلاطي",
    fontFamilyMenuFontTimes: "تايمز الرومانية الجديدة",
    fontFamilyMenuTitle: "اختيار الخط الخاص بك",
    guidesTitle: "إظهار خطوط إرشاد العنصر",
    historyRedoTitle: "الإعادة",
    historyUndoTitle: "التراجع عن",
    hrCreateTitle: "إدراج مسطرة أفقية",
    imageResizeButtonDialogCancelButton: "إلغاء الأمر",
    imageResizeButtonDialogHeight: "ارتفاع الصورة",
    imageResizeButtonDialogHeightPlaceHolder: "الارتفاع",
    imageResizeButtonDialogOKButton: "تغيير حجم",
    imageResizeButtonDialogTitle: "تغيير حجم الصورة",
    imageResizeButtonDialogWidth: "عرض الصورة",
    imageResizeButtonDialogWidthPlaceHolder: "العرض",
    imageResizeButtonText: "تغيير حجم الصورة",
    insertFileDialogCancelButton: "إلغاء الأمر",
    insertFileDialogOKButton: "إدراج ملف",
    insertFileNameLabel: "اسم الملف",
    insertFileNamePlaceHolder: "اسم الملف...",
    insertFileTitle: "إدراج ملف",
    insertFileURLLabel: "ملف URL",
    insertFileURLPlaceHolder: "ملف URL...",
    languageMenuTitle: "تغيير اللغة",
    linkCreateDialogCancelButton: "إلغاء الأمر",
    linkCreateDialogMenuHeader: "اختر نوع ارتباط",
    linkCreateDialogOKButton: "إدراج ارتباط",
    linkCreateDialogTitle: "إدراج ارتباط",
    linkCreateTitle: "إدراج ارتباط",
    linkRemoveTitle: "إزالة الارتباط",
    linkTypeDocumentHeader: "ارتباط إلى مستند أو ملف آخر",
    linkTypeDocumentInfo: "<h2>لم تكن متأكداً من ما وضع في المربع أعلاه؟<\/h2><ol>    <li>تأكد من تحميل الملف إلى موقع الويب الخاص بك.<\/li>    <li>قم بفتح الملف الذي تم تحميله في المتصفح الخاص بك.<\/li>    <li>انسخ عنوان URL الملف من شريط العناوين في المستعرض الخاص بك ولصقه في المربع أعلاه.<\/li><\/ol>",
    linkTypeDocumentLabel: "مستند أو ملف آخر",
    linkTypeDocumentLocationLabel: "الموقع:",
    linkTypeDocumentLocationPlaceHolder: "أدخل عنوان URL",
    linkTypeDocumentNewWindowHeader: "نافذة جديدة",
    linkTypeDocumentNewWindowLabel: "حدد هذا المربع لفتح في نافذة مستعرض جديدة\/علامة تبويب الملف.",
    linkTypeEmailHeader: "ارتباط إلى عنوان بريد إلكتروني",
    linkTypeEmailLabel: "عنوان البريد الإلكتروني",
    linkTypeEmailSubjectLabel: "الموضوع (اختياري):",
    linkTypeEmailSubjectPlaceHolder: "أدخل هذا الموضوع",
    linkTypeEmailToLabel: "البريد الإلكتروني:",
    linkTypeEmailToPlaceHolder: "أدخل عنوان البريد الإلكتروني",
    linkTypeExternalHeader: "وصلة إلى صفحة على موقع آخر",
    linkTypeExternalInfo: "<h2>لم تكن متأكداً من ما وضع في المربع أعلاه؟<\/h2><ol>    <li>العثور على الصفحة على ويب الذي تريد الارتباط.<\/li>    <li>انسخ عنوان ويب من شريط العناوين في المستعرض الخاص بك ولصقه في المربع أعلاه.<\/li><\/ol>",
    linkTypeExternalLabel: "صفحة على موقع آخر",
    linkTypeExternalLocationLabel: "الموقع:",
    linkTypeExternalLocationPlaceHolder: "أدخل عنوان URL",
    linkTypeExternalNewWindowHeader: "نافذة جديدة",
    linkTypeExternalNewWindowLabel: "حدد هذا المربع لفتح في نافذة مستعرض جديدة\/علامة تبويب الارتباط.",
    linkTypeInternalHeader: "وصلة إلى صفحة في هذا الموقع",
    linkTypeInternalInfo: "<h2>لم تكن متأكداً من ما وضع في المربع أعلاه؟<\/h2><ol>    <li>العثور على الصفحة على هذا الرابط موقع إلى.<\/li>    <li>نسخ عنوان الويب من العنوان المستعرض الخاص بك بار، باستثناء \"{{domain}}\" ولصقه في المربع أعلاه.<\/li><\/ol>",
    linkTypeInternalLabel: "صفحة على موقع ويب هذا",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "إدخال URI",
    linkTypeInternalNewWindowHeader: "نافذة جديدة",
    linkTypeInternalNewWindowLabel: "حدد هذا المربع لفتح في نافذة مستعرض جديدة\/علامة تبويب الارتباط.",
    listOrderedTitle: "قائمة مرتبة",
    listUnorderedTitle: "قائمة غير مرتبة",
    logoTitle: "مزيد من المعلومات حول محرر WYSIWYG رابتور",
    loremIpsumTitle: "إدراج نص وهمية لاختبار",
    navigateAway: "\nهناك تغييرات غير محفوظة في هذه الصفحة. \nإذا انتقلت من هذه الصفحة فستفقد التغييرات غير المحفوظة الخاصة بك",
    pasteDialogCancelButton: "إلغاء الأمر",
    pasteDialogFormattedCleaned: "تنسيق وتنظيفها",
    pasteDialogFormattedUnclean: "تنسيق غير نظيفة",
    pasteDialogOKButton: "إدراج",
    pasteDialogPlain: "نص عادي",
    pasteDialogSource: "التعليمات البرمجية المصدر",
    pasteDialogTitle: "لصق",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "فشل استرداد التنقيحات",
    revisionsApplyButtonDialogCancelButton: "إلغاء الأمر",
    revisionsApplyButtonDialogOKButton: "العودة إلى الحالة السابقة",
    revisionsApplyButtonDialogText: "تأكيد العودة إلى الحالة السابقة",
    revisionsApplyButtonDialogTitle: "تأكيد العودة إلى الحالة السابقة",
    revisionsApplyButtonText: "العودة إلى الحالة السابقة",
    revisionsApplyButtonTitle: "العودة إلى الحالة السابقة",
    revisionsApplyDialogContent: "سيؤدي ذلك إلى استبدال المحتوى الحالي مع مراجعة مختارة.<br>المحتوى الحالي سوف تضاف كمراجعة، وسوف تظهر في قائمة تنقيحات لهذه الكتلة.",
    revisionsButtonCurrent: "الحالي",
    revisionsButtonViewDiffText: "الاختلافات",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "التي تم إنشاؤها",
    revisionsDialogCancelButton: "إلغاء الأمر",
    revisionsDialogTitle: "عرض محتوى التنقيحات",
    revisionsDiffButtonDialogCancelButton: "قم بإغلاق",
    revisionsDiffButtonDialogTitle: "عرض الاختلافات",
    revisionsDiffButtonText: "عرض الاختلافات",
    revisionsDiffButtonTitle: "عرض الاختلافات",
    revisionsLoading: "تحميل المراجعات...",
    revisionsNone: "لا تنقيحات لهذا العنصر",
    revisionsPreviewButtonText: "معاينة",
    revisionsPreviewButtonTitle: "معاينة",
    revisionsText: "التنقيحات",
    revisionsTextEmpty: "لا تنقيحات",
    revisionsTitle: "",
    rfmClose: "قم بإغلاق",
    rfmContinue: "مواصلة",
    rfmDelete: "حذف",
    rfmDownload: "تحميل",
    rfmFileActions: "الإجراءات",
    rfmFileModificationTime: "تعديل",
    rfmFileName: "الاسم",
    rfmFileSize: "الحجم",
    rfmFileType: "نوع",
    rfmFilteredTotal: "عرض {{start}} {{end}} {{filteredTotal}} ملفات",
    rfmFirst: "الأولى",
    rfmHeadingDirectories: "الدلائل",
    rfmHeadingSearch: "البحث",
    rfmHeadingTags: "العلامات",
    rfmHeadingUpload: "تحميل",
    rfmInsert: "إدراج",
    rfmLast: "آخر صورة",
    rfmSearch: "الذهاب",
    rfmTagDocument: "الوثيقة",
    rfmTagImage: "الصورة",
    rfmTotal: "، التي تمت تصفيتها من {{total}}",
    rfmUpload: "تحميل",
    rfmUploadBrowse: "تصفح",
    rfmUploadDrop: "إسقاط الملفات هنا",
    rfmUploadFileRemove: "إزالة",
    rfmUploadOr: "أو",
    rfmView: "طريقة العرض",
    saveJsonFail: "فشل في حفظ block(s) المحتوى {{failed}}",
    saveJsonSaved: "حفظ {{saved}} block(s) المحتوى بنجاح.",
    saveNotConfigured: "حفظ لم يتم تكوينه، أو معطل.",
    saveRestFail: "فشل في حفظ block(s) المحتوى {{failed}}.",
    saveRestPartial: "حفظ من كتل محتوى {{saved}} {{failed}}.",
    saveRestSaved: "حفظ {{saved}} block(s) المحتوى بنجاح.",
    saveTitle: "حفظ المحتوى",
    snippetMenuTitle: "قصاصات",
    specialCharactersArrows: "سهام",
    specialCharactersDialogOKButton: "موافق",
    specialCharactersDialogTitle: "إدراج أحرف خاصة",
    specialCharactersGreekAlphabet: "الأبجدية اليونانية",
    specialCharactersHelp: "انقر فوق حرف خاص لإضافته. انقر فوق \"موافق\" عندما يتم إغلاق مربع الحوار هذا",
    specialCharactersMathematics: "الرياضيات",
    specialCharactersSymbols: "رموز",
    specialCharactersTitle: "إدراج حرف خاص",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} أحرف أكثر من الحد",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} الأحرف المتبقية",
    statisticsButtonCharacters: "أحرف {{characters}}",
    statisticsDialogCharactersOverLimit: "أحرف {{characters}}، {{charactersRemaining}} أكثر من الحد الموصى به",
    statisticsDialogCharactersRemaining: "أحرف {{characters}}، {{charactersRemaining}} المتبقية",
    statisticsDialogNotTruncated: "سوف لا يتم اقتطاع محتوى",
    statisticsDialogOKButton: "موافق",
    statisticsDialogSentence: "الجملة {{sentences}}",
    statisticsDialogSentences: "الجمل {{sentences}}",
    statisticsDialogTitle: "إحصائيات المحتوى",
    statisticsDialogTruncated: "المحتوى يحتوي على أكثر من حرف {{limit}}، وقد يتم اقتطاعها",
    statisticsDialogWord: "كلمة {{words}}",
    statisticsDialogWords: "{{words}} كلمات",
    statisticsTitle: "انقر فوق لعرض الإحصائيات",
    tableCreateTitle: "إنشاء جدول",
    tableDeleteColumnTitle: "حذف عمود الجدول",
    tableDeleteRowTitle: "حذف صف الجدول",
    tableInsertColumnTitle: "إدراج عمود جدول",
    tableInsertRowTitle: "إدراج صف جدول",
    tableMergeCellsTitle: "دمج خلايا الجدول",
    tableSplitCellsTitle: "تقسيم خلايا الجدول",
    tagMenuTagAddress: "عنوان",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "العنوان 1",
    tagMenuTagH2: "العنوان 2",
    tagMenuTagH3: "العنوان 3",
    tagMenuTagH4: "العنوان 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "الفقرة",
    tagMenuTagPre: "تمت تهيئتها مسبقاً",
    tagMenuTitle: "تغيير نمط عنصر",
    tagTreeElementLink: "حدد عنصر {{element}}",
    tagTreeElementTitle: "انقر فوق لتحديد محتويات العنصر \"{{element}}\"",
    tagTreeRoot: "الجذر",
    tagTreeRootLink: "حدد كافة المحتويات القابلة للتحرير",
    tagTreeRootTitle: "انقر لتحديد كافة المحتويات القابلة للتحرير",
    textBlockQuoteTitle: "اقتباس كتلة",
    textBoldTitle: "غامق",
    textItalicTitle: "مائل",
    textSizeDecreaseTitle: "إنقاص حجم النص",
    textSizeIncreaseTitle: "زيادة حجم النص",
    textStrikeTitle: "الإضراب من خلال",
    textSubTitle: "البرنامج النصي الفرعية",
    textSuperTitle: "البرنامج النصي فائقة",
    textUnderlineTitle: "تسطير",
    unsavedEditWarningText: "هناك تغييرات غير محفوظة في هذه الصفحة",
    viewSourceDialogCancelButton: "قم بإغلاق",
    viewSourceDialogOKButton: "تطبيق التعليمات البرمجية المصدر",
    viewSourceDialogTitle: "رمز مصدر المحتوى",
    viewSourceTitle: "عرض\/تحرير التعليمات البرمجية المصدر"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ar.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/bg.js
/**
 * @fileOverview Bulgarian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('bg', 'Български', {
    alignCenterTitle: "Подравните текста спрямо центъра",
    alignJustifyTitle: "Подравняване на текста оправдават",
    alignLeftTitle: "Подравняване на текста вляво",
    alignRightTitle: "Подравняване на текста вдясно",
    cancelDialogCancelButton: "Продължаване на редактирането",
    cancelDialogContent: "Наистина ли искате да отмените редактирането? Всички промени ще бъдат загубени!",
    cancelDialogOKButton: "Отмени редактирането",
    cancelDialogTitle: "Отмени редактирането",
    cancelTitle: "Отмени редактирането",
    classMenuTitle: "Избор на стил",
    clearFormattingTitle: "Изчисти форматирането",
    clickButtonToEditText: "Редактиране",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Автоматично",
    colorMenuBasicBlack: "Черно",
    colorMenuBasicBlue: "Син",
    colorMenuBasicGreen: "Грийн",
    colorMenuBasicGrey: "Сив",
    colorMenuBasicOrange: "Ориндж",
    colorMenuBasicPurple: "Лилаво",
    colorMenuBasicRed: "Червен",
    colorMenuBasicTitle: "Промяна на цвета на текста",
    colorMenuBasicWhite: "Бяло",
    dockToElementTitle: "Лапад\/откачване редактор на елемент",
    dockToScreenTitle: "Лапад\/откачване редактор на екрана",
    embedDialogCancelButton: "Отказ",
    embedDialogOKButton: "Вграждане на обект",
    embedDialogTabCode: "Код за вграждане",
    embedDialogTabCodeContent: "Поставете кода за вграждане в областта за текст по-долу:",
    embedDialogTabPreview: "Визуализация",
    embedDialogTabPreviewContent: "Визуализация на вашия вграден обект е показана по-долу:",
    embedDialogTitle: "Вграждане на обект",
    embedTitle: "Вграждане на обект",
    errorUINoName: "Потребителски интерфейс \"{{ui}}\" е невалиден (трябва да има име на свойство)",
    errorUINotObject: "Потребителски интерфейс \"{{ui}}\" е невалиден (трябва да бъде обект)",
    errorUIOverride: "Потребителски интерфейс \"{{name}}\" вече е регистриран и ще бъде заместен",
    fileManagerDialogTitle: "Файлов мениджър",
    fileManagerTitle: "Файлов мениджър",
    floatLeftTitle: "Подравняване на изображение отляво",
    floatNoneTitle: "Премахнете изображението подравняване",
    floatRightTitle: "Подравняване на изображение отдясно",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Комикс без",
    fontFamilyMenuFontCourier: "Куриер нов",
    fontFamilyMenuFontDefault: "Шрифт по подразбиране",
    fontFamilyMenuFontGeorgia: "Грузия",
    fontFamilyMenuFontImpact: "Въздействие",
    fontFamilyMenuFontPalatino: "Палатин",
    fontFamilyMenuFontTimes: "Време нов римски",
    fontFamilyMenuTitle: "Изберете вашия шрифт",
    guidesTitle: "Показване на елемент ръководства",
    historyRedoTitle: "Върни",
    historyUndoTitle: "Отмени",
    hrCreateTitle: "Вмъкни хоризонтална линийка",
    imageResizeButtonDialogCancelButton: "Отказ",
    imageResizeButtonDialogHeight: "Височина на изображението",
    imageResizeButtonDialogHeightPlaceHolder: "Височина",
    imageResizeButtonDialogOKButton: "Преоразмеряване",
    imageResizeButtonDialogTitle: "Преоразмеряване на изображение",
    imageResizeButtonDialogWidth: "Ширина на изображението",
    imageResizeButtonDialogWidthPlaceHolder: "Ширина",
    imageResizeButtonText: "Преоразмеряване на изображение",
    insertFileDialogCancelButton: "Отказ",
    insertFileDialogOKButton: "Вмъкване на файл",
    insertFileNameLabel: "Име на файла",
    insertFileNamePlaceHolder: "Име на файл...",
    insertFileTitle: "Вмъкване на файл",
    insertFileURLLabel: "Файл URL",
    insertFileURLPlaceHolder: "Файл URL...",
    languageMenuTitle: "Промяна на езика",
    linkCreateDialogCancelButton: "Отказ",
    linkCreateDialogMenuHeader: "Изберете тип на връзка",
    linkCreateDialogOKButton: "Вмъкване на връзка",
    linkCreateDialogTitle: "Вмъкване на връзка",
    linkCreateTitle: "Вмъкване на връзка",
    linkRemoveTitle: "Премахни връзката",
    linkTypeDocumentHeader: "Връзка към документ или друг файл",
    linkTypeDocumentInfo: "<h2>Не сте сигурни какво да поставите в полето по-горе?<\/h2><ol>    <li>Осигуряване на файла е бил качен на вашия сайт.<\/li>    <li>Отворете качения файл във вашия браузър.<\/li>    <li>Копирайте URL на файла от адресната лента на браузъра си и да го поставите в полето по-горе.<\/li><\/ol>",
    linkTypeDocumentLabel: "Документ или друг файл",
    linkTypeDocumentLocationLabel: "Местоположение:",
    linkTypeDocumentLocationPlaceHolder: "Въведете URL адрес",
    linkTypeDocumentNewWindowHeader: "Нов прозорец",
    linkTypeDocumentNewWindowLabel: "Отметнете това квадратче, за да е отворил файла в нов прозорец.",
    linkTypeEmailHeader: "Връзка към имейл адрес",
    linkTypeEmailLabel: "Имейл адрес",
    linkTypeEmailSubjectLabel: "Относно (по избор):",
    linkTypeEmailSubjectPlaceHolder: "Въведете въпрос",
    linkTypeEmailToLabel: "Имейл:",
    linkTypeEmailToPlaceHolder: "Въведете имейл адрес",
    linkTypeExternalHeader: "Връзка към страница на друг уеб сайт",
    linkTypeExternalInfo: "<h2>Не сте сигурни какво да поставите в полето по-горе?<\/h2><ol>    <li>Намерите на страницата уеб искате да се свържете.<\/li>    <li>Копирайте уеб адреса от адресната лента на браузъра си и да го поставите в полето по-горе.<\/li><\/ol>",
    linkTypeExternalLabel: "Страница на друг уеб сайт",
    linkTypeExternalLocationLabel: "Местоположение:",
    linkTypeExternalLocationPlaceHolder: "Въведете URL адрес",
    linkTypeExternalNewWindowHeader: "Нов прозорец",
    linkTypeExternalNewWindowLabel: "Отметнете това квадратче, за да има на връзката отвори в нов прозорец.",
    linkTypeInternalHeader: "Връзка към страницата на този сайт",
    linkTypeInternalInfo: "<h2>Не сте сигурни какво да поставите в полето по-горе?<\/h2><ol>    <li>Намерите на страницата на този сайт връзка към.<\/li>    <li>Копирайте уеб адреса от вашия браузър адресната лента, с изключение на \"{{domain}}\" и да го поставите в полето по-горе.<\/li><\/ol>",
    linkTypeInternalLabel: "Страница на този сайт",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Въведете URI",
    linkTypeInternalNewWindowHeader: "Нов прозорец",
    linkTypeInternalNewWindowLabel: "Отметнете това квадратче, за да има на връзката отвори в нов прозорец.",
    listOrderedTitle: "Подреден списък",
    listUnorderedTitle: "Неподреден списък",
    logoTitle: "Научете повече за Raptor WYSIWYG редактор",
    loremIpsumTitle: "Вмъкване на текст за тестване",
    navigateAway: "\nИма незаписани промени на тази страница. \nАко напуснете тази страница Вие ще загубите вашите незаписани промени",
    pasteDialogCancelButton: "Отказ",
    pasteDialogFormattedCleaned: "Форматиран &amp; почиства",
    pasteDialogFormattedUnclean: "Форматиран нечисти",
    pasteDialogOKButton: "Вмъкване",
    pasteDialogPlain: "Обикновен текст",
    pasteDialogSource: "Изходен код",
    pasteDialogTitle: "Паста",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Неуспешно извличане на ревизии",
    revisionsApplyButtonDialogCancelButton: "Отказ",
    revisionsApplyButtonDialogOKButton: "Намаление на цените",
    revisionsApplyButtonDialogText: "Потвърждение на възстановяването",
    revisionsApplyButtonDialogTitle: "Потвърждение на възстановяването",
    revisionsApplyButtonText: "Намаление на цените",
    revisionsApplyButtonTitle: "Намаление на цените",
    revisionsApplyDialogContent: "Това ще замени текущото съдържание с избраната.<br>Текущото съдържание ще бъдат добавени като преразглеждане и ще се вижда в списъка на корекциите за този блок.",
    revisionsButtonCurrent: "Ток",
    revisionsButtonViewDiffText: "Разлики",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Създаден",
    revisionsDialogCancelButton: "Отказ",
    revisionsDialogTitle: "Преглед съдържание ревизии",
    revisionsDiffButtonDialogCancelButton: "Затвори",
    revisionsDiffButtonDialogTitle: "Изглед разлики",
    revisionsDiffButtonText: "Изглед разлики",
    revisionsDiffButtonTitle: "Изглед разлики",
    revisionsLoading: "Зареждане на ревизии...",
    revisionsNone: "Няма ревизии за този елемент",
    revisionsPreviewButtonText: "Визуализация",
    revisionsPreviewButtonTitle: "Визуализация",
    revisionsText: "Ревизии",
    revisionsTextEmpty: "Не корекции",
    revisionsTitle: "",
    rfmClose: "Затвори",
    rfmContinue: "Продължи",
    rfmDelete: "Изтриване",
    rfmDownload: "Изтегляне",
    rfmFileActions: "Действия",
    rfmFileModificationTime: "Модифицирани",
    rfmFileName: "Име",
    rfmFileSize: "Размер",
    rfmFileType: "Тип",
    rfmFilteredTotal: "Показване {{start}} до {{end}} {{filteredTotal}} файлове",
    rfmFirst: "Първо",
    rfmHeadingDirectories: "Директории",
    rfmHeadingSearch: "Търсене",
    rfmHeadingTags: "Тагове",
    rfmHeadingUpload: "Качване",
    rfmInsert: "Вмъкване",
    rfmLast: "Последно",
    rfmSearch: "Отидете",
    rfmTagDocument: "Документ",
    rfmTagImage: "Изображение",
    rfmTotal: ", филтрирани от {{total}}",
    rfmUpload: "Качване",
    rfmUploadBrowse: "Преглед",
    rfmUploadDrop: "Пуснете файлове тук",
    rfmUploadFileRemove: "Премахване на",
    rfmUploadOr: "или",
    rfmView: "Изглед",
    saveJsonFail: "Неуспешно записване на {{failed}} съдържание block(s)",
    saveJsonSaved: "Настил {{saved}} съдържание block(s).",
    saveNotConfigured: "Запиши не е конфигуриран, или е забранен.",
    saveRestFail: "Неуспешно записване на {{failed}} съдържание block(s).",
    saveRestPartial: "Записан {{saved}} на {{failed}} съдържание блокове.",
    saveRestSaved: "Настил {{saved}} съдържание block(s).",
    saveTitle: "Запишете съдържание",
    snippetMenuTitle: "Откъси",
    specialCharactersArrows: "Стрелките",
    specialCharactersDialogOKButton: "OK",
    specialCharactersDialogTitle: "Вмъкване на специални знаци",
    specialCharactersGreekAlphabet: "Гръцката азбука",
    specialCharactersHelp: "Щракнете върху специалния знак, за да го добавите. Щракнете върху \"OK\" когато сте готови да затворите този диалогов прозорец",
    specialCharactersMathematics: "Математика",
    specialCharactersSymbols: "Символи",
    specialCharactersTitle: "Вмъкване на специален знак",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} знаците над ограничението",
    statisticsButtonCharacterRemaining: "оставащи знаци на {{charactersRemaining}}",
    statisticsButtonCharacters: "{{characters}} знака",
    statisticsDialogCharactersOverLimit: "знака {{characters}}, {{charactersRemaining}} над препоръчваната граница",
    statisticsDialogCharactersRemaining: "{{characters}}, {{charactersRemaining}} оставащи знаци",
    statisticsDialogNotTruncated: "Съдържанието не ще бъдат орязани",
    statisticsDialogOKButton: "OK",
    statisticsDialogSentence: "{{sentences}} изречение",
    statisticsDialogSentences: "{{sentences}} изречения",
    statisticsDialogTitle: "Съдържание статистика",
    statisticsDialogTruncated: "Съдържанието съдържа повече от {{limit}} знака и може да бъде изрязана",
    statisticsDialogWord: "{{words}} дума",
    statisticsDialogWords: "{{words}} думите",
    statisticsTitle: "Щракнете, за да видите статистика",
    tableCreateTitle: "Създаване на таблица",
    tableDeleteColumnTitle: "Изтриване на колона от таблица",
    tableDeleteRowTitle: "Изтриване на ред от таблица",
    tableInsertColumnTitle: "Вмъкни колона на таблица",
    tableInsertRowTitle: "Вмъкване на ред в таблица",
    tableMergeCellsTitle: "Обединяване на клетки от таблица",
    tableSplitCellsTitle: "Разделяне на клетки от таблица",
    tagMenuTagAddress: "Адрес",
    tagMenuTagDiv: "DIV",
    tagMenuTagH1: "Заглавие 1",
    tagMenuTagH2: "Заглавие 2",
    tagMenuTagH3: "Заглавие 3",
    tagMenuTagH4: "Функция 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Параграф",
    tagMenuTagPre: "Предварително форматиран",
    tagMenuTitle: "Промяна на стила на елемент",
    tagTreeElementLink: "Изберете елемент на {{element}}",
    tagTreeElementTitle: "Щракнете, за да изберете съдържанието на елемент \"{{element}}\"",
    tagTreeRoot: "корен",
    tagTreeRootLink: "Изберете всички редактира съдържание",
    tagTreeRootTitle: "Щракнете за да изберете всички редактира съдържание",
    textBlockQuoteTitle: "Блоков цитат",
    textBoldTitle: "Получер",
    textItalicTitle: "Курсив",
    textSizeDecreaseTitle: "Намаляване на размера на текста",
    textSizeIncreaseTitle: "Увеличи размера на текста",
    textStrikeTitle: "Зачеркнато",
    textSubTitle: "Под-скрипт",
    textSuperTitle: "Супер скрипт",
    textUnderlineTitle: "Подчертаване",
    unsavedEditWarningText: "Има незаписани промени на тази страница",
    viewSourceDialogCancelButton: "Затвори",
    viewSourceDialogOKButton: "Прилага изходен код",
    viewSourceDialogTitle: "Код на източник на съдържание",
    viewSourceTitle: "Преглед\/редактиране на изходния код"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/bg.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ca.js
/**
 * @fileOverview Catalan strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ca', 'Català', {
    alignCenterTitle: "Alinea el text al centre",
    alignJustifyTitle: "Alinea el text justificar",
    alignLeftTitle: "Alinea el text d'esquerra",
    alignRightTitle: "Alinea el text a la dreta",
    cancelDialogCancelButton: "Continuar editant-lo",
    cancelDialogContent: "Esteu segur que voleu cancel·lar edició? Tots els canvis es perdran!",
    cancelDialogOKButton: "Cancel·lació d'edició",
    cancelDialogTitle: "Cancel·lació d'edició",
    cancelTitle: "Cancel·lació d'edició",
    classMenuTitle: "Selector d'estil",
    clearFormattingTitle: "Suprimeix el format",
    clickButtonToEditText: "Editar",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automàtica",
    colorMenuBasicBlack: "Negre",
    colorMenuBasicBlue: "Blau",
    colorMenuBasicGreen: "Verd",
    colorMenuBasicGrey: "Gris",
    colorMenuBasicOrange: "Taronja",
    colorMenuBasicPurple: "Porpra",
    colorMenuBasicRed: "Vermell",
    colorMenuBasicTitle: "Canviar el color del text",
    colorMenuBasicWhite: "Blanc",
    dockToElementTitle: "Desarrama moll\/editor d'element",
    dockToScreenTitle: "Moll\/desamarri editor per pantalla",
    embedDialogCancelButton: "Cancel·la",
    embedDialogOKButton: "Incrustar objecte",
    embedDialogTabCode: "Codi d'inserció",
    embedDialogTabCodeContent: "Enganxar el seu codi d'inserció a l'àrea de text següent:",
    embedDialogTabPreview: "Visualització prèvia",
    embedDialogTabPreviewContent: "Es mostra una vista prèvia del seu objecte incrustat sota:",
    embedDialogTitle: "Incrustar objecte",
    embedTitle: "Incrustar objecte",
    errorUINoName: "UI \"{{ui}}\" no és vàlid (ha de tenir una propietat name)",
    errorUINotObject: "UI \"{{ui}}\" no és vàlid (ha de ser un objecte)",
    errorUIOverride: "UI \"{{name}}\" ja ha estat registrat i serà sobreescrit",
    fileManagerDialogTitle: "Director d'arxiu",
    fileManagerTitle: "Director d'arxiu",
    floatLeftTitle: "Alinea la imatge a l'esquerra",
    floatNoneTitle: "Treure imatge alinear",
    floatRightTitle: "Alinea la imatge a la dreta",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Còmic sense",
    fontFamilyMenuFontCourier: "Nova missatgeria",
    fontFamilyMenuFontDefault: "Font d'omissió",
    fontFamilyMenuFontGeorgia: "Geòrgia",
    fontFamilyMenuFontImpact: "Impacte",
    fontFamilyMenuFontPalatino: "Palatí",
    fontFamilyMenuFontTimes: "Temps romà nou",
    fontFamilyMenuTitle: "Tria el teu tipus de lletra",
    guidesTitle: "Guies mostren element",
    historyRedoTitle: "Refés",
    historyUndoTitle: "Desfés",
    hrCreateTitle: "Insereix regle horitzontal",
    imageResizeButtonDialogCancelButton: "Cancel·la",
    imageResizeButtonDialogHeight: "Alçada de la imatge",
    imageResizeButtonDialogHeightPlaceHolder: "Alçada",
    imageResizeButtonDialogOKButton: "Remida",
    imageResizeButtonDialogTitle: "Redimensioni imatge",
    imageResizeButtonDialogWidth: "Amplada d'imatge",
    imageResizeButtonDialogWidthPlaceHolder: "Amplada",
    imageResizeButtonText: "Redimensioni imatge",
    insertFileDialogCancelButton: "Cancel·la",
    insertFileDialogOKButton: "Insereix un fitxer",
    insertFileNameLabel: "Nom d'arxiu",
    insertFileNamePlaceHolder: "Nom del fitxer...",
    insertFileTitle: "Insereix un fitxer",
    insertFileURLLabel: "Arxiu d'URL",
    insertFileURLPlaceHolder: "URL del fitxer...",
    languageMenuTitle: "Canviar l'idioma",
    linkCreateDialogCancelButton: "Cancel·la",
    linkCreateDialogMenuHeader: "Trieu un tipus d'enllaç",
    linkCreateDialogOKButton: "Insereix enllaç",
    linkCreateDialogTitle: "Insereix enllaç",
    linkCreateTitle: "Insereix enllaç",
    linkRemoveTitle: "Treure enllaç",
    linkTypeDocumentHeader: "Enllaç a un document o altre arxiu",
    linkTypeDocumentInfo: "<h2>No segur què posar en el quadre anterior?<\/h2><ol>    <li>Assegureu-vos que el fitxer s'ha pujat al seu lloc web.<\/li>    <li>Obri l'arxiu carregat en el vostre navegador.<\/li>    <li>Copiï l'URL de l'arxiu de la barra d'adreces del seu navegador i enganxar-lo en el quadre anterior.<\/li><\/ol>",
    linkTypeDocumentLabel: "Document o altre arxiu",
    linkTypeDocumentLocationLabel: "Ubicació:",
    linkTypeDocumentLocationPlaceHolder: "Introduïu un URL",
    linkTypeDocumentNewWindowHeader: "Finestra nova",
    linkTypeDocumentNewWindowLabel: "Activeu aquesta casella per té l'arxiu obert en un finestra\/tabulador de navegador nou.",
    linkTypeEmailHeader: "Enllaçar a una adreça de correu electrònic",
    linkTypeEmailLabel: "Adreça de correu electrònic",
    linkTypeEmailSubjectLabel: "Assumpte (opcional):",
    linkTypeEmailSubjectPlaceHolder: "Introduir el tema",
    linkTypeEmailToLabel: "Correu electrònic:",
    linkTypeEmailToPlaceHolder: "Introduïu l'adreça de correu electrònic",
    linkTypeExternalHeader: "Enllaç a una pàgina a una altra pàgina web",
    linkTypeExternalInfo: "<h2>No segur què posar en el quadre anterior?<\/h2><ol>    <li>Trobar la pàgina a la web que voleu enllaçar.<\/li>    <li>Copiar l'adreça web des de la barra d'adreces del seu navegador i enganxar-lo en el quadre anterior.<\/li><\/ol>",
    linkTypeExternalLabel: "Pàgina en un altre lloc web",
    linkTypeExternalLocationLabel: "Ubicació:",
    linkTypeExternalLocationPlaceHolder: "Introduïu un URL",
    linkTypeExternalNewWindowHeader: "Finestra nova",
    linkTypeExternalNewWindowLabel: "Activeu aquesta casella per l'enllaç obre en un finestra\/tabulador de navegador nou.",
    linkTypeInternalHeader: "Enllaç a una pàgina en aquest lloc web",
    linkTypeInternalInfo: "<h2>No segur què posar en el quadre anterior?<\/h2><ol>    <li>Trobar la pàgina en aquest enllaç de lloc per.<\/li>    <li>Copiar l'adreça web de barra, excloent \"{{domain}}\" d'adreces del seu navegador i enganxar-lo en el quadre anterior.<\/li><\/ol>",
    linkTypeInternalLabel: "Pàgina en aquest lloc web",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Introduïu un URI",
    linkTypeInternalNewWindowHeader: "Finestra nova",
    linkTypeInternalNewWindowLabel: "Activeu aquesta casella per l'enllaç obre en un finestra\/tabulador de navegador nou.",
    listOrderedTitle: "Llista ordenada",
    listUnorderedTitle: "Llista sense ordenar",
    logoTitle: "Més informació sobre l'Editor WYSIWYG de Raptor",
    loremIpsumTitle: "Introduïu un text per a les proves",
    navigateAway: "\nHi ha els canvis no desats en aquesta pàgina. \nSi abandoneu aquesta pàgina perdreu els canvis no desats",
    pasteDialogCancelButton: "Cancel·la",
    pasteDialogFormattedCleaned: "Format &amp; netejat",
    pasteDialogFormattedUnclean: "Formatat brut",
    pasteDialogOKButton: "Insereix",
    pasteDialogPlain: "Text sense format",
    pasteDialogSource: "Codi font",
    pasteDialogTitle: "Pasta",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "No ha pogut recuperar les revisions",
    revisionsApplyButtonDialogCancelButton: "Cancel·la",
    revisionsApplyButtonDialogOKButton: "Reversió",
    revisionsApplyButtonDialogText: "Confirmació de la reversió",
    revisionsApplyButtonDialogTitle: "Confirmació de la reversió",
    revisionsApplyButtonText: "Reversió",
    revisionsApplyButtonTitle: "Reversió",
    revisionsApplyDialogContent: "Això substituirà els actuals continguts amb la revisió seleccionat.<br>El contingut actual s'afegiran com a revisió i serà visible en la llista de les revisions d'aquest bloc.",
    revisionsButtonCurrent: "Corrent",
    revisionsButtonViewDiffText: "Diferències",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Creada",
    revisionsDialogCancelButton: "Cancel·la",
    revisionsDialogTitle: "Revisions de contingut de vista",
    revisionsDiffButtonDialogCancelButton: "Tancar",
    revisionsDiffButtonDialogTitle: "Diferències de visualització",
    revisionsDiffButtonText: "Diferències de visualització",
    revisionsDiffButtonTitle: "Diferències de visualització",
    revisionsLoading: "Revisions de càrrega...",
    revisionsNone: "Sense les revisions d'aquest element",
    revisionsPreviewButtonText: "Visualització prèvia",
    revisionsPreviewButtonTitle: "Visualització prèvia",
    revisionsText: "Revisions",
    revisionsTextEmpty: "No Revisions",
    revisionsTitle: "",
    rfmClose: "Tancar",
    rfmContinue: "Continuar",
    rfmDelete: "Suprimir",
    rfmDownload: "Descarregar",
    rfmFileActions: "Accions",
    rfmFileModificationTime: "Modificat",
    rfmFileName: "Nom",
    rfmFileSize: "Mida",
    rfmFileType: "Tipus",
    rfmFilteredTotal: "S'estan mostrant {{start}} a {{end}} {{filteredTotal}} arxius",
    rfmFirst: "Primer",
    rfmHeadingDirectories: "Directoris",
    rfmHeadingSearch: "Cerca",
    rfmHeadingTags: "Etiquetes",
    rfmHeadingUpload: "Pujar",
    rfmInsert: "Insereix",
    rfmLast: "Darrera",
    rfmSearch: "Anar",
    rfmTagDocument: "Document",
    rfmTagImage: "Imatge",
    rfmTotal: ", filtren de {{total}}",
    rfmUpload: "Pujar",
    rfmUploadBrowse: "Navegar",
    rfmUploadDrop: "Arxius de gota aquí",
    rfmUploadFileRemove: "Treure",
    rfmUploadOr: "o",
    rfmView: "Veure",
    saveJsonFail: "No ha pogut salvar block(s) contingut {{failed}}",
    saveJsonSaved: "{{saved}} block(s) contingut salvat correctament.",
    saveNotConfigured: "Desa no ha estat configurat, o s'impossibilita.",
    saveRestFail: "No ha pogut salvar block(s) contingut {{failed}}.",
    saveRestPartial: "Salvat {{saved}} de blocs de contingut {{failed}}.",
    saveRestSaved: "{{saved}} block(s) contingut salvat correctament.",
    saveTitle: "Estalviar contingut",
    snippetMenuTitle: "Fragments",
    specialCharactersArrows: "Fletxes",
    specialCharactersDialogOKButton: "CORRECTE",
    specialCharactersDialogTitle: "Introduir caràcters especials",
    specialCharactersGreekAlphabet: "Alfabet grec",
    specialCharactersHelp: "Feu clic a un caràcter especial per afegir-lo. Clic \"Correcte\" quan fet per tancar aquest diàleg",
    specialCharactersMathematics: "Matemàtiques",
    specialCharactersSymbols: "Símbols",
    specialCharactersTitle: "Insereix un caràcter especial",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} caràcters ultrapassa el límit",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} caràcters restants",
    statisticsButtonCharacters: "{{characters}} personatges",
    statisticsDialogCharactersOverLimit: "personatges {{characters}}, {{charactersRemaining}} sobre el límit recomanat",
    statisticsDialogCharactersRemaining: "caràcters de {{characters}}, {{charactersRemaining}} restants",
    statisticsDialogNotTruncated: "Contingut no apareixerà truncat",
    statisticsDialogOKButton: "Correcte",
    statisticsDialogSentence: "sentència de {{sentences}}",
    statisticsDialogSentences: "frases de {{sentences}}",
    statisticsDialogTitle: "Estadístiques de contingut",
    statisticsDialogTruncated: "Contingut conté més de personatges {{limit}} i podria truncar",
    statisticsDialogWord: "paraula {{words}}",
    statisticsDialogWords: "paraules {{words}}",
    statisticsTitle: "Feu clic per veure estadístiques",
    tableCreateTitle: "Crear taula",
    tableDeleteColumnTitle: "Suprimeix la columna de la taula",
    tableDeleteRowTitle: "Suprimeix la fila de la taula",
    tableInsertColumnTitle: "Insereix una columna de la taula",
    tableInsertRowTitle: "Insereix una fila de la taula",
    tableMergeCellsTitle: "Fusionar cel·les",
    tableSplitCellsTitle: "Dividir cel·les de la taula",
    tagMenuTagAddress: "Adreça",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Epígraf 1",
    tagMenuTagH2: "Epígraf 2",
    tagMenuTagH3: "Epígraf 3",
    tagMenuTagH4: "Epígraf 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Paràgraf",
    tagMenuTagPre: "Pre-formatats",
    tagMenuTitle: "Element de canvi estil",
    tagTreeElementLink: "Seleccioneu l'element {{element}}",
    tagTreeElementTitle: "Feu clic per seleccionar els continguts de l'element \"{{element}}\"",
    tagTreeRoot: "arrel",
    tagTreeRootLink: "Seleccioneu tot el contingut editable",
    tagTreeRootTitle: "Feu clic per seleccionar tot el contingut editable",
    textBlockQuoteTitle: "Cita del bloc",
    textBoldTitle: "Negreta",
    textItalicTitle: "Cursiva",
    textSizeDecreaseTitle: "Disminueix la mida del text",
    textSizeIncreaseTitle: "Augmentar la mida del text",
    textStrikeTitle: "Vaga a través",
    textSubTitle: "Sub-escriptura de",
    textSuperTitle: "Super-escriptura de",
    textUnderlineTitle: "Subratllat",
    unsavedEditWarningText: "Hi ha els canvis no desats en aquesta pàgina",
    viewSourceDialogCancelButton: "Tancar",
    viewSourceDialogOKButton: "Aplicar codi font",
    viewSourceDialogTitle: "Codi font contingut",
    viewSourceTitle: "Vista\/editar codi font"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ca.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/cs.js
/**
 * @fileOverview Czech strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('cs', 'Čeština', {
    alignCenterTitle: "Zarovnání textu na střed",
    alignJustifyTitle: "Zarovnat text zarovnat",
    alignLeftTitle: "Zarovnat text doleva",
    alignRightTitle: "Zarovnat text doprava",
    cancelDialogCancelButton: "Pokračovat v úpravách",
    cancelDialogContent: "Jste si jisti, že chcete zrušit úpravy? Všechny změny budou ztracena!",
    cancelDialogOKButton: "Zrušit úpravy",
    cancelDialogTitle: "Zrušit úpravy",
    cancelTitle: "Zrušit úpravy",
    classMenuTitle: "Výběr stylu",
    clearFormattingTitle: "Vymazat formátování",
    clickButtonToEditText: "Úpravy",
    clickButtonToEditTitle: null,
    colorMenuBasicAutomatic: "Automatický",
    colorMenuBasicBlack: "Černá",
    colorMenuBasicBlue: "Modrá",
    colorMenuBasicGreen: "Zelená",
    colorMenuBasicGrey: "Šedá",
    colorMenuBasicOrange: "Oranžová",
    colorMenuBasicPurple: "Fialová",
    colorMenuBasicRed: "Červená",
    colorMenuBasicTitle: "Změnit barvu textu",
    colorMenuBasicWhite: "Bílá",
    dockToElementTitle: "Doku\/uvolnit editor prvek",
    dockToScreenTitle: "Doku\/uvolnit editor na obrazovce",
    embedDialogCancelButton: "Storno",
    embedDialogOKButton: "Vložit objekt",
    embedDialogTabCode: "Kód pro vložení",
    embedDialogTabCodeContent: "Do oblasti textu vložte kód pro vložení:",
    embedDialogTabPreview: "Náhled",
    embedDialogTabPreviewContent: "Níže je zobrazen náhled vloženého objektu:",
    embedDialogTitle: "Vložit objekt",
    embedTitle: "Vložit objekt",
    errorUINoName: "UI \"{{ui}}\" je neplatná (musí mít vlastnost název)",
    errorUINotObject: "UI \"{{ui}}\" je neplatná (musí být objekt)",
    errorUIOverride: "UI \"{{name}}\" již byla registrována a budou přepsány",
    fileManagerDialogTitle: "Správce souborů",
    fileManagerTitle: "Správce souborů",
    floatLeftTitle: "Zarovnat obrázek nalevo",
    floatNoneTitle: "Odstranit obrázek zarovnat",
    floatRightTitle: "Zarovnat obrázek vpravo",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Komiks bez",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Výchozí písmo",
    fontFamilyMenuFontGeorgia: "Gruzie",
    fontFamilyMenuFontImpact: "Dopad",
    fontFamilyMenuFontPalatino: "Palatin",
    fontFamilyMenuFontTimes: "Shlédnuto New Roman",
    fontFamilyMenuTitle: "Zvolte písmo",
    guidesTitle: "Zobrazit vodítka prvek",
    historyRedoTitle: "Znovu:",
    historyUndoTitle: "Zpět:",
    hrCreateTitle: "Vložit vodorovnou čáru",
    imageResizeButtonDialogCancelButton: "Storno",
    imageResizeButtonDialogHeight: "Výška obrázku",
    imageResizeButtonDialogHeightPlaceHolder: "Výška",
    imageResizeButtonDialogOKButton: "Změna velikosti",
    imageResizeButtonDialogTitle: "Změna velikosti obrázku",
    imageResizeButtonDialogWidth: "Šířka obrázku",
    imageResizeButtonDialogWidthPlaceHolder: "Šířka",
    imageResizeButtonText: "Změna velikosti obrázku",
    insertFileDialogCancelButton: "Storno",
    insertFileDialogOKButton: "Vložit soubor",
    insertFileNameLabel: "Název souboru",
    insertFileNamePlaceHolder: "Název souboru...",
    insertFileTitle: "Vložit soubor",
    insertFileURLLabel: "URL souboru",
    insertFileURLPlaceHolder: "URL souboru...",
    languageMenuTitle: "Změna jazyka",
    linkCreateDialogCancelButton: "Storno",
    linkCreateDialogMenuHeader: "Zvolte typ vazby",
    linkCreateDialogOKButton: "Vložit odkaz",
    linkCreateDialogTitle: "Vložit odkaz",
    linkCreateTitle: "Vložit odkaz",
    linkRemoveTitle: "Odstranit odkaz",
    linkTypeDocumentHeader: "Odkaz na dokument nebo jiný soubor",
    linkTypeDocumentInfo: "<h2>Nejste si jisti co do výše uvedeného pole?<\/h2><ol>    <li>Ujistěte se, že soubor byl odeslán do vaší webové stránky.<\/li>    <li>Otevřete soubor uložený ve vašem prohlížeči.<\/li>    <li>Zkopírujte tento soubor URL z adresního řádku vašeho prohlížeče a vložte ji do pole výše.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokument nebo jiný soubor",
    linkTypeDocumentLocationLabel: "Místo:",
    linkTypeDocumentLocationPlaceHolder: "Zadejte adresu URL",
    linkTypeDocumentNewWindowHeader: "Nové okno",
    linkTypeDocumentNewWindowLabel: "Zaškrtněte toto políčko, chcete-li soubor otevřít v novém okně prohlížeče\/položky.",
    linkTypeEmailHeader: "Odkaz na e-mailovou adresu",
    linkTypeEmailLabel: "E-mailová adresa",
    linkTypeEmailSubjectLabel: "Předmět (nepovinné):",
    linkTypeEmailSubjectPlaceHolder: "Zadejte předmět",
    linkTypeEmailToLabel: "E-mail:",
    linkTypeEmailToPlaceHolder: "Zadejte e-mailovou adresu",
    linkTypeExternalHeader: "Odkaz na stránky na jiném webu",
    linkTypeExternalInfo: "<h2>Nejste si jisti co do výše uvedeného pole?<\/h2><ol>    <li>Vyhledejte stránku na webu, který chcete odkázat.<\/li>    <li>Zkopírujte webovou adresu z adresního řádku vašeho prohlížeče a vložte ji do pole výše.<\/li><\/ol>",
    linkTypeExternalLabel: "Stránky na jiném webu",
    linkTypeExternalLocationLabel: "Místo:",
    linkTypeExternalLocationPlaceHolder: "Zadejte adresu URL",
    linkTypeExternalNewWindowHeader: "Nové okno",
    linkTypeExternalNewWindowLabel: "Zaškrtněte toto políčko, aby byl odkaz otevřít v novém okně prohlížeče\/položky.",
    linkTypeInternalHeader: "Odkaz na stránky na tomto webu",
    linkTypeInternalInfo: "<h2>Nejste si jisti co do výše uvedeného pole?<\/h2><ol>    <li>Vyhledejte stránku na tomto spojení sítí.<\/li>    <li>Zkopírujte webovou adresu z vašeho prohlížeče do adresního řádku, s výjimkou \"{{domain}}\" a vložte jej do pole výše.<\/li><\/ol>",
    linkTypeInternalLabel: "Stránky na tomto webu",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Zadejte identifikátor URI",
    linkTypeInternalNewWindowHeader: "Nové okno",
    linkTypeInternalNewWindowLabel: "Zaškrtněte toto políčko, aby byl odkaz otevřít v novém okně prohlížeče\/položky.",
    listOrderedTitle: "Seřazený seznam",
    listUnorderedTitle: "Neseřazený seznam",
    logoTitle: "Další informace o Raptor WYSIWYG Editor",
    loremIpsumTitle: "Vložit fiktivní text pro testování",
    navigateAway: "\nNa této stránce jsou neuložené změny. \nPokud opustíte tuto stránku dojde ke ztrátě neuložených změn:",
    pasteDialogCancelButton: "Storno",
    pasteDialogFormattedCleaned: "Formátovat &amp; vyčistit",
    pasteDialogFormattedUnclean: "Formátovaný nečisté",
    pasteDialogOKButton: "Vložit",
    pasteDialogPlain: "Prostý Text",
    pasteDialogSource: "Zdrojový kód",
    pasteDialogTitle: "Vložit",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Nepodařilo se načíst revize",
    revisionsApplyButtonDialogCancelButton: "Storno",
    revisionsApplyButtonDialogOKButton: "Vrácení zpět",
    revisionsApplyButtonDialogText: "Vrácení zpět potvrzení",
    revisionsApplyButtonDialogTitle: "Vrácení zpět potvrzení",
    revisionsApplyButtonText: "Vrácení zpět",
    revisionsApplyButtonTitle: "Vrácení zpět",
    revisionsApplyDialogContent: "Touto akcí nahradíte stávající obsah vybrané revize.<br>Současný obsah bude přidán jako revizi a bude zobrazena v seznamu revizí pro tento blok.",
    revisionsButtonCurrent: "Proud",
    revisionsButtonViewDiffText: "Rozdíly",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Vytvořil(a)",
    revisionsDialogCancelButton: "Storno",
    revisionsDialogTitle: "Zobrazit obsah revize",
    revisionsDiffButtonDialogCancelButton: "Zavřít",
    revisionsDiffButtonDialogTitle: "Zobrazit rozdíly",
    revisionsDiffButtonText: "Zobrazit rozdíly",
    revisionsDiffButtonTitle: "Zobrazit rozdíly",
    revisionsLoading: "Načítání revize...",
    revisionsNone: "Žádná revize tohoto prvku",
    revisionsPreviewButtonText: "Náhled",
    revisionsPreviewButtonTitle: "Náhled",
    revisionsText: "Revize",
    revisionsTextEmpty: "Bez revize",
    revisionsTitle: "",
    rfmClose: "Zavřít",
    rfmContinue: "Pokračovat",
    rfmDelete: "Odstranit",
    rfmDownload: "Stáhnout",
    rfmFileActions: "Akce",
    rfmFileModificationTime: "Změněno",
    rfmFileName: "Jméno",
    rfmFileSize: "Velikost",
    rfmFileType: "Typ",
    rfmFilteredTotal: "Zobrazeno {{start}} {{end}} {{filteredTotal}} souborů",
    rfmFirst: "První",
    rfmHeadingDirectories: "Adresáře",
    rfmHeadingSearch: "Hledat",
    rfmHeadingTags: "Značky",
    rfmHeadingUpload: "Nahrát",
    rfmInsert: "Vložit",
    rfmLast: "Poslední",
    rfmSearch: "Jít",
    rfmTagDocument: "Dokument",
    rfmTagImage: "Obrázek",
    rfmTotal: ", filtrované od {{total}}",
    rfmUpload: "Nahrát",
    rfmUploadBrowse: "Procházet",
    rfmUploadDrop: "Sem přetáhněte soubory",
    rfmUploadFileRemove: "Odstranit",
    rfmUploadOr: "nebo",
    rfmView: "Pohled",
    saveJsonFail: "Nepodařilo se uložit {{failed}} obsah bloků",
    saveJsonSaved: "Úspěšně uloženo {{saved}} obsah bloků.",
    saveNotConfigured: "Uložit není nakonfigurována nebo zakázána.",
    saveRestFail: "Nepodařilo se uložit {{failed}} obsah bloků.",
    saveRestPartial: "Uloženo {{saved}} z {{failed}} bloků obsahu.",
    saveRestSaved: "Úspěšně uloženo {{saved}} obsah bloků.",
    saveTitle: "Uložit obsah",
    snippetMenuTitle: "Úryvky",
    specialCharactersArrows: "Šipky",
    specialCharactersDialogOKButton: "Ok",
    specialCharactersDialogTitle: "Vložit speciální znaky",
    specialCharactersGreekAlphabet: "Řecká abeceda",
    specialCharactersHelp: "Klepněte na speciální znak, přidejte jej. Klikněte na \"OK\", po dokončení zavřete toto dialogové okno",
    specialCharactersMathematics: "Matematika",
    specialCharactersSymbols: "Symboly",
    specialCharactersTitle: "Vložení speciálního znaku",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} znaků nad limit",
    statisticsButtonCharacterRemaining: "Zbývající počet znaků: {{charactersRemaining}}",
    statisticsButtonCharacters: "{{characters}} znaky",
    statisticsDialogCharactersOverLimit: "znaky {{characters}}, {{charactersRemaining}} za doporučený limit",
    statisticsDialogCharactersRemaining: "{{characters}} znaky, {{charactersRemaining}} zbývající",
    statisticsDialogNotTruncated: "Obsah nebude zkrácen.",
    statisticsDialogOKButton: "Ok",
    statisticsDialogSentence: "{{sentences}} věta",
    statisticsDialogSentences: "{{sentences}} vět",
    statisticsDialogTitle: "Obsah statistiky",
    statisticsDialogTruncated: "Obsah obsahuje více než {{limit}} znaků a může být zkrácen",
    statisticsDialogWord: "slovo {{words}}",
    statisticsDialogWords: "{{words}} slov",
    statisticsTitle: "Klepnutím zobrazíte statistiku",
    tableCreateTitle: "Vytvořit tabulku",
    tableDeleteColumnTitle: "Odstranit sloupce tabulky",
    tableDeleteRowTitle: "Odstranit řádek tabulky",
    tableInsertColumnTitle: "Vložit sloupec tabulky",
    tableInsertRowTitle: "Vložit řádek tabulky",
    tableMergeCellsTitle: "Sloučit buňky tabulky",
    tableSplitCellsTitle: "Rozdělit buňky tabulky",
    tagMenuTagAddress: "Adresa",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Nadpis 1",
    tagMenuTagH2: "Nadpis 2",
    tagMenuTagH3: "Nadpis 3",
    tagMenuTagH4: "Nadpis 4",
    tagMenuTagNA: "NENÍ K DISPOZICI",
    tagMenuTagP: "Odstavec",
    tagMenuTagPre: "Pre-formátovaný",
    tagMenuTitle: "Změnit styl prvku",
    tagTreeElementLink: "Vyberte element {{element}}",
    tagTreeElementTitle: "Klepnutím vyberte obsah elementu \"{{element}}\"",
    tagTreeRoot: "kořen",
    tagTreeRootLink: "Vyberte veškerý obsah upravitelné",
    tagTreeRootTitle: "Klepnutím vyberete všechny upravovat obsah",
    textBlockQuoteTitle: "Bloková citace",
    textBoldTitle: "Tučné",
    textItalicTitle: "Kurzíva",
    textSizeDecreaseTitle: "Snížit velikost textu",
    textSizeIncreaseTitle: "Zvýšit velikost textu",
    textStrikeTitle: "Přeškrtnuté",
    textSubTitle: "Dílčí skript",
    textSuperTitle: "Super-skript",
    textUnderlineTitle: "Podtržení",
    unsavedEditWarningText: "Existují neuložené změny na této stránce",
    viewSourceDialogCancelButton: "Zavřít",
    viewSourceDialogOKButton: "Použít zdrojový kód",
    viewSourceDialogTitle: "Obsahu zdrojového kódu",
    viewSourceTitle: "Zobrazit či upravit zdrojový kód"
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/cs.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/da.js
/**
 * @fileOverview Danish strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('da', 'dansk', {
    alignCenterTitle: "Juster tekst centreret",
    alignJustifyTitle: "Justere tekst retfærdiggøre",
    alignLeftTitle: "Juster tekst til venstre",
    alignRightTitle: "Juster tekst til højre",
    cancelDialogCancelButton: "Fortsæt redigering",
    cancelDialogContent: "Vil du annullere redigering? Alle ændringer vil gå tabt!",
    cancelDialogOKButton: "Annullere redigering",
    cancelDialogTitle: "Annullere redigering",
    cancelTitle: "Annullere redigering",
    classMenuTitle: "Stil vælgeren",
    clearFormattingTitle: "Ryd formatering",
    clickButtonToEditText: "Rediger",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatisk",
    colorMenuBasicBlack: "Sort",
    colorMenuBasicBlue: "Blå",
    colorMenuBasicGreen: "Grøn",
    colorMenuBasicGrey: "Grå",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Lilla",
    colorMenuBasicRed: "Rød",
    colorMenuBasicTitle: "Ændre tekstfarve",
    colorMenuBasicWhite: "Hvid",
    dockToElementTitle: "Dock\/fradocke editor til element",
    dockToScreenTitle: "Dock\/fradocke editor til skærm",
    embedDialogCancelButton: "Annuller",
    embedDialogOKButton: "Integrere objekt",
    embedDialogTabCode: "Indkapsle kode",
    embedDialogTabCodeContent: "Indsæt din indlejre kode i den tekstområde nedenfor:",
    embedDialogTabPreview: "Preview",
    embedDialogTabPreviewContent: "Et eksempel på din indlejrede objekt vises nedenfor:",
    embedDialogTitle: "Integrere objekt",
    embedTitle: "Integrere objekt",
    errorUINoName: "UI \"{{ui}}\" er ugyldig (skal have en navneegenskab)",
    errorUINotObject: "UI \"{{ui}}\" er ugyldig (skal være et objekt)",
    errorUIOverride: "UI \"{{name}}\" er allerede blevet registreret, og vil blive overskrevet",
    fileManagerDialogTitle: "Filhåndtering",
    fileManagerTitle: "Filhåndtering",
    floatLeftTitle: "Juster billede til venstre",
    floatNoneTitle: "Fjerne billedet justeres",
    floatRightTitle: "Juster billede til højre",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Tegneserie uden",
    fontFamilyMenuFontCourier: "Kurer nye",
    fontFamilyMenuFontDefault: "Standardskrifttype",
    fontFamilyMenuFontGeorgia: "Georgien",
    fontFamilyMenuFontImpact: "Indvirkning",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Gange ny romersk",
    fontFamilyMenuTitle: "Vælge din skrifttype",
    guidesTitle: "Vis element guides",
    historyRedoTitle: "Annuller Fortryd",
    historyUndoTitle: "Fortryd",
    hrCreateTitle: "Indsæt vandret regel",
    imageResizeButtonDialogCancelButton: "Annuller",
    imageResizeButtonDialogHeight: "Billedets højde",
    imageResizeButtonDialogHeightPlaceHolder: "Højde",
    imageResizeButtonDialogOKButton: "Ændre størrelsen på",
    imageResizeButtonDialogTitle: "Ændre størrelsen på billedet",
    imageResizeButtonDialogWidth: "Billedbredde",
    imageResizeButtonDialogWidthPlaceHolder: "Bredde",
    imageResizeButtonText: "Ændre størrelsen på billedet",
    insertFileDialogCancelButton: "Annuller",
    insertFileDialogOKButton: "Indsæt fil",
    insertFileNameLabel: "Filnavn",
    insertFileNamePlaceHolder: "Filnavn...",
    insertFileTitle: "Indsæt fil",
    insertFileURLLabel: "Fil webadresse",
    insertFileURLPlaceHolder: "Filen URL...",
    languageMenuTitle: "Skift sprog",
    linkCreateDialogCancelButton: "Annuller",
    linkCreateDialogMenuHeader: "Vælg en kædetype",
    linkCreateDialogOKButton: "Indsæt Link",
    linkCreateDialogTitle: "Indsæt Link",
    linkCreateTitle: "Indsæt Link",
    linkRemoveTitle: "Fjern Link",
    linkTypeDocumentHeader: "Link til et dokument eller en anden fil",
    linkTypeDocumentInfo: "<h2>Ikke sikker på hvad der skal sættes i boksen ovenfor?<\/h2><ol>    <li>Sikre, at filen er blevet uploadet til dit websted.<\/li>    <li>Åbn den uploadede fil i din browser.<\/li>    <li>Kopier filens URL fra browserens adresselinje og indsætte det i boksen ovenfor.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokument eller en anden fil",
    linkTypeDocumentLocationLabel: "Beliggenhed:",
    linkTypeDocumentLocationPlaceHolder: "Angiv en URL-adresse",
    linkTypeDocumentNewWindowHeader: "Nyt vindue",
    linkTypeDocumentNewWindowLabel: "Marker dette afkrydsningsfelt for at få filen åbnes i et nyt browservindue\/fane.",
    linkTypeEmailHeader: "Link til en e-mail-adresse",
    linkTypeEmailLabel: "E-mail-adresse",
    linkTypeEmailSubjectLabel: "Emne (valgfrit):",
    linkTypeEmailSubjectPlaceHolder: "Angiv emne",
    linkTypeEmailToLabel: "E-mail:",
    linkTypeEmailToPlaceHolder: "Indtast e-mail-adresse",
    linkTypeExternalHeader: "Link til en side på en anden hjemmeside",
    linkTypeExternalInfo: "<h2>Ikke sikker på hvad der skal sættes i boksen ovenfor?<\/h2><ol>    <li>Find siden på nettet, du vil sammenkæde med.<\/li>    <li>Kopiere web-adressen fra din browsers adresselinje og indsætte det i boksen ovenfor.<\/li><\/ol>",
    linkTypeExternalLabel: "Side på en anden hjemmeside",
    linkTypeExternalLocationLabel: "Beliggenhed:",
    linkTypeExternalLocationPlaceHolder: "Angiv en URL-adresse",
    linkTypeExternalNewWindowHeader: "Nyt vindue",
    linkTypeExternalNewWindowLabel: "Marker dette afkrydsningsfelt for at have linket åbner i et nyt browservindue\/fane.",
    linkTypeInternalHeader: "Link til en side på denne hjemmeside",
    linkTypeInternalInfo: "<h2>Ikke sikker på hvad der skal sættes i boksen ovenfor?<\/h2><ol>    <li>Find siden på dette site link til.<\/li>    <li>Kopiere web-adressen fra din browsers adresse bar, undtagen \"{{domain}}\" og indsætte det i boksen ovenfor.<\/li><\/ol>",
    linkTypeInternalLabel: "Side på denne hjemmeside",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Angive en URI",
    linkTypeInternalNewWindowHeader: "Nyt vindue",
    linkTypeInternalNewWindowLabel: "Marker dette afkrydsningsfelt for at have linket åbner i et nyt browservindue\/fane.",
    listOrderedTitle: "Sorteret liste",
    listUnorderedTitle: "Uordnet liste",
    logoTitle: "Læs mere om Raptor WYSIWYG Editor",
    loremIpsumTitle: "Indsæt dummy tekst nemlig prøvning",
    navigateAway: "\nDer er ugemte ændringer på denne side. \nHvis du navigerer væk fra denne side vil du miste dine ugemte ændringer",
    pasteDialogCancelButton: "Annuller",
    pasteDialogFormattedCleaned: "Formateret &amp; rengøres",
    pasteDialogFormattedUnclean: "Formateret urene",
    pasteDialogOKButton: "Indsæt",
    pasteDialogPlain: "Almindelig tekst",
    pasteDialogSource: "Kildekode",
    pasteDialogTitle: "Pasta",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Det mislykkedes at hente revisioner",
    revisionsApplyButtonDialogCancelButton: "Annuller",
    revisionsApplyButtonDialogOKButton: "Rollback",
    revisionsApplyButtonDialogText: "Bekræftelse af annullering af opdatering",
    revisionsApplyButtonDialogTitle: "Bekræftelse af annullering af opdatering",
    revisionsApplyButtonText: "Rollback",
    revisionsApplyButtonTitle: "Rollback",
    revisionsApplyDialogContent: "Dette vil erstatte det nuværende indhold med den valgte revision.<br>Den nuværende indhold vil blive tilføjet som en revision, og vil være synligt på listen revisioner for denne blok.",
    revisionsButtonCurrent: "Nuværende",
    revisionsButtonViewDiffText: "Forskelle",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Lavet",
    revisionsDialogCancelButton: "Annuller",
    revisionsDialogTitle: "Se indhold revisioner",
    revisionsDiffButtonDialogCancelButton: "Luk",
    revisionsDiffButtonDialogTitle: "Se forskelle",
    revisionsDiffButtonText: "Se forskelle",
    revisionsDiffButtonTitle: "Se forskelle",
    revisionsLoading: "Indlæser revisioner...",
    revisionsNone: "Ingen ændringer til dette element",
    revisionsPreviewButtonText: "Preview",
    revisionsPreviewButtonTitle: "Preview",
    revisionsText: "Revisioner",
    revisionsTextEmpty: "Ingen revisioner",
    revisionsTitle: "",
    rfmClose: "Luk",
    rfmContinue: "Fortsat",
    rfmDelete: "Slet",
    rfmDownload: "Download",
    rfmFileActions: "Handlinger",
    rfmFileModificationTime: "Modificeret",
    rfmFileName: "Navn",
    rfmFileSize: "Størrelse",
    rfmFileType: "Type",
    rfmFilteredTotal: "Viser {{start}} til {{end}} af {{filteredTotal}} filer",
    rfmFirst: "Første",
    rfmHeadingDirectories: "Mapper",
    rfmHeadingSearch: "Søg",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Upload",
    rfmInsert: "Indsæt",
    rfmLast: "Seneste",
    rfmSearch: "Gå",
    rfmTagDocument: "Dokument",
    rfmTagImage: "Billede",
    rfmTotal: ", filtreret fra {{total}}",
    rfmUpload: "Upload",
    rfmUploadBrowse: "Gennemse",
    rfmUploadDrop: "Slip filer her",
    rfmUploadFileRemove: "Fjern",
    rfmUploadOr: "eller",
    rfmView: "Se",
    saveJsonFail: "Kunne ikke gemme {{failed}} indhold nummersekvens",
    saveJsonSaved: "Gemt {{saved}} indhold nummersekvens.",
    saveNotConfigured: "Gem ikke er konfigureret eller er deaktiveret.",
    saveRestFail: "Kunne ikke gemme {{failed}} indhold nummersekvens.",
    saveRestPartial: "Gemt {{saved}} {{failed}} indhold blokke.",
    saveRestSaved: "Gemt {{saved}} indhold nummersekvens.",
    saveTitle: "Gemme indhold",
    snippetMenuTitle: "Uddrag",
    specialCharactersArrows: "Pile",
    specialCharactersDialogOKButton: "Ok",
    specialCharactersDialogTitle: "Indsætte specialtegn",
    specialCharactersGreekAlphabet: "Græske alfabet",
    specialCharactersHelp: "Klik på specialtegn for at tilføje det. Klik på \"OK\" når du er færdig for at lukke denne dialogboks",
    specialCharactersMathematics: "Matematik",
    specialCharactersSymbols: "Symboler",
    specialCharactersTitle: "Indsætte et specialtegn",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} tegn over grænse",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} tegn tilbage",
    statisticsButtonCharacters: "{{characters}} tegn",
    statisticsDialogCharactersOverLimit: "{{characters}} tegn, {{charactersRemaining}} over den anbefalede grænse",
    statisticsDialogCharactersRemaining: "{{characters}} tegn, {{charactersRemaining}} tilbage",
    statisticsDialogNotTruncated: "Indhold vil ikke blive afkortet",
    statisticsDialogOKButton: "Ok",
    statisticsDialogSentence: "{{sentences}} sætning",
    statisticsDialogSentences: "{{sentences}} sætninger",
    statisticsDialogTitle: "Indhold statistik",
    statisticsDialogTruncated: "Indhold indeholder mere end {{limit}} tegn og bliver muligvis afkortet",
    statisticsDialogWord: "{{words}} ord",
    statisticsDialogWords: "{{words}} ord",
    statisticsTitle: "Klik her for at se statistik",
    tableCreateTitle: "Opret tabel",
    tableDeleteColumnTitle: "Slette tabelkolonne",
    tableDeleteRowTitle: "Slette tabelrække",
    tableInsertColumnTitle: "Indsæt tabelkolonne",
    tableInsertRowTitle: "Indsæt tabelrække",
    tableMergeCellsTitle: "Flette tabelceller",
    tableSplitCellsTitle: "Opdele tabelceller",
    tagMenuTagAddress: "Adresse",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Overskrift 1",
    tagMenuTagH2: "Udgiftsområde 2",
    tagMenuTagH3: "Udgiftsområde 3",
    tagMenuTagH4: "Udgiftsområde 4",
    tagMenuTagNA: "NIELSEN",
    tagMenuTagP: "Stk.",
    tagMenuTagPre: "Præ-formateret",
    tagMenuTitle: "Ændre element stil",
    tagTreeElementLink: "Vælg {{element}} element",
    tagTreeElementTitle: "Klik for at markere indholdet i elementet \"{{element}}\"",
    tagTreeRoot: "roden",
    tagTreeRootLink: "Vælg alle redigerbart indhold",
    tagTreeRootTitle: "Klik for at markere alle redigerbart indhold",
    textBlockQuoteTitle: "Blok citat",
    textBoldTitle: "Fed",
    textItalicTitle: "Kursiv",
    textSizeDecreaseTitle: "Formindsk tekststørrelse",
    textSizeIncreaseTitle: "Øge tekststørrelse",
    textStrikeTitle: "Gennemstrege",
    textSubTitle: "Sub script",
    textSuperTitle: "Super-script",
    textUnderlineTitle: "Understregning",
    unsavedEditWarningText: "Der er ugemte ændringer på denne side",
    viewSourceDialogCancelButton: "Luk",
    viewSourceDialogOKButton: "Anvende kildekode",
    viewSourceDialogTitle: "Indholdskilden kode",
    viewSourceTitle: "Se\/redigere kildekoden"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/da.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/de.js
/**
 * @fileOverview German strings file.
 * @license http://www.raptor-editor.com/license
 *
 * @author Michael Kessler, michi@netzpiraten.ch, https://mksoft.ch
 */
extendLocale('de', 'Deutsch', {
    alignCenterTitle: "Zentrieren",
    alignJustifyTitle: "Bündig",
    alignLeftTitle: "Links ausrichten",
    alignRightTitle: "Rechts ausrichten",
    cancelDialogCancelButton: "Schliessen",
    cancelDialogContent: "Wollen Sie wirklich mit der Bearbeitung aufhören? Alle Änderungen gehen verloren!",
    cancelDialogOKButton: false,
    cancelDialogTitle: "Cancel Editing",
    cancelTitle: "Cancel editing",
    classMenuTitle: "Stil-picker",
    clearFormattingTitle: "Formatierung löschen",
    clickButtonToEditPluginButton: "Zum Bearbeiten klicken",
    clickButtonToEditText: "Bearbeiten",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatic",
    colorMenuBasicBlack: "Black",
    colorMenuBasicBlue: "Blue",
    colorMenuBasicGreen: "Green",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Purple",
    colorMenuBasicRed: "Red",
    colorMenuBasicTitle: "Farbe des gewählten Texts ändern.",
    colorMenuBasicWhite: "White",
    dockToElementTitle: "Dock editor to element",
    dockToScreenTitle: "Dock editor to screen",
    embedDialogCancelButton: "Abbrechen",
    embedDialogOKButton: "Objekt einbetten",
    embedDialogTabCode: "Embed-Code",
    embedDialogTabCodeContent: "Fügen Sie Ihre Embed-Code in das Textfeld unten ein:",
    embedDialogTabPreview: "Vorschau",
    embedDialogTabPreviewContent: "Eine Vorschau auf das eingebettete Objekt wird unten angezeigt:",
    embedDialogTitle: "Objekt einbetten",
    embedTitle: "Objekt einbinden",
    errorPluginNoName: "Plugin \"{{plugin}}\" is invalid (must have a name property)",
    errorPluginNotObject: "Plugin \"{{plugin}}\" is invalid (must be an object)",
    errorPluginOverride: "Plugin \"{{name}}\" has already been registered, and will be overwritten",
    errorUINoName: "UI \"{{ui}}\" is invalid (must have a name property)",
    errorUINotObject: "UI \"{{ui}}\" is invalid (must be an object)",
    errorUIOverride: "UI \"{{name}}\" has already been registered, and will be overwritten",
    fileManagerDialogTitle: "Datei-Manager",
    fileManagerTitle: "Datei-Manager",
    floatLeftTitle: "Bild nach links stellen",
    floatNoneTitle: "Bildausrichtung entfernen",
    floatRightTitle: "Bild nach rechts stellen",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Comic ohne",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Standard-Schriftart",
    fontFamilyMenuFontGeorgia: "Georgien",
    fontFamilyMenuFontImpact: "Auswirkungen",
    fontFamilyMenuFontPalatino: "Von der Pfalz",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Wählen Sie Ihre Schriftart",
    guidesTitle: "Hilfslinien anzeigen",
    historyRedoTitle: "Redo",
    historyUndoTitle: "Undo",
    hrCreateTitle: "Horizontale Linie einfügen",
    imageResizeButtonDialogCancelButton: "Abbrechen",
    imageResizeButtonDialogHeight: "Bildhöhe",
    imageResizeButtonDialogHeightPlaceHolder: "Höhe",
    imageResizeButtonDialogOKButton: "Ändern der Größe",
    imageResizeButtonDialogTitle: "Bildgröße",
    imageResizeButtonDialogWidth: "Bildbreite",
    imageResizeButtonDialogWidthPlaceHolder: "Breite",
    imageResizeButtonText: "Bildgröße",
    insertFileDialogCancelButton: "Abbrechen",
    insertFileDialogOKButton: "Datei einfügen",
    insertFileNameLabel: "Dateiname",
    insertFileNamePlaceHolder: "Dateinamen...",
    insertFileTitle: "Datei einfügen",
    insertFileURLLabel: "Datei-URL",
    insertFileURLPlaceHolder: "Datei-URL...",
    languageMenuTitle: "Sprache ändern",
    linkCreateDialogCancelButton: "Abbrechen",
    linkCreateDialogMenuHeader: "Wählen Sie einen Linktyp",
    linkCreateDialogOKButton: "Link einfügen",
    linkCreateDialogTitle: "Link einfügen",
    linkCreateTitle: "Link einfügen",
    linkDialogCancelButton: "Abbrechen",
    linkDialogMenuHeader: "Wählen Sie einen Link Typ:",
    linkDialogOKButton: "Link einfügen",
    linkDialogTitle: "Link einfügen",
    linkRemoveTitle: "Link entfernen",
    linkTypeDocumentHeader: "Link zu einem Dokument oder einer anderen Datei",
    linkTypeDocumentInfo: "<h2>Nicht sicher, was Sie in die Tabelle oben zu setzen?<\/h2><ol>    <li>Stellen Sie sicher, dass die Datei auf Ihre Website hochgeladen wurde.<\/li>    <li>Die hochgeladene Datei in Ihrem Browser geöffnet.<\/li>    <li>Kopieren Sie die Datei URL aus der Adressleiste des Browsers und fügen Sie ihn in das Feld oben ein.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokument oder eine andere Datei",
    linkTypeDocumentLocationLabel: "Lage:",
    linkTypeDocumentLocationPlaceHolder: "Geben Sie eine URL",
    linkTypeDocumentNewWindowHeader: "Neues Fenster",
    linkTypeDocumentNewWindowLabel: "Aktivieren Sie dieses Kontrollkästchen, um die Datei in einem neuen Browser-Fenster\/Tab geöffnet haben.",
    linkTypeEmailHeader: "Eine E-Mail Adresse verlinken",
    linkTypeEmailLabel: "E-Mail Adresse",
    linkTypeEmailSubjectLabel: "Betreff (optional):",
    linkTypeEmailSubjectPlaceHolder: "Betreff eingeben",
    linkTypeEmailToLabel: "E-Mail:",
    linkTypeEmailToPlaceHolder: "E-Mail Adresse eingeben",
    linkTypeExternalHeader: "Link to a page on another website",
    linkTypeExternalInfo: "<h2>Nicht sicher was in die Box oberhalb gehört?<\/h2><ol>    <li>Finden Sie die Seite im Web welche Sie verlinken wollen.<\/li>    <li>Kopieren Sie die URL von der Adressleiste ihres Browser und fügen Sie diese in der Box oberhalb ein.<\/li><\/ol>",
    linkTypeExternalLabel: "Page on another website",
    linkTypeExternalLocationLabel: "URL",
    linkTypeExternalLocationPlaceHolder: "Geben Sie eine URL",
    linkTypeExternalNewWindowHeader: "Neues Fenster",
    linkTypeExternalNewWindowLabel: "Markieren Sie diese Box um den Link in einem neuen Browser zu öffnen.",
    linkTypeInternalHeader: "Link to a page on this website",
    linkTypeInternalInfo: "<h2>Nicht sicher was in die Box oberhalb gehört?<\/h2><ol>    <li>Finden Sie die Seite im Web welche Sie verlinken wollen.<\/li>    <li>Copy the web address from your browser's address bar, excluding \"{{domain}}\" and paste it into the box above.<\/li><\/ol>",
    linkTypeInternalLabel: "Page on this website",
    linkTypeInternalLocationLabel: "URL",
    linkTypeInternalLocationPlaceHolder: "Geben Sie einen URI",
    linkTypeInternalNewWindowHeader: "Neues Fenster",
    linkTypeInternalNewWindowLabel: "Markieren Sie diese Box um den Link in einem neuen Browser zu öffnen.",
    listOrderedTitle: "Geordnete Liste",
    listUnorderedTitle: "Ungeordnete Liste",
    logoTitle: "Erfahren Sie mehr über dem Raptor WYSIWYG Editor",
    loremIpsumTitle: "Einfügen von dummy-Text zum Testen",
    navigateAway: "\nEs sind ungespeicherte Änderungen auf dieser Seite. \nWenn Sie diese Seite verlassen, verlieren Sie Ihre ungespeicherten Änderungen",
    pasteDialogCancelButton: "Abbrechen",
    pasteDialogFormattedCleaned: "Formatiert &amp; gereinigt",
    pasteDialogFormattedUnclean: "Formatiert unrein",
    pasteDialogOKButton: "Einfügen",
    pasteDialogPlain: "Klartext",
    pasteDialogSource: "Source-Code",
    pasteDialogTitle: "Einfügen",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Fehler beim Abrufen von Revisionen",
    revisionsApplyButtonDialogCancelButton: "Abbrechen",
    revisionsApplyButtonDialogOKButton: "Rollback",
    revisionsApplyButtonDialogText: "Rollback-Bestätigung",
    revisionsApplyButtonDialogTitle: "Rollback-Bestätigung",
    revisionsApplyButtonText: "Rollback",
    revisionsApplyButtonTitle: "Rollback",
    revisionsApplyDialogContent: "Dies ersetzt den aktuellen Inhalt mit einer bestimmten Revision.<br>Der aktuelle Inhalt wird als eine Revision hinzugefügt und werden in die Liste der Revisionen für diesen Block sichtbar.",
    revisionsButtonCurrent: "Strom",
    revisionsButtonViewDiffText: "Unterschiede",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Erstellt",
    revisionsDialogCancelButton: "Abbrechen",
    revisionsDialogTitle: "Ansicht Inhalt Revisionen",
    revisionsDiffButtonDialogCancelButton: "Schließen",
    revisionsDiffButtonDialogTitle: "Ansicht-Unterschiede",
    revisionsDiffButtonText: "Ansicht-Unterschiede",
    revisionsDiffButtonTitle: "Ansicht-Unterschiede",
    revisionsLoading: "Revisionen werden geladen...",
    revisionsNone: "Keine Revisionen für dieses element",
    revisionsPreviewButtonText: "Vorschau",
    revisionsPreviewButtonTitle: "Vorschau",
    revisionsText: "Revisionen",
    revisionsTextEmpty: "Keine Revisionen",
    revisionsTitle: "",
    rfmClose: "Schließen",
    rfmContinue: "Weiter",
    rfmDelete: "Löschen",
    rfmDownload: "Download",
    rfmFileActions: "Aktionen",
    rfmFileModificationTime: "Geändert",
    rfmFileName: "Name",
    rfmFileSize: "Größe",
    rfmFileType: "Typ",
    rfmFilteredTotal: "Ergebnis {{start}} in {{end}} {{filteredTotal}}-Dateien",
    rfmFirst: "Erste",
    rfmHeadingDirectories: "Verzeichnisse",
    rfmHeadingSearch: "Suche",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Upload",
    rfmInsert: "Einfügen",
    rfmLast: "Letzter",
    rfmSearch: "Gehen",
    rfmTagDocument: "Dokument",
    rfmTagImage: "Bild",
    rfmTotal: ", gefiltert von {{total}}",
    rfmUpload: "Upload",
    rfmUploadBrowse: "Durchsuchen",
    rfmUploadDrop: "Drop Dateien hier",
    rfmUploadFileRemove: "Entfernen",
    rfmUploadOr: "oder",
    rfmView: "Ansicht",
    saveJsonFail: "Fehler beim Speichern der {{failed}} Content Nummernblocks",
    saveJsonSaved: "Erfolgreich gespeichert {{saved}} Content Nummernblocks.",
    saveNotConfigured: "Speichern wurde nicht konfiguriert oder deaktiviert ist.",
    saveRestFail: "{{failed}} Content Nummernblocks Speichern fehlgeschlagen.",
    saveRestPartial: "Gespeichert {{saved}} von {{failed}} Inhaltsblöcke.",
    saveRestSaved: "Erfolgreich gespeichert {{saved}} Content Nummernblocks.",
    saveTitle: "Save Speichern",
    snippetMenuTitle: "Ausschnitte",
    specialCharactersArrows: "Pfeile",
    specialCharactersDialogOKButton: "Okay",
    specialCharactersDialogTitle: "Einfügen von Sonderzeichen",
    specialCharactersGreekAlphabet: "Griechisches Alphabet",
    specialCharactersHelp: "Klicken Sie auf ein spezielles Zeichen, um es hinzuzufügen. Klicken Sie auf \"OK\" wenn fertig um dieses Dialogfeld zu schließen.",
    specialCharactersMathematics: "Mathematik",
    specialCharactersSymbols: "Symbole",
    specialCharactersTitle: "Einfügen eines Sonderzeichens",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} Zeichen über der Limite",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} Zeichen verbleibend",
    statisticsButtonCharacters: "{{characters}} Zeichen",
    statisticsDialogCharactersOverLimit: "{{characters}} Zeichen, {{charactersRemaining}} über der empfohlenen Limite",
    statisticsDialogCharactersRemaining: "{{characters}} Zeichen, {{charactersRemaining}} verbleibend",
    statisticsDialogNotTruncated: "Der Inhalt wird nicht gekürzt",
    statisticsDialogOKButton: false,
    statisticsDialogSentence: "{{sentences}} sentence",
    statisticsDialogSentences: "{{sentences}} Sätze",
    statisticsDialogTitle: "Content Statistics",
    statisticsDialogTruncated: "Content contains more than {{limit}} characters and may be truncated",
    statisticsDialogWord: "{{words}} Wort",
    statisticsDialogWords: "{{words}} Wörter",
    statisticsTitle: "Um die Statistiken zu sehen klicken",
    tableCreateTitle: "Create table",
    tableDeleteColumnTitle: "Delete table column",
    tableDeleteRowTitle: "Delete table row",
    tableInsertColumnTitle: "Insert table column",
    tableInsertRowTitle: "Insert table row",
    tableMergeCellsTitle: "Verbinden von Tabellenzellen",
    tableSplitCellsTitle: "Tabellenzellen teilen",
    tagMenuTagAddress: "Adresse",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Titel&nbsp;1",
    tagMenuTagH2: "Titel&nbsp;2",
    tagMenuTagH3: "Titel&nbsp;3",
    tagMenuTagH4: "Rubrik 4",
    tagMenuTagNA: "n.v.",
    tagMenuTagP: "Paragraf",
    tagMenuTagPre: "Vorformatiert",
    tagMenuTitle: "Change element style",
    tagTreeElementLink: "{{element}} Element auswählen",
    tagTreeElementTitle: "Um den Inhalt des \"{{element}}\" Element zu selektieren klicken",
    tagTreeRoot: "Grundelement",
    tagTreeRootLink: "Alle editierbaren Inhalte auswählen",
    tagTreeRootTitle: "Um alle bearbeitbaren Elemente zu selektieren klicken",
    textBlockQuoteTitle: "Zitat",
    textBoldTitle: "Fett",
    textItalicTitle: "Kursiv",
    textSizeDecreaseTitle: "Text verkleinern",
    textSizeIncreaseTitle: "Text vergrößern",
    textStrikeTitle: "Durchstreichen",
    textSubTitle: "Tiefstellen",
    textSuperTitle: "Hochstellen",
    textUnderlineTitle: "Unterstreichen",
    unsavedEditWarningText: "Dieser Block enthält ungespeicherte Änderungen",
    viewSourceDialogCancelButton: "Schliessen",
    viewSourceDialogOKButton: "Quellcode anwenden",
    viewSourceDialogTitle: "Content source code",
    viewSourceTitle: "Quellcode anschauen\/editieren"
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/de.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/el.js
/**
 * @fileOverview Greek strings file.
 * @license http://www.raptor-editor.com/license
 *
 * @author Petros Gavriilidis <diktyo2001@yahoo.com>
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('el', 'Ελληνικά', {
    alignCenterTitle: 'Στοίχιση κειμένου στο κέντρο',
    alignJustifyTitle: 'Πλήρης στοίχιση κειμένου',
    alignLeftTitle: 'Στοίχιση κειμένου αριστερά',
    alignRightTitle: 'Στοίχιση κειμένου δεξιά',

    cancelDialogCancelButton: 'Συνέχιση Επεξεργασίας',
    cancelDialogContent: 'Σίγουρα θέλετε να ακυρώσετε την επεξεργασία; Όλες οι αλλαγές σας θα χαθούν!',
    cancelDialogOKButton: 'Ακύρωση Επεξεργασίας',
    cancelDialogTitle: 'Ακύρωση επεξεργασίας',
    cancelTitle: 'Ακύρωση επεξεργασίας',

    classMenuTitle: 'Επιλογέας Στυλ',
    clearFormattingTitle: 'Καθαρισμός μορφοποίησης',
    clickButtonToEditText: 'Επεξεργασία',
    clickButtonToEditTitle: null,

    colorMenuBasicAutomatic: 'Αυτόματο',
    colorMenuBasicBlack: 'Μαύρο',
    colorMenuBasicBlue: 'Μπλέ',
    colorMenuBasicGreen: 'Πράσινο',
    colorMenuBasicGrey: 'Γκρί',
    colorMenuBasicOrange: 'Πορτοκαλί',
    colorMenuBasicPurple: 'Πορφυρό',
    colorMenuBasicRed: 'Κόκκινο',
    colorMenuBasicTitle: 'Αλλαγή χρώματος κειμένου',
    colorMenuBasicWhite: 'Λευκό',

    dockToElementTitle: 'Σύνδεση/Αποσύνδεση του επεξεργαστή κειμένου στο στοιχείο',
    dockToScreenTitle: 'Σύνδεση/Αποσύνδεση του επεξεργαστή κειμένου στην οθόνη',

    embedTitle: 'Ενσωμάτωση αντικειμένου',
    embedDialogTitle: 'Ενσωμάτωση Αντικειμένου',
    embedDialogTabCode: 'Ενσωμάτωση Κώδικα',
    embedDialogTabCodeContent: 'Επικολλήστε τον ενσωματωμένο σας κώδικα στην περιοχή κειμένου παρακάτω:',
    embedDialogTabPreview: 'Προεπισκόπηση',
    embedDialogTabPreviewContent: 'Μιά προεπισκόπηση του ενσωματωμένου αντικειμένου σας προβάλλεται παρακάτω:',
    embedDialogOKButton: 'Ενσωμάτωση αντικειμένου',
    embedDialogCancelButton: 'Ακύρωση',

    errorUINoName: 'UI "{{ui}}" είναι μη έγκυρο (πρέπει να έχει μία ιδιότητα που να λέγεται όνομα)',
    errorUINotObject: 'UI "{{ui}}" είναι μη έγκυρο (πρέπει να είναι αντικείμενο)',
    errorUIOverride: 'UI "{{name}}" έχει ήδη καταχωρηθεί και θα επικαλυφθεί',

    floatLeftTitle: 'Στοίχιση εικόνας στα αριστερά',
    floatNoneTitle: 'Αφαίρεση στοίχισης εικόνας',
    floatRightTitle: 'Στοίχιση εικόνας στα δεξιά',
    
    fontFamilyMenuTitle: 'Επιλέξτε τη γραμματοσειρά σας',
    fontFamilyMenuFontDefault: 'Προεπιλεγμένη Γραμματοσειρά',
    fontFamilyMenuFontArial: 'Arial',
    fontFamilyMenuFontPalatino: 'Palatino',
    fontFamilyMenuFontGeorgia: 'Georgia',
    fontFamilyMenuFontTimes: 'Times New Roman',
    fontFamilyMenuFontComicSans: 'Comic Sans',
    fontFamilyMenuFontImpact: 'Impact',
    fontFamilyMenuFontCourier: 'Courier New',

    guidesTitle: 'Εμφάνιση οδηγών του στοιχείου',

    historyRedoTitle: 'Επανάληψη',
    historyUndoTitle: 'Αναίρεση',

    hrCreateTitle: 'Εισαγωγή Οριζοντίου Χάρακα',

    imageResizeButtonText: 'Αλλαγή Μεγέθους Εικόνας',
    imageResizeButtonDialogWidth: 'Πλάτος εικόνας',
    imageResizeButtonDialogHeight: 'Ύψος εικόνας',
    imageResizeButtonDialogWidthPlaceHolder: 'Πλάτος',
    imageResizeButtonDialogHeightPlaceHolder: 'Ύψος',
    imageResizeButtonDialogTitle: 'Αλλαγή μεγέθους εικόνας',
    imageResizeButtonDialogOKButton: 'Αλλαγή μεγέθους',
    imageResizeButtonDialogCancelButton: 'Ακύρωση',

    insertFileTitle: 'Εισαγωγή αρχείου',
    insertFileDialogOKButton: 'Εισαγωγή αρχείου',
    insertFileDialogCancelButton: 'Ακύρωση',
    insertFileURLLabel: 'Διεύθυνση URL Αρχείου',
    insertFileNameLabel: 'Όνομα Αρχείου',
    insertFileURLPlaceHolder: 'Διεύθυνση URL Αρχείου...',
    insertFileNamePlaceHolder: 'Όνομα Αρχείου...',

    languageMenuTitle: 'Αλλαγή Γλώσσας',

    loremIpsumTitle: 'Εισάγετε λίγο άσχετο κείμενο γιά δοκιμή',

    listOrderedTitle: 'Ταξινομημένη λίστα',
    listUnorderedTitle: 'Αταξινόμητη λίστα',

    linkCreateTitle: 'Εισαγωγή συνδέσμου',
    linkRemoveTitle: 'Αφαίρεση συνδέσμου',

    linkCreateDialogTitle: 'Εισαγωγή Συνδέσμου',
    linkCreateDialogOKButton: 'Εισαγωγή Συνδέσμου',
    linkCreateDialogCancelButton: 'Ακύρωση',
    linkCreateDialogMenuHeader: 'Επιλέξτε έναν τύπο συνδέσμου',

    linkTypeEmailLabel: 'Διεύθυνση email',
    linkTypeEmailHeader: 'Σύνδεσμος προς μία διεύθυνση email',
    linkTypeEmailToLabel: 'Email:',
    linkTypeEmailToPlaceHolder: 'Δώστε τη διεύθυνση email',
    linkTypeEmailSubjectLabel: 'Θέμα (προαιρετικό):',
    linkTypeEmailSubjectPlaceHolder: 'Δώστε Θέμα',

    linkTypeExternalLabel: 'Σελίδα σε άλλον ιστοχώρο',
    linkTypeExternalHeader: 'Σύνδεσμος προς μία σελίδα σε άλλον ιστοχώρο',
    linkTypeExternalLocationLabel: 'Τοποθεσία:',
    linkTypeExternalLocationPlaceHolder: 'Δώστε μία διεύθυνση URL',
    linkTypeExternalNewWindowHeader: 'Νέο Παράθυρο',
    linkTypeExternalNewWindowLabel: 'Τσεκάρετε αυτό το κουτί ώστε ο σύνδεσμος να ανοίγει σε νέο παράθυρο/καρτέλα.',
    linkTypeExternalInfo:
        '<h2>Δεν είστε σίγουροι τι να βάλετε στο παραπάνω κουτί;</h2>' +
        '<ol>' +
        '    <li>Βρείτε τη σελίδα στο internet με την οποία θέλετε να συνδεθείτε.</li>' +
        '    <li>Αντιγράψτε τη διεύθυνση internet από τη γραμμή διευθύνσεων του περιηγητή σας και επικολλήστε την στο παραπάνω κουτί.</li>' +
        '</ol>',

    linkTypeDocumentLabel: 'Έγγραφο ή άλλο αρχείο',
    linkTypeDocumentHeader: 'Σύνδεσμος προς ένα έγγραφο ή άλλο αρχείο',
    linkTypeDocumentLocationLabel: 'Τοποθεσία:',
    linkTypeDocumentLocationPlaceHolder: 'Δώστε μία διεύθυνση URL',
    linkTypeDocumentNewWindowHeader: 'Νέο Παράθυρο',
    linkTypeDocumentNewWindowLabel: 'Τσεκάρετε αυτό το κουτί γιά να ανοίξει το αρχείο σε ένα νέο παράθυρο/καρτέλα του περιηγητή.',
    linkTypeDocumentInfo:
        '<h2>Δεν είστε σίγουροι τι να βάλετε στο παραπάνω κουτί;</h2>' +
        '<ol>' +
        '    <li>Βεβαιωθείτε οτι το αρχείο έχει μεταφορτωθεί στον ιστοχώρο σας.</li>' +
        '    <li>Ανοίξτε το μεταφορτωθέν αρχείο στον περιηγητή σας.</li>' +
        '    <li>Αντιγράψτε τη διεύθυνση URL του αρχείου από τη γραμμή διευθύνσεων του περιηγητή σας και επικολλήστε την στο παραπάνω κουτί.</li>' +
        '</ol>',

    linkTypeInternalLabel: 'Σελίδα σε αυτόν τον ιστοχώρο',
    linkTypeInternalHeader: 'Σύνδεσμος προς μία σελίδα σε αυτόν τον ιστοχώρο',
    linkTypeInternalLocationLabel: '',
    linkTypeInternalLocationPlaceHolder: 'Δώστε μία διεύθυνση URI',
    linkTypeInternalNewWindowHeader: 'Νέο Παράθυρο',
    linkTypeInternalNewWindowLabel: 'Τσεκάρετε αυτό το κουτί γιά να ανοίξει ο σύνδεσμος σε ένα νέο παράθυρο/καρτέλα.',
    linkTypeInternalInfo:
        '<h2>Δεν είστε σίγουροι τι να βάλετε στο παραπάνω κουτί;</h2>' +
        '<ol>' +
        '    <li>Βρείτε τη σελίδα που θέλετε να συνδεθείτε σε αυτόν τον ιστοχώρο.</li>' +
        '    <li>Αντιγράψτε τη διεύθυνση internet από τη γραμμή διευθύνσεων του περιηγητή σας, εξαιρώντας το "{{domain}}" και επικολλήστε την στο παραπάνω κουτί.</li>' +
        '</ol>',

    logoTitle: 'Μάθετε περισσότερα γιά τον WYSIWYG Επεξεργαστή Κειμένου Raptor',

    navigateAway: '\nΥπάρχουν μη αποθηκευμένες αλλαγές σε αυτή τη σελίδα. \nΑν περιηγηθείτε έξω από αυτή τη σελίδα θα χάσετε τις μη αποθηκευμένες αλλαγές σας',

    pasteDialogTitle: 'Επικόλληση',
    pasteDialogOKButton: 'Εισαγωγή',
    pasteDialogCancelButton: 'Ακύρωση',
    pasteDialogPlain: 'Απλό Κείμενο',
    pasteDialogFormattedCleaned: 'Μορφοποιημένο &amp; Καθαρισμένο',
    pasteDialogFormattedUnclean: 'Μορφοποιημένο μη Καθαρισμένο',
    pasteDialogSource: 'Πηγαίος Κώδικας',

    placeholderPluginDefaultContent: '<br/>',

    saveTitle: 'Αποθήκευση περιεχομένου',
    saveNotConfigured: 'Η Αποθήκευση δεν έχει διαμορφωθεί ή είναι απενεργοποιημένη.',
    saveJsonFail: 'Απέτυχε η αποθήκευση {{failed}} των μπλοκ περιεχομένου',
    saveJsonSaved: 'Τα μπλοκ περιεχομένου αποθηκεύτηκαν με επιτυχία {{saved}}.',
    saveRestFail: 'Failed to save {{failed}} content block(s).',
    saveRestPartial: 'Saved {{saved}} out of {{failed}} content blocks.',
    saveRestSaved: 'Successfully saved {{saved}} content block(s).',

    snippetMenuTitle: 'Κομματάκια Κώδικα',

    specialCharactersArrows: 'Βέλη',
    specialCharactersDialogOKButton: 'OK',
    specialCharactersDialogTitle: 'Εισαγωγή ειδικών χαρακτήρων',
    specialCharactersGreekAlphabet: 'Ελληνικό Αλφάβητο',
    specialCharactersHelp: 'Κάντε κλικ σε έναν ειδικό χαρακτήρα γιά να τον εισάγετε. Κλικ στο "OK" όταν τελειώσετε γιά να κλείσετε αυτό το διάλογο',
    specialCharactersMathematics: 'Μαθηματικά',
    specialCharactersSymbols: 'Σύμβολα',
    specialCharactersTitle: 'Εισαγωγή ειδικού χαρακτήρα',

    statisticsButtonCharacterOverLimit: '{{charactersRemaining}} χαρακτήρες άνω του ορίου',
    statisticsButtonCharacterRemaining: 'Απομένουν {{charactersRemaining}} χαρακτήρες',
    statisticsButtonCharacters: '{{characters}} χαρακτήρες',
    statisticsDialogCharactersOverLimit: '{{characters}} χαρακτήρες, {{charactersRemaining}} παραπάνω από το συνιστώμενο όριο',
    statisticsDialogCharactersRemaining: '{{characters}} χαρακτήρες, {{charactersRemaining}} απομένουν',
    statisticsDialogNotTruncated: 'Το περιεχόμενο δεν θα περικοπεί',
    statisticsDialogOKButton: 'Ok',
    statisticsDialogSentence: '{{sentences}} πρόταση',
    statisticsDialogSentences: '{{sentences}} προτάσεις',
    statisticsDialogTitle: 'Στατιστικά Περιεχομένου',
    statisticsDialogTruncated: 'Το περιεχόμενο περιέχει πάνω από {{limit}} χαρακτήρες και ίσως περικοπεί',
    statisticsDialogWord: '{{words}} λέξη',
    statisticsDialogWords: '{{words}} λέξεις',
    statisticsTitle: 'Κλικ γιά προβολή των στατιστικών',

    tableCreateTitle: 'Δημιουργία πίνακα',
    tableDeleteColumnTitle: 'Διαγραφή στήλης πίνακα',
    tableDeleteRowTitle: 'Διαγραφή σειράς πίνακα',
    tableInsertColumnTitle: 'Εισαγωγή στήλης πίνακα',
    tableInsertRowTitle: 'Εισαγωγή σειράς πίνακας',
    tableMergeCellsTitle: 'Συγχώνευση κελιών πίνακα',
    tableSplitCellsTitle: 'Διαίρεση κελιών πίνακα',

    tagMenuTagH1: 'Επικεφαλίδα&nbsp;1',
    tagMenuTagH2: 'Επικεφαλίδα&nbsp;2',
    tagMenuTagH3: 'Επικεφαλίδα&nbsp;3',
    tagMenuTagH4: 'Επικεφαλίδα&nbsp;4',
    tagMenuTagNA: 'N/A',
    tagMenuTagP: 'Παράγραφος',
    tagMenuTagDiv: 'Div',
    tagMenuTagPre: 'Προ-μορφοποιημένη',
    tagMenuTagAddress: 'Διεύθυνση',
    tagMenuTitle: 'Αλλαγή στυλ στοιχείου',

    tagTreeElementLink: 'Επιλογή {{element}} στοιχείου',
    tagTreeElementTitle: 'Κλικ γιά να επιλέξετε τα περιεχόμενα του στοιχείου "{{element}}" ',
    tagTreeRoot: 'ρίζα',
    tagTreeRootLink: 'Επιλογή όλου του επεξεργάσιμου περιεχομένου',
    tagTreeRootTitle: 'Κλικ γιά να επιλέξετε όλο το επεξεργάσιμο περιεχόμενο',

    textBlockQuoteTitle: 'Μπλοκ Γνωμικού',
    textBoldTitle: 'Έντονα',
    textItalicTitle: 'Πλάγια',
    textStrikeTitle: 'Με Διαγραφή',
    textSubTitle: 'Δείκτης',
    textSuperTitle: 'Εκθέτης',
    textUnderlineTitle: 'Υπογράμμιση',
    textSizeDecreaseTitle: 'Ελάττωση μεγέθους κειμένου',
    textSizeIncreaseTitle: 'Αύξηση μεγέθους κειμένου',

    unsavedEditWarningText: 'Υπάρχουν μη αποθηκευμένες αλλαγές σε αυτή τη σελίδα',

    revisionsText: 'Αναθεωρήσεις',
    revisionsTextEmpty: 'Καμμία Αναθεώρηση',
    revisionsTitle: null,
    revisionsCreated: 'Δημιουργήθηκε',
    revisionsApplyButtonTitle: 'Επαναφορά',
    revisionsApplyButtonText: 'Επαναφορά',
    revisionsAJAXFailed: 'Απέτυχε η ανάκτηση αναθεωρήσεων',
    revisionsApplyButtonDialogCancelButton: 'Ακύρωση',
    revisionsApplyButtonDialogOKButton: 'Επαναφορά',
    revisionsApplyButtonDialogTitle: 'Επιβεβαίωση Επαναφοράς',
    revisionsApplyDialogContent: 'Η εργασία αυτή θα αντικαταστήσει το τρέχον περιεχόμενο με την επιλεγείσα αναθεώρηση.<br/>Το τρέχον περιεχόμενο θα προστεθεί στις αναθεωρήσεις και θα είναι ορατό στη λίστα αναθεωρήσεων γιά αυτό το μπλοκ.',
    revisionsDialogCancelButton: 'Ακύρωση',
    revisionsDialogTitle: 'Προβολή των αναθεωρήσεων του περιεχομένου',
    revisionsButtonCurrent: 'Τρέχουσα',
    revisionsButtonViewDiffText: 'Διαφορές',
    revisionsButtonViewDiffTitle: null,
    revisionsDiffButtonDialogCancelButton: 'Κλείσιμο',
    revisionsDiffButtonDialogTitle: 'Προβολή Διαφανειών',
    revisionsDiffButtonTitle: 'Προβολή Διαφανειών',
    revisionsDiffButtonText: 'Προβολή διαφανειών',
    revisionsLoading: 'Φόρτωση αναθεωρήσεων...',
    revisionsNone: 'Δεν υπάρχουν αναθεωρήσεις γιά αυτό το στοιχείο',
    revisionsPreviewButtonTitle: 'Προεπισκόπηση',
    revisionsPreviewButtonText: 'Προεπισκόπηση',

    fileManagerDialogTitle: 'Διαχείριση Αρχείων',
    fileManagerTitle: 'Διαχείριση Αρχείων',
    rfmClose: 'Κλείσιμο',
    rfmContinue: 'Συνέχεια',
    rfmDelete: 'Διαγραφή',
    rfmDownload: 'Λήψη',
    rfmFileActions: 'Ενέργειες',
    rfmFileModificationTime: 'Τροποποιήθηκε',
    rfmFileName: 'Όνομα',
    rfmFileSize: 'Μέγεθος',
    rfmFileType: 'Τύπος',
    rfmFilteredTotal: 'Εμφάνιση {{start}} έως {{end}} από {{filteredTotal}} αρχεία',
    rfmFirst: 'Πρώτο',
    rfmHeadingDirectories: 'Φάκελοι',
    rfmHeadingSearch: 'Αναζήτηση',
    rfmHeadingTags: 'Ετικέτες',
    rfmHeadingUpload: 'Μεταφόρτωση',
    rfmInsert: 'Εισαγωγή',
    rfmLast: 'Τελευταίο',
    rfmSearch: 'Εμπρός',
    rfmTagDocument: 'Έγγραφο',
    rfmTagImage: 'Εικόνα',
    rfmTotal: ', φιλτραρισμένα από {{total}}',
    rfmUpload: 'Μεταφόρτωση',
    rfmUploadBrowse: 'Περιήγηση',
    rfmUploadDrop: 'Άφησε εδώ τα Αρχεία',
    rfmUploadFileRemove: 'Αφαίρεση',
    rfmUploadOr: 'ή',
    rfmView: 'Προβολή',

    viewSourceDialogCancelButton: 'Κλείσιμο',
    viewSourceDialogOKButton: 'Εφαρμογή πηγαίου κώδικα',
    viewSourceDialogTitle: 'Πηγαίος κώδικας περιεχομένου',
    viewSourceTitle: 'Προβολή/Επεξεργασία πηγαίου κώδικα'
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/el.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/en.js
/**
 * @fileOverview English strings file.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 */
extendLocale('en', 'English', {
    alignCenterTitle: 'Align text center',
    alignJustifyTitle: 'Align text justify',
    alignLeftTitle: 'Align text left',
    alignRightTitle: 'Align text right',

    cancelDialogCancelButton: 'Continue Editing',
    cancelDialogContent: 'Are you sure you want to cancel editing? All changes will be lost!',
    cancelDialogOKButton: 'Cancel Editing',
    cancelDialogTitle: 'Cancel Editing',
    cancelTitle: 'Cancel editing',

    classMenuTitle: 'Style picker',
    cleanBlockTitle: 'Clean block',
    clearFormattingTitle: 'Clear formatting',
    clickButtonToEditText: 'Edit',
    clickButtonToEditTitle: null,

    closeTitle: 'Close this toolbar',

    colorMenuBasicAutomatic: 'Automatic',
    colorMenuBasicBlack: 'Black',
    colorMenuBasicBlue: 'Blue',
    colorMenuBasicGreen: 'Green',
    colorMenuBasicGrey: 'Grey',
    colorMenuBasicOrange: 'Orange',
    colorMenuBasicPurple: 'Purple',
    colorMenuBasicRed: 'Red',
    colorMenuBasicTitle: 'Change text color',
    colorMenuBasicWhite: 'White',

    dockToElementTitle: 'Dock/undock editor to element',
    dockToScreenTitle: 'Dock/undock editor to screen',

    embedTitle: 'Embed object',
    embedDialogTitle: 'Embed Object',
    embedDialogTabCode: 'Embed Code',
    embedDialogTabCodeContent: 'Paste your embed code into the text area below:',
    embedDialogTabPreview: 'Preview',
    embedDialogTabPreviewContent: 'A preview of your embedded object is displayed below:',
    embedDialogOKButton: 'Embed Object',
    embedDialogCancelButton: 'Cancel',

    errorUINoName: 'UI "{{ui}}" is invalid (must have a name property)',
    errorUINotObject: 'UI "{{ui}}" is invalid (must be an object)',
    errorUIOverride: 'UI "{{name}}" has already been registered, and will be overwritten',

    editPageDialogTitle: 'Edit Page',
    editPageDialogOKButton: 'Save',
    editPageDialogCancelButton: 'Cancel',

    floatLeftTitle: 'Align image to the left',
    floatNoneTitle: 'Remove image align',
    floatRightTitle: 'Align image to the right',

    fontFamilyMenuTitle: 'Choose your font',
    fontFamilyMenuFontDefault: 'Default Font',
    fontFamilyMenuFontArial: 'Arial',
    fontFamilyMenuFontPalatino: 'Palatino',
    fontFamilyMenuFontGeorgia: 'Georgia',
    fontFamilyMenuFontTimes: 'Times New Roman',
    fontFamilyMenuFontComicSans: 'Comic Sans',
    fontFamilyMenuFontImpact: 'Impact',
    fontFamilyMenuFontCourier: 'Courier New',

    guidesTitle: 'Show element guides',

    historyRedoTitle: 'Redo',
    historyUndoTitle: 'Undo',

    hrCreateTitle: 'Insert Horizontal Rule',

    imageResizeDialogWidth: 'Image width',
    imageResizeDialogHeight: 'Image height',
    imageResizeDialogWidthPlaceHolder: 'Width',
    imageResizeDialogHeightPlaceHolder: 'Height',
    imageResizeDialogTitle: 'Resize Image',
    imageResizeDialogOKButton: 'Resize',
    imageResizeDialogCancelButton: 'Cancel',
    imageResizeTitle: 'Resize this image',

    insertFileTitle: 'Insert file',
    insertFileDialogTitle: 'Insert file',
    insertFileDialogOKButton: 'Insert file',
    insertFileDialogCancelButton: 'Cancel',
    insertFileURLLabel: 'File URL',
    insertFileNameLabel: 'File Name',
    insertFileURLPlaceHolder: 'File URL...',
    insertFileNamePlaceHolder: 'File Name...',

    languageMenuTitle: 'Change Language',

    loremIpsumTitle: 'Insert dummy text for testing',

    listOrderedTitle: 'Ordered list',
    listUnorderedTitle: 'Unordered list',

    linkCreateTitle: 'Insert Link',
    linkRemoveTitle: 'Remove Link',

    linkCreateDialogTitle: 'Insert Link',
    linkCreateDialogOKButton: 'Insert Link',
    linkCreateDialogCancelButton: 'Cancel',
    linkCreateDialogMenuHeader: 'Choose a link type',

    linkTypeEmailLabel: 'Email address',
    linkTypeEmailHeader: 'Link to an email address',
    linkTypeEmailToLabel: 'Email:',
    linkTypeEmailToPlaceHolder: 'Enter email address',
    linkTypeEmailSubjectLabel: 'Subject (optional):',
    linkTypeEmailSubjectPlaceHolder: 'Enter subject',

    linkTypeExternalLabel: 'Page on another website',
    linkTypeExternalHeader: 'Link to a page on another website',
    linkTypeExternalLocationLabel: 'Location:',
    linkTypeExternalLocationPlaceHolder: 'Enter a URL',
    linkTypeExternalNewWindowHeader: 'New window',
    linkTypeExternalNewWindowLabel: 'Check this box to have the link open in a new browser window/tab.',
    linkTypeExternalInfo:
        '<h2>Not sure what to put in the box above?</h2>' +
        '<ol>' +
        '    <li>Find the page on the web you want to link to.</li>' +
        '    <li>Copy the web address from your browser\'s address bar and paste it into the box above.</li>' +
        '</ol>',

    linkTypeDocumentLabel: 'Document or other file',
    linkTypeDocumentHeader: 'Link to a document or other file',
    linkTypeDocumentLocationLabel: 'Location:',
    linkTypeDocumentLocationPlaceHolder: 'Enter a URL',
    linkTypeDocumentNewWindowHeader: 'New window',
    linkTypeDocumentNewWindowLabel: 'Check this box to have the file open in a new browser window/tab.',
    linkTypeDocumentInfo:
        '<h2>Not sure what to put in the box above?</h2>' +
        '<ol>' +
        '    <li>Ensure the file has been uploaded to your website.</li>' +
        '    <li>Open the uploaded file in your browser.</li>' +
        '    <li>Copy the file\'s URL from your browser\'s address bar and paste it into the box above.</li>' +
        '</ol>',

    linkTypeInternalLabel: 'Page on this website',
    linkTypeInternalHeader: 'Link to a page on this website',
    linkTypeInternalLocationLabel: '',
    linkTypeInternalLocationPlaceHolder: 'Enter a URI',
    linkTypeInternalNewWindowHeader: 'New window',
    linkTypeInternalNewWindowLabel: 'Check this box to have the link open in a new browser window/tab.',
    linkTypeInternalInfo:
        '<h2>Not sure what to put in the box above?</h2>' +
        '<ol>' +
        '    <li>Find the page on this site link to.</li>' +
        '    <li>Copy the web address from your browser\'s address bar, excluding "{{domain}}" and paste it into the box above.</li>' +
        '</ol>',

    logoTitle: 'Learn More About the Raptor WYSIWYG Editor',

    navigateAway: '\nThere are unsaved changes on this page. \nIf you navigate away from this page you will lose your unsaved changes',

    pasteDialogTitle: 'Paste',
    pasteDialogOKButton: 'Insert',
    pasteDialogCancelButton: 'Cancel',
    pasteDialogPlain: 'Plain Text',
    pasteDialogFormattedCleaned: 'Formatted &amp; Cleaned',
    pasteDialogFormattedUnclean: 'Formatted Unclean',
    pasteDialogSource: 'Source Code',

    placeholderPluginDefaultContent: '<br/>',

    saveTitle: 'Save content',
    saveNotConfigured: 'Save has not been configured, or is disabled.',
    saveJsonFail: 'Failed to save {{failed}} content block(s)',
    saveJsonSaved: 'Successfully saved {{saved}} content block(s).',
    saveRestFail: 'Failed to save {{failed}} content block(s).',
    saveRestPartial: 'Saved {{saved}} out of {{failed}} content blocks.',
    saveRestSaved: 'Successfully saved {{saved}} content block(s).',

    snippetMenuTitle: 'Snippets',

    specialCharactersArrows: 'Arrows',
    specialCharactersDialogOKButton: 'OK',
    specialCharactersDialogTitle: 'Insert Special Characters',
    specialCharactersGreekAlphabet: 'Greek Alphabet',
    specialCharactersHelp: 'Click a special character to add it. Click "OK" when done to close this dialog',
    specialCharactersMathematics: 'Mathematics',
    specialCharactersSymbols: 'Symbols',
    specialCharactersTitle: 'Insert a special character',

    statisticsButtonCharacterOverLimit: '{{charactersRemaining}} characters over limit',
    statisticsButtonCharacterRemaining: '{{charactersRemaining}} characters remaining',
    statisticsButtonCharacters: '{{characters}} characters',
    statisticsDialogCharactersOverLimit: '{{characters}} characters, {{charactersRemaining}} over the recommended limit',
    statisticsDialogCharactersRemaining: '{{characters}} characters, {{charactersRemaining}} remaining',
    statisticsDialogNotTruncated: 'Content will not be truncated',
    statisticsDialogOKButton: 'Ok',
    statisticsDialogSentence: '{{sentences}} sentence',
    statisticsDialogSentences: '{{sentences}} sentences',
    statisticsDialogTitle: 'Content Statistics',
    statisticsDialogTruncated: 'Content contains more than {{limit}} characters and may be truncated',
    statisticsDialogWord: '{{words}} word',
    statisticsDialogWords: '{{words}} words',
    statisticsTitle: 'Click to view statistics',

    imageSwapTitle: 'Swap this image',

    tableCreateTitle: 'Create table',
    tableDeleteColumnTitle: 'Delete table column',
    tableDeleteRowTitle: 'Delete table row',
    tableInsertColumnTitle: 'Insert table column',
    tableInsertRowTitle: 'Insert table row',
    tableMergeCellsTitle: 'Merge table cells',
    tableSplitCellsTitle: 'Split table cells',

    tagMenuTagH1: 'Heading&nbsp;1',
    tagMenuTagH2: 'Heading&nbsp;2',
    tagMenuTagH3: 'Heading&nbsp;3',
    tagMenuTagH4: 'Heading&nbsp;4',
    tagMenuTagNA: 'N/A',
    tagMenuTagP: 'Paragraph',
    tagMenuTagDiv: 'Div',
    tagMenuTagPre: 'Pre-formatted',
    tagMenuTagAddress: 'Address',
    tagMenuTitle: 'Change element style',

    tagTreeElementLink: 'Select {{element}} element',
    tagTreeElementTitle: 'Click to select the contents of the "{{element}}" element',
    tagTreeRoot: 'root',
    tagTreeRootLink: 'Select all editable content',
    tagTreeRootTitle: 'Click to select all editable content',

    textBlockQuoteTitle: 'Block quote',
    textBoldTitle: 'Bold',
    textItalicTitle: 'Italic',
    textStrikeTitle: 'Strike through',
    textSubTitle: 'Sub-script',
    textSuperTitle: 'Super-script',
    textUnderlineTitle: 'Underline',
    textSizeDecreaseTitle: 'Decrease text size',
    textSizeIncreaseTitle: 'Increase text size',

    unsavedEditWarningText: 'There are unsaved changes on this page',

    revisionsText: 'Revisions',
    revisionsTextEmpty: 'No Revisions',
    revisionsTitle: null,
    revisionsCreated: 'Created',
    revisionsApplyButtonTitle: 'Rollback',
    revisionsApplyButtonText: 'Rollback',
    revisionsAJAXFailed: 'Failed to retrieve revisions',
    revisionsApplyButtonDialogCancelButton: 'Cancel',
    revisionsApplyButtonDialogOKButton: 'Rollback',
    revisionsApplyButtonDialogTitle: 'Rollback Confirmation',
    revisionsApplyDialogContent: 'This will replace the current content with the selected revision.<br/>The current content will be added as a revision, and will be visible in the revisions list for this block.',
    revisionsDialogCancelButton: 'Cancel',
    revisionsDialogTitle: 'View content revisions',
    revisionsButtonCurrent: 'Current',
    revisionsButtonViewDiffText: 'Differences',
    revisionsButtonViewDiffTitle: null,
    revisionsDiffButtonDialogCancelButton: 'Close',
    revisionsDiffButtonDialogTitle: 'View differences',
    revisionsDiffButtonTitle: 'View differences',
    revisionsDiffButtonText: 'View differences',
    revisionsLoading: 'Loading revisions...',
    revisionsNone: 'No revisions for this element',
    revisionsPreviewButtonTitle: 'Preview',
    revisionsPreviewButtonText: 'Preview',

    fileManagerDialogTitle: 'File Manager',
    fileManagerTitle: 'File Manager',
    rfmClose: 'Close',
    rfmContinue: 'Continue',
    rfmDeleteTitle: 'Delete',
    rfmDownloadTitle: 'Download',
    rfmEditTitle: 'Edit',
    rfmFileActions: 'Actions',
    rfmFileModificationTime: 'Modified',
    rfmFileName: 'Name',
    rfmFileSize: 'Size',
    rfmFileType: 'Type',
    rfmFilteredTotal: 'Showing {{start}} to {{end}} of {{filteredTotal}} files',
    rfmFirst: 'First',
    rfmHeadingDirectories: 'Directories',
    rfmHeadingSearch: 'Search',
    rfmHeadingTags: 'Tags',
    rfmHeadingUpload: 'Upload',
    rfmInsertTitle: 'Insert',
    rfmLast: 'Last',
    rfmRenameTitle: 'Rename',
    rfmSearch: 'Go',
    rfmTagDocument: 'Document',
    rfmTagImage: 'Image',
    rfmTotal: ', filtered from {{total}}',
    rfmUpload: 'Upload',
    rfmUploadBrowse: 'Browse',
    rfmUploadDrop: 'Drop Files Here',
    rfmUploadFileRemove: 'Remove',
    rfmUploadOr: 'or',
    rfmViewTitle: 'View',

    imageEditorDialogCancelButton: 'Cancel',
    imageEditorDialogOKButton: 'Save',
    imageEditorDialogTitle: 'Image Editor',
    imageEditorTitle: 'Edit Image',
    rieApply: 'Apply',
    rieBlurTitle: 'Blur',
    rieBrightnessTitle: 'Brightness/Contrast',
    rieCancel: 'Cancel',
    rieCancelTitle: 'Cancel',
    rieColorAdjustTitle: 'Adjust Color',
    rieCropTitle: 'Crop',
    rieDesaturateTitle: 'Desaturate',
    rieFlipHTitle: 'Flip Horizontally',
    rieFlipVTitle: 'Flip Vertically',
    rieGlowTitle: 'Glow',
    rieHslTitle: 'Hue, Saturation, Lightness.',
    rieInvertTitle: 'Invert',
    riePosterizeTitle: 'Posterize',
    rieRedoTitle: 'Redo',
    rieRemoveNoiseTitle: 'Remove Noise',
    rieResizeTitle: 'Resize',
    rieRevertTitle: 'Revert',
    rieRotateLeftTitle: 'Rotate Left',
    rieRotateRightTitle: 'Rotate Right',
    rieSaveTitle: 'Save',
    rieSaveTitle: 'Save',
    rieSepiaTitle: 'Sepia',
    rieSharpenTitle: 'Sharpen',
    rieSolarizeTitle: 'Solarize',
    rieUndoTitle: 'Undo',
    rieUploadTitle: 'Upload',

    rieActionColorAdjustRed: 'Red',
    rieActionColorAdjustGreen: 'Green',
    rieActionColorAdjustBlue: 'Blue',
    rieActionBrightnessBrightness: 'Brightness',
    rieActionBrightnessContrast: 'Contrast',
    rieActionGlowAmount: 'Glow Amount',
    rieActionGlowRadius: 'Glow Radius',
    rieActionHslHue: 'Hue',
    rieActionHslSaturation: 'Saturation',
    rieActionHslLightness: 'Lightness',
    rieActionPosterize: 'Levels',
    rieActionPosterizeLevels: 'Posterize Levels',

    viewSourceDialogCancelButton: 'Close',
    viewSourceDialogOKButton: 'Apply source code',
    viewSourceDialogTitle: 'Content source code',
    viewSourceTitle: 'View/edit source code'
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/en.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/es.js
/**
 * @fileOverview Spanish strings file.
 * @license http://www.raptor-editor.com/license
 *
 * @author Francisco Martínez (JnxF), paco.7070@hotmail.com, https://twitter.com/ElJnxF
 */
extendLocale('es', 'Español', {
    alignCenterTitle: "Centrar",
    alignJustifyTitle: "Justificar",
    alignLeftTitle: "Alinear a la Izquierda",
    alignRightTitle: "Alinear a la Derecha",
    cancelDialogCancelButton: "Cerrar",
    cancelDialogContent: "¿Está seguro de que desea detener la edición? ¡Todos los cambios serán perdidos!",
    cancelDialogOKButton: "Aceptar",
    cancelDialogTitle: "Cancel Editing",
    cancelTitle: "Cancel editing",
    classMenuTitle: "Selector de estilo",
    clearFormattingTitle: "Limpiar Formato",
    clickButtonToEditPluginButton: "Haga clic para empezar a editar",
    clickButtonToEditText: "Editar",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatic",
    colorMenuBasicBlack: "Black",
    colorMenuBasicBlue: "Blue",
    colorMenuBasicGreen: "Green",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Purple",
    colorMenuBasicRed: "Red",
    colorMenuBasicTitle: "Cambiar el color del texto seleccionado.",
    colorMenuBasicWhite: "White",
    dockToElementTitle: "Dock editor to element",
    dockToScreenTitle: "Dock editor to screen",
    embedDialogCancelButton: "Cancelar",
    embedDialogOKButton: "Incrustar objeto",
    embedDialogTabCode: "Incrustar código",
    embedDialogTabCodeContent: "Pegue el código de embed en el área de texto abajo:",
    embedDialogTabPreview: "Vista previa",
    embedDialogTabPreviewContent: "A continuación se muestra una vista previa de tu objeto incrustado:",
    embedDialogTitle: "Incrustar objeto",
    embedTitle: "Objeto incrustado",
    errorPluginNoName: "Plugin \"{{plugin}}\" is invalid (must have a name property)",
    errorPluginNotObject: "Plugin \"{{plugin}}\" is invalid (must be an object)",
    errorPluginOverride: "Plugin \"{{name}}\" has already been registered, and will be overwritten",
    errorUINoName: "UI \"{{ui}}\" is invalid (must have a name property)",
    errorUINotObject: "UI \"{{ui}}\" is invalid (must be an object)",
    errorUIOverride: "UI \"{{name}}\" has already been registered, and will be overwritten",
    fileManagerDialogTitle: "Administrador de archivos",
    fileManagerTitle: "Administrador de archivos",
    floatLeftTitle: "Flotar Imagen a la Izquierda",
    floatNoneTitle: "Remove image align",
    floatRightTitle: "Flotar Imagen a la Derecha",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Comic sin",
    fontFamilyMenuFontCourier: "Nuevo mensajero",
    fontFamilyMenuFontDefault: "Fuente predeterminada",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Impacto",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Elija la fuente",
    guidesTitle: "Mostrar Guías",
    historyRedoTitle: "Redo",
    historyUndoTitle: "Undo",
    hrCreateTitle: "Insertar la regla Horizontal",
    imageResizeButtonDialogCancelButton: "Cancelar",
    imageResizeButtonDialogHeight: "Altura de la imagen",
    imageResizeButtonDialogHeightPlaceHolder: "Altura",
    imageResizeButtonDialogOKButton: "Cambiar el tamaño de",
    imageResizeButtonDialogTitle: "Redimensionar imagen",
    imageResizeButtonDialogWidth: "Ancho de imagen",
    imageResizeButtonDialogWidthPlaceHolder: "Ancho",
    imageResizeButtonText: "Redimensionar imagen",
    insertFileDialogCancelButton: "Cancelar",
    insertFileDialogOKButton: "Insertar archivo",
    insertFileNameLabel: "Nombre de archivo",
    insertFileNamePlaceHolder: "Nombre de archivo...",
    insertFileTitle: "Insertar archivo",
    insertFileURLLabel: "URL del archivo",
    insertFileURLPlaceHolder: "URL del archivo...",
    languageMenuTitle: "Cambiar idioma",
    linkCreateDialogCancelButton: "Cancelar",
    linkCreateDialogMenuHeader: "Elija un tipo de enlace",
    linkCreateDialogOKButton: "Introduzca el enlace",
    linkCreateDialogTitle: "Introduzca el enlace",
    linkCreateTitle: "Introduzca el enlace",
    linkDialogCancelButton: "Cancelar",
    linkDialogMenuHeader: "Escoja un tipo de enlace:",
    linkDialogOKButton: "Insertar Enlace",
    linkDialogTitle: "Insertar Enlace",
    linkRemoveTitle: "Quitar vínculo",
    linkTypeDocumentHeader: "Enlace a un documento o de otro tipo de archivo",
    linkTypeDocumentInfo: "<h2>¿No estoy seguro qué poner en la caja de arriba?<\/h2><ol>    <li>Asegúrese de que el archivo se ha subido a su sitio Web.<\/li>    <li>Abra el archivo en su navegador.<\/li>    <li>Copiar la URL del archivo de la barra de direcciones de tu navegador y pegarlo en el cuadro de arriba.<\/li><\/ol>",
    linkTypeDocumentLabel: "Documento u otro archivo",
    linkTypeDocumentLocationLabel: "Ubicación:",
    linkTypeDocumentLocationPlaceHolder: "Introduzca una URL",
    linkTypeDocumentNewWindowHeader: "Nueva ventana",
    linkTypeDocumentNewWindowLabel: "Marque esta casilla para tener el archivo abierto en una nueva ventana\/pestaña del navegador.",
    linkTypeEmailHeader: "Enlazar a una dirección de correo electrónico",
    linkTypeEmailLabel: "Dirección de correo electrónico",
    linkTypeEmailSubjectLabel: "Sujeto (opcional):",
    linkTypeEmailSubjectPlaceHolder: "Introduzca un sujeto",
    linkTypeEmailToLabel: "Correo electrónico:",
    linkTypeEmailToPlaceHolder: "Introduzca una dirección de correo electrónico",
    linkTypeExternalHeader: "Link to a page on another website",
    linkTypeExternalInfo: "<h2>¿No está seguro de qué poner en la caja anterior?<\/h2><ol>    <li>Busque la página web a la que desee enlazar<\/li>    <li>Copie la dirección web desde la barra de dirección de su navegador y péguela en la caja superior.<\/li><\/ol>",
    linkTypeExternalLabel: "Page on another website",
    linkTypeExternalLocationLabel: "Localización",
    linkTypeExternalLocationPlaceHolder: "Introduzca una URL",
    linkTypeExternalNewWindowHeader: "Nueva ventana",
    linkTypeExternalNewWindowLabel: "Marque esta casilla para que el enlace se abra en una nueva ventana.",
    linkTypeInternalHeader: "Link to a page on this website",
    linkTypeInternalInfo: "<h2>¿No está seguro de qué poner en la caja anterior?<\/h2><ol>    <li>Find the page on this site link to.<\/li>    <li>Copy the web address from your browser's address bar, excluding \"{{domain}}\" and paste it into the box above.<\/li><\/ol>",
    linkTypeInternalLabel: "Page on this website",
    linkTypeInternalLocationLabel: "Localización",
    linkTypeInternalLocationPlaceHolder: "Introducir un identificador URI",
    linkTypeInternalNewWindowHeader: "Nueva ventana",
    linkTypeInternalNewWindowLabel: "Marque esta casilla para que el enlace se abra en una nueva ventana.",
    listOrderedTitle: "Lista Ordenada",
    listUnorderedTitle: "Lista Desordenada",
    logoTitle: "Saber más sobre el editor WYSIWYG Raptor",
    loremIpsumTitle: "Insertar texto simulado para la prueba",
    navigateAway: "\nAllí están sin guardar los cambios en esta página. \nSi usted navegar lejos esta página perderá los cambios no guardados",
    pasteDialogCancelButton: "Cancelar",
    pasteDialogFormattedCleaned: "Formatear y limpiar",
    pasteDialogFormattedUnclean: "Formato inmundo",
    pasteDialogOKButton: "Insertar",
    pasteDialogPlain: "Texto sin formato",
    pasteDialogSource: "Código fuente",
    pasteDialogTitle: "Pasta",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "No se pudo recuperar revisiones",
    revisionsApplyButtonDialogCancelButton: "Cancelar",
    revisionsApplyButtonDialogOKButton: "Rollback",
    revisionsApplyButtonDialogText: "Confirmación de reversión",
    revisionsApplyButtonDialogTitle: "Confirmación de reversión",
    revisionsApplyButtonText: "Rollback",
    revisionsApplyButtonTitle: "Rollback",
    revisionsApplyDialogContent: "Esto reemplazará el contenido actual con la revisión seleccionada.<br>El contenido actual se añadirá como revisión y será visible en la lista de revisiones de este bloque.",
    revisionsButtonCurrent: "Corriente",
    revisionsButtonViewDiffText: "Diferencias",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Creado",
    revisionsDialogCancelButton: "Cancelar",
    revisionsDialogTitle: "Ver contenidas revisiones",
    revisionsDiffButtonDialogCancelButton: "Cerrar",
    revisionsDiffButtonDialogTitle: "Diferencias de opinión",
    revisionsDiffButtonText: "Diferencias de opinión",
    revisionsDiffButtonTitle: "Diferencias de opinión",
    revisionsLoading: "Cargando las revisiones...",
    revisionsNone: "No hay revisiones para este elemento",
    revisionsPreviewButtonText: "Vista previa",
    revisionsPreviewButtonTitle: "Vista previa",
    revisionsText: "Revisiones",
    revisionsTextEmpty: "No hay revisiones",
    revisionsTitle: "",
    rfmClose: "Cerrar",
    rfmContinue: "Continuar",
    rfmDelete: "Borrar",
    rfmDownload: "Descargar",
    rfmFileActions: "Acciones",
    rfmFileModificationTime: "Modificado",
    rfmFileName: "Nombre",
    rfmFileSize: "Tamaño",
    rfmFileType: "Tipo",
    rfmFilteredTotal: "{{start}} muestra acabar {{end}} {{filteredTotal}} archivos",
    rfmFirst: "Primero",
    rfmHeadingDirectories: "Directorios",
    rfmHeadingSearch: "Búsqueda de",
    rfmHeadingTags: "Etiquetas",
    rfmHeadingUpload: "Subir",
    rfmInsert: "Insertar",
    rfmLast: "Duran",
    rfmSearch: "Ir",
    rfmTagDocument: "Documento",
    rfmTagImage: "Imagen",
    rfmTotal: ", filtrado de {{total}}",
    rfmUpload: "Subir",
    rfmUploadBrowse: "Browse",
    rfmUploadDrop: "Soltar archivos aquí",
    rfmUploadFileRemove: "Quitar",
    rfmUploadOr: "o",
    rfmView: "Vista",
    saveJsonFail: "No se pudo guardar bloques contenidos {{failed}}",
    saveJsonSaved: "Guardado correctamente bloques contenidos {{saved}}.",
    saveNotConfigured: "Guardar no se ha configurado, o está deshabilitada.",
    saveRestFail: "Error al guardar bloques contenidos {{failed}}.",
    saveRestPartial: "Salvado {{saved}} {{failed}} bloques de contenido.",
    saveRestSaved: "Guardado correctamente bloques contenidos {{saved}}.",
    saveTitle: "Guardar",
    snippetMenuTitle: "Fragmentos de código",
    specialCharactersArrows: "Flechas",
    specialCharactersDialogOKButton: "Vale",
    specialCharactersDialogTitle: "Insertar caracteres especiales",
    specialCharactersGreekAlphabet: "Alfabeto griego",
    specialCharactersHelp: "Haga clic en un carácter especial para añadirla. Haga clic en \"Aceptar\" cuando se hace para cerrar este cuadro de diálogo",
    specialCharactersMathematics: "Matemáticas",
    specialCharactersSymbols: "Símbolos",
    specialCharactersTitle: "Insertar un carácter especial",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} carácter(es) sobre el límite",
    statisticsButtonCharacterRemaining: "Queda(n) {{charactersRemaining}} carácter(es)",
    statisticsButtonCharacters: "{{characters}} carácteres",
    statisticsDialogCharactersOverLimit: "{{characters}} carácter(es), {{charactersRemaining}} sobre el límite recomendado",
    statisticsDialogCharactersRemaining: "{{characters}} carácter(es), queda(n) {{charactersRemaining}}",
    statisticsDialogNotTruncated: "El contenido no será truncado",
    statisticsDialogOKButton: "Aceptar",
    statisticsDialogSentence: "{{sentences}} sentence",
    statisticsDialogSentences: "{{sentences}} oraciones",
    statisticsDialogTitle: "Contenidos Estadísticos",
    statisticsDialogTruncated: "El contenido contiene más de {{limit}} carácteres y debe ser truncado",
    statisticsDialogWord: "{{words}} palabra",
    statisticsDialogWords: "{{words}} palabras",
    statisticsTitle: "Haga clic para ver las estadísticas",
    tableCreateTitle: "Create table",
    tableDeleteColumnTitle: "Delete table column",
    tableDeleteRowTitle: "Delete table row",
    tableInsertColumnTitle: "Insert table column",
    tableInsertRowTitle: "Insert table row",
    tableMergeCellsTitle: "Combinar celdas de una tabla",
    tableSplitCellsTitle: "Dividir celdas de tabla",
    tagMenuTagAddress: "Dirección",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Encabezado&nbsp;1",
    tagMenuTagH2: "Encabezado&nbsp;2",
    tagMenuTagH3: "Encabezado&nbsp;3",
    tagMenuTagH4: "Rúbrica 4",
    tagMenuTagNA: false,
    tagMenuTagP: "Párrafo",
    tagMenuTagPre: "Preformateados",
    tagMenuTitle: "Change element style",
    tagTreeElementLink: "Seleccionar el elemento {{element}}",
    tagTreeElementTitle: "Haga clic para selecionar el contenido del elemento \"{{element}}\"",
    tagTreeRoot: "orígen",
    tagTreeRootLink: "Seleccionar todo el contenido editable",
    tagTreeRootTitle: "Haga clic para seleccionar todo el contenido editable",
    textBlockQuoteTitle: "Cita en bloque",
    textBoldTitle: "Negrita",
    textItalicTitle: "Cursiva",
    textSizeDecreaseTitle: "Disminuir el tamaño del texto",
    textSizeIncreaseTitle: "Aumentar tamaño del texto",
    textStrikeTitle: "Tachado",
    textSubTitle: "Subíndice",
    textSuperTitle: "Superíndice",
    textUnderlineTitle: "Subrayar",
    unsavedEditWarningText: "Hay cambios sin guardar en esta página.",
    viewSourceDialogCancelButton: "Cerrar",
    viewSourceDialogOKButton: "Aplicar Fuente",
    viewSourceDialogTitle: "Content source code",
    viewSourceTitle: "Ver \/ Editar Código Fuente"
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/es.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/et.js
/**
 * @fileOverview Estonian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('et', 'Eesti', {
    alignCenterTitle: "Joonda tekst keskele",
    alignJustifyTitle: "Teksti joondamine õigustada",
    alignLeftTitle: "Joonda tekst vasakule",
    alignRightTitle: "Joonda tekst paremale",
    cancelDialogCancelButton: "Jätka redigeerimist",
    cancelDialogContent: "Kas kindlasti redigeerimise tühistada? Kõik muudatused lähevad kaotsi!",
    cancelDialogOKButton: "Tühista redigeerimine",
    cancelDialogTitle: "Tühista redigeerimine",
    cancelTitle: "Tühista redigeerimine",
    classMenuTitle: "Stiili valija",
    clearFormattingTitle: "Eemalda vorming",
    clickButtonToEditText: "Redigeeri",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automaatne",
    colorMenuBasicBlack: "Must",
    colorMenuBasicBlue: "Sinine",
    colorMenuBasicGreen: "Roheline",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Lilla",
    colorMenuBasicRed: "Punane",
    colorMenuBasicTitle: "Teksti värvi muutmine",
    colorMenuBasicWhite: "Valge",
    dockToElementTitle: "Elemendi toimetaja Doki\/Doki lahti",
    dockToScreenTitle: "Doki\/lahtidokkimine toimetaja kuvale",
    embedDialogCancelButton: "Loobu",
    embedDialogOKButton: "Embed objekt",
    embedDialogTabCode: "Integreeritud kood",
    embedDialogTabCodeContent: "Embed koodeksi kleepige tekst ala allpool:",
    embedDialogTabPreview: "Eelvaade",
    embedDialogTabPreviewContent: "Allpool kuvatakse eelvaade teie manusobjekti:",
    embedDialogTitle: "Embed objekt",
    embedTitle: "Embed objekt",
    errorUINoName: "UI \"{{ui}}\" ei sobi (peab olema nime atribuut)",
    errorUINotObject: "UI \"{{ui}}\" ei sobi (peab olema objekt)",
    errorUIOverride: "UI \"{{name}}\" on juba registreeritud ja kirjutatakse",
    fileManagerDialogTitle: "Failihaldur",
    fileManagerTitle: "Failihaldur",
    floatLeftTitle: "Joonda vasakule pildi",
    floatNoneTitle: "Eemalda foto joondamine",
    floatRightTitle: "Joonda paremale pilt",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Koomiline ilma",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Vaikefont",
    fontFamilyMenuFontGeorgia: "Gruusia",
    fontFamilyMenuFontImpact: "Mõju",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Korda uus Rooma",
    fontFamilyMenuTitle: "Teie fondi valimine",
    guidesTitle: "Kuva element juhendid",
    historyRedoTitle: "Tee uuesti",
    historyUndoTitle: "Võta tagasi",
    hrCreateTitle: "Sisesta horisontaalne joonlaud",
    imageResizeButtonDialogCancelButton: "Loobu",
    imageResizeButtonDialogHeight: "Pildi kõrgus",
    imageResizeButtonDialogHeightPlaceHolder: "Kõrgus",
    imageResizeButtonDialogOKButton: "Suuruse muutmine",
    imageResizeButtonDialogTitle: "Pildi suuruse muutmine",
    imageResizeButtonDialogWidth: "Pildi laius",
    imageResizeButtonDialogWidthPlaceHolder: "Laius",
    imageResizeButtonText: "Pildi suuruse muutmine",
    insertFileDialogCancelButton: "Loobu",
    insertFileDialogOKButton: "Faili lisamine",
    insertFileNameLabel: "Faili nimi",
    insertFileNamePlaceHolder: "Faili nimi...",
    insertFileTitle: "Faili lisamine",
    insertFileURLLabel: "Faili URL",
    insertFileURLPlaceHolder: "Faili URL...",
    languageMenuTitle: "Keele muutmine",
    linkCreateDialogCancelButton: "Loobu",
    linkCreateDialogMenuHeader: "Valige seose tüüp",
    linkCreateDialogOKButton: "Lingi lisamine",
    linkCreateDialogTitle: "Lingi lisamine",
    linkCreateTitle: "Lingi lisamine",
    linkRemoveTitle: "Eemalda Link",
    linkTypeDocumentHeader: "Link dokumendi või muu fail",
    linkTypeDocumentInfo: "<h2>Ei ole kindel, mida teha eespool kasti?<\/h2><ol>    <li>Tagada faili veebisaidile üles laadida.<\/li>    <li>Üleslaaditud faili avada brauseris.<\/li>    <li>Kopeerida selle faili URL brauseri aadressiribale ja kleepige see kasti eespool.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokumendi või muu fail",
    linkTypeDocumentLocationLabel: "Asukoht:",
    linkTypeDocumentLocationPlaceHolder: "Sisestage URL",
    linkTypeDocumentNewWindowHeader: "Uues aknas",
    linkTypeDocumentNewWindowLabel: "Märkige see ruut, et avage uus brauseri aken\/kaart faili.",
    linkTypeEmailHeader: "Link e-posti aadress",
    linkTypeEmailLabel: "E-posti aadress",
    linkTypeEmailSubjectLabel: "Teema (kohustuslik):",
    linkTypeEmailSubjectPlaceHolder: "Sisestage teema",
    linkTypeEmailToLabel: "E-post:",
    linkTypeEmailToPlaceHolder: "Sisestage e-posti aadress",
    linkTypeExternalHeader: "Lehe teisele veebilehele linkimine",
    linkTypeExternalInfo: "<h2>Ei ole kindel, mida teha eespool kasti?<\/h2><ol>    <li>Leida lehele soovite linkida veebis.<\/li>    <li>Kopeeri aadress oma brauseri aadressiribale ja kleepige see kasti eespool.<\/li><\/ol>",
    linkTypeExternalLabel: "Lehe teisele lehele",
    linkTypeExternalLocationLabel: "Asukoht:",
    linkTypeExternalLocationPlaceHolder: "Sisestage URL",
    linkTypeExternalNewWindowHeader: "Uues aknas",
    linkTypeExternalNewWindowLabel: "See märkeruut on avage uus brauseri aken\/kaart link.",
    linkTypeInternalHeader: "Link lehele sellel veebilehel",
    linkTypeInternalInfo: "<h2>Ei ole kindel, mida teha eespool kasti?<\/h2><ol>    <li>Leida lehe selle saidi link.<\/li>    <li>Kopeeri aadress oma brauseri aadressiribale, välja arvatud \"{{domain}}\" ja kleepige see kasti eespool.<\/li><\/ol>",
    linkTypeInternalLabel: "Lehekülje sellel veebilehel",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Sisestage URI",
    linkTypeInternalNewWindowHeader: "Uues aknas",
    linkTypeInternalNewWindowLabel: "See märkeruut on avage uus brauseri aken\/kaart link.",
    listOrderedTitle: "Järjestatud loend",
    listUnorderedTitle: "Järjestamata loend",
    logoTitle: "Rohkem teavet Raptor WYSIWYG Editor",
    loremIpsumTitle: "Näiva teksti testimiseks",
    navigateAway: "\nSellel lehel on salvestamata muutusi. \nSellelt lehelt lahkumisel te kaotate salvestamata muutused",
    pasteDialogCancelButton: "Loobu",
    pasteDialogFormattedCleaned: "Vormindatud ja puhastada",
    pasteDialogFormattedUnclean: "Vormindatud ebapuhas",
    pasteDialogOKButton: "Lisamine",
    pasteDialogPlain: "Lihttekst",
    pasteDialogSource: "Lähtekoodi",
    pasteDialogTitle: "Kleebi",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Ei saanud tuua parandused",
    revisionsApplyButtonDialogCancelButton: "Loobu",
    revisionsApplyButtonDialogOKButton: "Tagasipööramine",
    revisionsApplyButtonDialogText: "Tagasipööramise kinnitus",
    revisionsApplyButtonDialogTitle: "Tagasipööramise kinnitus",
    revisionsApplyButtonText: "Tagasipööramine",
    revisionsApplyButtonTitle: "Tagasipööramine",
    revisionsApplyDialogContent: "See asendab praeguse sisu valitud läbivaatamist.<br>Praeguse sisu lisatakse muutmisena ja paranduste loendis selle bloki jaoks nähtav.",
    revisionsButtonCurrent: "Praegune",
    revisionsButtonViewDiffText: "Erinevused",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Loodud",
    revisionsDialogCancelButton: "Loobu",
    revisionsDialogTitle: "Kuva sisu parandused",
    revisionsDiffButtonDialogCancelButton: "Sulgege",
    revisionsDiffButtonDialogTitle: "Vaata erinevused",
    revisionsDiffButtonText: "Vaata erinevused",
    revisionsDiffButtonTitle: "Vaata erinevused",
    revisionsLoading: "Peale parandusi...",
    revisionsNone: "Selle elemendi parandusi",
    revisionsPreviewButtonText: "Eelvaade",
    revisionsPreviewButtonTitle: "Eelvaade",
    revisionsText: "Parandused",
    revisionsTextEmpty: "Parandusi",
    revisionsTitle: "",
    rfmClose: "Sulgege",
    rfmContinue: "Jätkata",
    rfmDelete: "Kustuta",
    rfmDownload: "Lae",
    rfmFileActions: "Tegevused",
    rfmFileModificationTime: "Muudetud",
    rfmFileName: "Nimi",
    rfmFileSize: "Suurus",
    rfmFileType: "Tüüp",
    rfmFilteredTotal: "Näitamist {{start}} {{end}} {{filteredTotal}} faili",
    rfmFirst: "Esimese",
    rfmHeadingDirectories: "Kataloogid",
    rfmHeadingSearch: "Otsi hotelle",
    rfmHeadingTags: "Sildid",
    rfmHeadingUpload: "Lisamise kuupäev",
    rfmInsert: "Lisamine",
    rfmLast: "Kesta",
    rfmSearch: "Mine",
    rfmTagDocument: "Dokumendi",
    rfmTagImage: "Pilt",
    rfmTotal: ", filtreeritud {{total}}",
    rfmUpload: "Lisamise kuupäev",
    rfmUploadBrowse: "Sirvi",
    rfmUploadDrop: "Failid siin",
    rfmUploadFileRemove: "Eemaldamine",
    rfmUploadOr: "või",
    rfmView: "Vaade",
    saveJsonFail: "{{failed}} sisu numbriplokki\/plokke salvestamine nurjus",
    saveJsonSaved: "Edukalt salvestatud {{saved}} sisu numbriplokki\/plokke.",
    saveNotConfigured: "Salvesta pole konfigureeritud või on keelatud.",
    saveRestFail: "{{failed}} sisu numbriplokki\/plokke salvestamine nurjus.",
    saveRestPartial: "Salvestada {{saved}} {{failed}} sisu plokkidest välja.",
    saveRestSaved: "Edukalt salvestatud {{saved}} sisu numbriplokki\/plokke.",
    saveTitle: "Salvesta sisu",
    snippetMenuTitle: "Pikad",
    specialCharactersArrows: "Nooled",
    specialCharactersDialogOKButton: "Ok",
    specialCharactersDialogTitle: "Erimärkide lisamine",
    specialCharactersGreekAlphabet: "Kreeka tähestik",
    specialCharactersHelp: "Klõpsake erimärki lisada. Vajuta \"OK\" kui teha selle dialoogi sulgemiseks",
    specialCharactersMathematics: "Matemaatika",
    specialCharactersSymbols: "Sümbolid",
    specialCharactersTitle: "Erimärgi lisamine",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} märki üle piiri",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} märki jäänud",
    statisticsButtonCharacters: "{{characters}} märki",
    statisticsDialogCharactersOverLimit: "{{characters}} märki, {{charactersRemaining}} üle soovitatava piiri",
    statisticsDialogCharactersRemaining: "{{characters}}, {{charactersRemaining}} allesjäänud märke",
    statisticsDialogNotTruncated: "Sisu ei ole kärbitud",
    statisticsDialogOKButton: "Ok",
    statisticsDialogSentence: "{{sentences}} lause",
    statisticsDialogSentences: "{{sentences}} laused",
    statisticsDialogTitle: "Sisu statistika",
    statisticsDialogTruncated: "Sisu sisaldab kuni {{limit}} märki ja võib olla kärbitud",
    statisticsDialogWord: "{{words}} Wordi",
    statisticsDialogWords: "{{words}} sõnad",
    statisticsTitle: "Statistika kuvamiseks klõpsake",
    tableCreateTitle: "Tabeli loomine",
    tableDeleteColumnTitle: "Kustuta tabeli veerg",
    tableDeleteRowTitle: "Kustuta tabeli rida",
    tableInsertColumnTitle: "Lisa tabeli veerg",
    tableInsertRowTitle: "Lisa tabeli rida",
    tableMergeCellsTitle: "Ühenda tabeli lahtrid",
    tableSplitCellsTitle: "Tükelda tabeli lahtrid",
    tagMenuTagAddress: "Aadress",
    tagMenuTagDiv: "DIV",
    tagMenuTagH1: "Rubriigi 1",
    tagMenuTagH2: "Rubriigi 2",
    tagMenuTagH3: "Rubriik 3",
    tagMenuTagH4: "Rubriik 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Lõikes",
    tagMenuTagPre: "Eelvormindatud",
    tagMenuTitle: "Elemendi laadi muutmine",
    tagTreeElementLink: "{{element}} elemendi valimine",
    tagTreeElementTitle: "Märkige \"{{element}}\" elemendi sisu",
    tagTreeRoot: "juur",
    tagTreeRootLink: "Valige muudetav sisu",
    tagTreeRootTitle: "Valige muudetav sisu",
    textBlockQuoteTitle: "Block tsitaat",
    textBoldTitle: "Paks kiri",
    textItalicTitle: "Kursiiv",
    textSizeDecreaseTitle: "Vähenda teksti",
    textSizeIncreaseTitle: "Suurenda teksti",
    textStrikeTitle: "Läbikriipsutus",
    textSubTitle: "Sub skript",
    textSuperTitle: "Super-skript",
    textUnderlineTitle: "Allakriipsutus",
    unsavedEditWarningText: "Sellel lehel on salvestamata muutusi",
    viewSourceDialogCancelButton: "Sulgege",
    viewSourceDialogOKButton: "Rakenda lähtekoodi",
    viewSourceDialogTitle: "Sisuallika kood",
    viewSourceTitle: "Kuva\/Redigeeri lähtekoodi"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/et.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/fa.js
/**
 * @fileOverview Persian (Farsi) strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('fa', '(فارسي)', {
    alignCenterTitle: "تراز به مرکز متن",
    alignJustifyTitle: "تراز متن توجیه",
    alignLeftTitle: "تراز متن به چپ",
    alignRightTitle: "تراز به راست متن",
    cancelDialogCancelButton: "همچنان در حال ویرایش",
    cancelDialogContent: "آیا مطمئنید که می خواهید لغو ویرایش کنید؟ همه تغییرات از دست خواهد شد!",
    cancelDialogOKButton: "لغو ویرایش",
    cancelDialogTitle: "لغو ویرایش",
    cancelTitle: "لغو ویرایش",
    classMenuTitle: "سبک کننده",
    clearFormattingTitle: "زدودن شکلبندی",
    clickButtonToEditText: "ویرایش",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "خودکار",
    colorMenuBasicBlack: "سیاه و سفید",
    colorMenuBasicBlue: "آبی",
    colorMenuBasicGreen: "سبز",
    colorMenuBasicGrey: "خاکستری",
    colorMenuBasicOrange: "نارنجی",
    colorMenuBasicPurple: "بنفش",
    colorMenuBasicRed: "قرمز",
    colorMenuBasicTitle: "تغییر رنگ متن",
    colorMenuBasicWhite: "سفید",
    dockToElementTitle: "حوض جدا\/ویرایشگر عنصر",
    dockToScreenTitle: "حوض جدا\/ویرایشگر به صفحه",
    embedDialogCancelButton: "\"لغو\"",
    embedDialogOKButton: "شئ جاسازی",
    embedDialogTabCode: "کد اشتراک",
    embedDialogTabCodeContent: "چسباندن جاسازی کد خود را به منطقه متن زیر:",
    embedDialogTabPreview: "پیش نمایش",
    embedDialogTabPreviewContent: "پیش نمایش از خود شئ جاسازی شده در زیر نمایش داده شده است:",
    embedDialogTitle: "شئ جاسازی",
    embedTitle: "شئ جاسازی",
    errorUINoName: "رابط رابط \"{{ui}}\" نامعتبر است (خاصیت name باید)",
    errorUINotObject: "رابط رابط \"{{ui}}\" نامعتبر است (شی باید)",
    errorUIOverride: "رابط کاربر \"{{name}}\" در حال حاضر ثبت شده است و رونویسی خواهد شد",
    fileManagerDialogTitle: "مدیریت فایل",
    fileManagerTitle: "مدیریت فایل",
    floatLeftTitle: "تراز کردن تصویر به سمت چپ",
    floatNoneTitle: "حذف تصویر تراز",
    floatRightTitle: "تراز کردن تصویر به سمت راست",
    fontFamilyMenuFontArial: "روکش دار",
    fontFamilyMenuFontComicSans: "طنز بدون",
    fontFamilyMenuFontCourier: "پیک جدید",
    fontFamilyMenuFontDefault: "قلم پیش فرض",
    fontFamilyMenuFontGeorgia: "گرجستان",
    fontFamilyMenuFontImpact: "تاثیر",
    fontFamilyMenuFontPalatino: "کامی",
    fontFamilyMenuFontTimes: "بار جدید روم",
    fontFamilyMenuTitle: "انتخاب قلم خود را",
    guidesTitle: "نمایش راهنما عنصر",
    historyRedoTitle: "از نو",
    historyUndoTitle: "باطل کردن",
    hrCreateTitle: "درج قانون افقی",
    imageResizeButtonDialogCancelButton: "\"لغو\"",
    imageResizeButtonDialogHeight: "بلندی تصویر",
    imageResizeButtonDialogHeightPlaceHolder: "ارتفاع",
    imageResizeButtonDialogOKButton: "تغییر اندازه",
    imageResizeButtonDialogTitle: "تغییر اندازه تصویر",
    imageResizeButtonDialogWidth: "عرض تصویر",
    imageResizeButtonDialogWidthPlaceHolder: "عرض",
    imageResizeButtonText: "تغییر اندازه تصویر",
    insertFileDialogCancelButton: "\"لغو\"",
    insertFileDialogOKButton: "درج پرونده",
    insertFileNameLabel: "نام پرونده",
    insertFileNamePlaceHolder: "نام پرونده...",
    insertFileTitle: "درج پرونده",
    insertFileURLLabel: "آدرس فایل",
    insertFileURLPlaceHolder: "آدرس فایل...",
    languageMenuTitle: "تغییر زبان",
    linkCreateDialogCancelButton: "\"لغو\"",
    linkCreateDialogMenuHeader: "انتخاب نوع پیوند",
    linkCreateDialogOKButton: "درج لینک",
    linkCreateDialogTitle: "درج لینک",
    linkCreateTitle: "درج لینک",
    linkRemoveTitle: "حذف پیوند",
    linkTypeDocumentHeader: "لینک به یک سند یا فایل دیگر",
    linkTypeDocumentInfo: "<h2>مطمئن نیستم چه چیزی را در جعبه بالا قرار داده است؟<\/h2><ol>    <li>مطمئن شوید پرونده به وب سایت خود را آپلود شده.<\/li>    <li>آپلود فایل در مرورگر خود را باز کنید.<\/li>    <li>آدرس فایل را از نوار آدرس مرورگر خود کپی و چسباندن آن را به جعبه بالا.<\/li><\/ol>",
    linkTypeDocumentLabel: "سند و یا فایل دیگر",
    linkTypeDocumentLocationLabel: "محل سکونت:",
    linkTypeDocumentLocationPlaceHolder: "یک URL وارد کنید",
    linkTypeDocumentNewWindowHeader: "پنجره جدید",
    linkTypeDocumentNewWindowLabel: "این جعبه برای فایل در مرورگر پنجره\/زبانه جدید باز شده را بررسی کنید.",
    linkTypeEmailHeader: "لینک به آدرس ایمیل",
    linkTypeEmailLabel: "آدرس ایمیل",
    linkTypeEmailSubjectLabel: "موضوع (اختیاری):",
    linkTypeEmailSubjectPlaceHolder: "موضوع را وارد نمایید",
    linkTypeEmailToLabel: "ایمیل:",
    linkTypeEmailToPlaceHolder: "آدرس ایمیل وارد کنید",
    linkTypeExternalHeader: "لینک به یک صفحه دیگر وب سایت",
    linkTypeExternalInfo: "<h2>مطمئن نیستم چه چیزی را در جعبه بالا قرار داده است؟<\/h2><ol>    <li>صفحه در وب سایت شما می خواهید به لینک به پیدا کنید.<\/li>    <li>آدرس وب را از نوار آدرس مرورگر خود کپی و چسباندن آن را به جعبه بالا.<\/li><\/ol>",
    linkTypeExternalLabel: "صفحه در وب سایت دیگر",
    linkTypeExternalLocationLabel: "محل سکونت:",
    linkTypeExternalLocationPlaceHolder: "یک URL وارد کنید",
    linkTypeExternalNewWindowHeader: "پنجره جدید",
    linkTypeExternalNewWindowLabel: "چک از این جعبه به پیوند در مرورگر پنجره\/زبانه جدید باز.",
    linkTypeInternalHeader: "لینک به یک صفحه از این وب سایت",
    linkTypeInternalInfo: "<h2>مطمئن نیستم چه چیزی را در جعبه بالا قرار داده است؟<\/h2><ol>    <li>صفحه در این سایت لینک به پیدا کنید.<\/li>    <li>آدرس وب سایت از نوار \"{{domain}}\" به جز آدرس مرورگر خود کپی و چسباندن آن را به جعبه بالا.<\/li><\/ol>",
    linkTypeInternalLabel: "صفحه در این وب سایت",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "وارد یک URI",
    linkTypeInternalNewWindowHeader: "پنجره جدید",
    linkTypeInternalNewWindowLabel: "چک از این جعبه به پیوند در مرورگر پنجره\/زبانه جدید باز.",
    listOrderedTitle: "لیست مرتب",
    listUnorderedTitle: "لیست نا مرتب",
    logoTitle: "اطلاعات بیشتر در مورد ویرایشگر WYSIWYG رپتور",
    loremIpsumTitle: "درج متن ساختگی برای تست",
    navigateAway: "\nوجود تغییرات در این صفحه ذخیره نشده است. \nاگر شما از این صفحه شما تغییرات ذخیره نشده از دست خواهد داد",
    pasteDialogCancelButton: "\"لغو\"",
    pasteDialogFormattedCleaned: "قالب و تمیز",
    pasteDialogFormattedUnclean: "فرمت نجس",
    pasteDialogOKButton: "را وارد کنید",
    pasteDialogPlain: "متن ساده",
    pasteDialogSource: "کد منبع",
    pasteDialogTitle: "رب",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "بررسی بازیابی نشد",
    revisionsApplyButtonDialogCancelButton: "\"لغو\"",
    revisionsApplyButtonDialogOKButton: "عقبگرد",
    revisionsApplyButtonDialogText: "تایید عقبگرد",
    revisionsApplyButtonDialogTitle: "تایید عقبگرد",
    revisionsApplyButtonText: "عقبگرد",
    revisionsApplyButtonTitle: "عقبگرد",
    revisionsApplyDialogContent: "این مطالب موجود را با نسخه انتخاب شده جایگزین خواهد شد.<br>محتوای کنونی اضافه خواهد شد به عنوان تجدید نظر و در لیست بررسی برای این بلوک قابل مشاهده است.",
    revisionsButtonCurrent: "در حال حاضر",
    revisionsButtonViewDiffText: "تفاوت",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "ایجاد شده",
    revisionsDialogCancelButton: "\"لغو\"",
    revisionsDialogTitle: "مشاهده محتوا بررسی",
    revisionsDiffButtonDialogCancelButton: "بستن",
    revisionsDiffButtonDialogTitle: "تفاوت مشاهده",
    revisionsDiffButtonText: "تفاوت مشاهده",
    revisionsDiffButtonTitle: "تفاوت مشاهده",
    revisionsLoading: "در حال بارگذاری بررسی...",
    revisionsNone: "هیچ بررسی برای این عنصر",
    revisionsPreviewButtonText: "پیش نمایش",
    revisionsPreviewButtonTitle: "پیش نمایش",
    revisionsText: "تجدید نظر",
    revisionsTextEmpty: "هیچ بررسی",
    revisionsTitle: "",
    rfmClose: "بستن",
    rfmContinue: "ادامه",
    rfmDelete: "حذف",
    rfmDownload: "دانلود",
    rfmFileActions: "اقدامات",
    rfmFileModificationTime: "تغییر یافته",
    rfmFileName: "نام",
    rfmFileSize: "اندازه",
    rfmFileType: "نوع",
    rfmFilteredTotal: "نمایش {{start}} {{end}} به فایل {{filteredTotal}}",
    rfmFirst: "اول",
    rfmHeadingDirectories: "دایرکتوری",
    rfmHeadingSearch: "جستجو",
    rfmHeadingTags: "برچسب ها",
    rfmHeadingUpload: "آپلود",
    rfmInsert: "را وارد کنید",
    rfmLast: "تاریخ و زمان آخرین",
    rfmSearch: "برو",
    rfmTagDocument: "سند",
    rfmTagImage: "تصویر",
    rfmTotal: "، فیلتر از {{total}}",
    rfmUpload: "آپلود",
    rfmUploadBrowse: "مرور",
    rfmUploadDrop: "پرونده ها را در اینجا رها کنید",
    rfmUploadFileRemove: "حذف",
    rfmUploadOr: "یا",
    rfmView: "مشاهده",
    saveJsonFail: "عدم موفقیت در ذخیره block(s) محتوای {{failed}}",
    saveJsonSaved: "با موفقیت ذخیره block(s) محتوای {{saved}}.",
    saveNotConfigured: "ذخیره پیکربندی شده است، و یا غیر فعال شده است.",
    saveRestFail: "{{failed}} block(s) محتوای ذخیره نشد.",
    saveRestPartial: "از بلوک محتوای {{saved}} {{failed}} را نجات داد.",
    saveRestSaved: "با موفقیت ذخیره block(s) محتوای {{saved}}.",
    saveTitle: "ذخیره محتوای",
    snippetMenuTitle: "قطعه",
    specialCharactersArrows: "فلش",
    specialCharactersDialogOKButton: "باشه",
    specialCharactersDialogTitle: "درج نویسه های ویژه",
    specialCharactersGreekAlphabet: "الفبای یونانی",
    specialCharactersHelp: "شخصیت خاص به آن اضافه کنید را کلیک کنید. کلیک کنید \"خوب\" هنگامی که انجام این گفتگو را ببندید",
    specialCharactersMathematics: "ریاضیات",
    specialCharactersSymbols: "نمادها",
    specialCharactersTitle: "درج نویسه خاص",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} شخصیت های بیش از حد",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} نویسه های باقی مانده",
    statisticsButtonCharacters: "شخصیت های {{characters}}",
    statisticsDialogCharactersOverLimit: "{{characters}} شخصیت، {{charactersRemaining}} بیش از حد توصیه شده",
    statisticsDialogCharactersRemaining: "شخصیت {{characters}}، {{charactersRemaining}} باقی مانده",
    statisticsDialogNotTruncated: "مطالب کوتاه خواهند شد",
    statisticsDialogOKButton: "باشه",
    statisticsDialogSentence: "جمله {{sentences}}",
    statisticsDialogSentences: "جملات {{sentences}}",
    statisticsDialogTitle: "آمار مطالب و محتوا",
    statisticsDialogTruncated: "محتوا شامل بیش از {{limit}} شخصیت و ممکن است کوتاه",
    statisticsDialogWord: "کلمه {{words}}",
    statisticsDialogWords: "{{words}} واژه",
    statisticsTitle: "برای مشاهده آمار کلیک کنید",
    tableCreateTitle: "ایجاد جدول",
    tableDeleteColumnTitle: "حذف ستون جدول",
    tableDeleteRowTitle: "حذف ردیف جدول",
    tableInsertColumnTitle: "درج ستون جدول",
    tableInsertRowTitle: "درج ردیف جدول",
    tableMergeCellsTitle: "ادغام سلول جدول",
    tableSplitCellsTitle: "تقسیم سلول جدول",
    tagMenuTagAddress: "آدرس",
    tagMenuTagDiv: "دیو",
    tagMenuTagH1: "سرفصل 1",
    tagMenuTagH2: "سرفصل 2",
    tagMenuTagH3: "سرفصل 3",
    tagMenuTagH4: "سرفصل 4",
    tagMenuTagNA: "ازت \/",
    tagMenuTagP: "پاراگراف",
    tagMenuTagPre: "از پیش شکلبندی شده",
    tagMenuTitle: "تغییر سبک عنصر",
    tagTreeElementLink: "عنصر را انتخاب کنید {{element}}",
    tagTreeElementTitle: "انتخاب مطالب عنصر \"{{element}}\" را کلیک کنید",
    tagTreeRoot: "ریشه",
    tagTreeRootLink: "مطالب قابل ویرایش را انتخاب کنید",
    tagTreeRootTitle: "انتخاب مطالب قابل ویرایش را کلیک کنید",
    textBlockQuoteTitle: "بلوک نقل قول",
    textBoldTitle: "توپر",
    textItalicTitle: "کج",
    textSizeDecreaseTitle: "کاهش اندازه متن",
    textSizeIncreaseTitle: "افزایش اندازه متن",
    textStrikeTitle: "حمله از طریق",
    textSubTitle: "اسکریپت های زیر",
    textSuperTitle: "اسکریپت فوق العاده",
    textUnderlineTitle: "زیر خط",
    unsavedEditWarningText: "وجود تغییرات ذخیره نشده در این صفحه هستند",
    viewSourceDialogCancelButton: "بستن",
    viewSourceDialogOKButton: "درخواست کد منبع",
    viewSourceDialogTitle: "کد منبع محتوا",
    viewSourceTitle: "نمایش\/ویرایش کد منبع"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/fa.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/fi.js
/**
 * @fileOverview Finnish strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('fi', 'suomi', {
    alignCenterTitle: "Tasaa teksti keskelle",
    alignJustifyTitle: "Tasaa teksti perustella",
    alignLeftTitle: "Tasaa teksti vasemmalle",
    alignRightTitle: "Tasaa teksti oikealle",
    cancelDialogCancelButton: "Jatka muokkaamista",
    cancelDialogContent: "Oletko varma, että haluat peruuttaa muokkaamisen? Kaikki muutokset menetetään!",
    cancelDialogOKButton: "Peruuttaa muokkaamisen",
    cancelDialogTitle: "Peruuttaa muokkaamisen",
    cancelTitle: "Peruuttaa muokkaamisen",
    classMenuTitle: "Tyylin valinta",
    clearFormattingTitle: "Poista muotoilut",
    clickButtonToEditText: "Muokkaa",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automaattinen",
    colorMenuBasicBlack: "Musta",
    colorMenuBasicBlue: "Sininen",
    colorMenuBasicGreen: "Vihreä",
    colorMenuBasicGrey: "Harmaa",
    colorMenuBasicOrange: "Oranssi",
    colorMenuBasicPurple: "Violetti",
    colorMenuBasicRed: "Punainen",
    colorMenuBasicTitle: "Tekstivärin muuttaminen",
    colorMenuBasicWhite: "Valkoinen",
    dockToElementTitle: "Osa telakka\/irrottaa editor",
    dockToScreenTitle: "Editorin näytön Dock irrottaa",
    embedDialogCancelButton: "Peruuta",
    embedDialogOKButton: "Objektin upottaminen",
    embedDialogTabCode: "Upota koodi",
    embedDialogTabCodeContent: "Liitä upottaa koodi tekstin alapuolella:",
    embedDialogTabPreview: "Esikatselu",
    embedDialogTabPreviewContent: "Upotetun objektin esikatselu näkyy alla:",
    embedDialogTitle: "Objektin upottaminen",
    embedTitle: "Objektin upottaminen",
    errorUINoName: "UI \"{{ui}}\" on virheellinen (on oltava name-ominaisuus)",
    errorUINotObject: "UI \"{{ui}}\" on virheellinen (on oltava objektin)",
    errorUIOverride: "UI \"{{name}}\" on jo rekisteröity, ja se korvataan",
    fileManagerDialogTitle: "Tiedostonhallinta",
    fileManagerTitle: "Tiedostonhallinta",
    floatLeftTitle: "Tasaa kuva vasemmalle",
    floatNoneTitle: "Poistaa kuvan tasaaminen",
    floatRightTitle: "Tasaa kuva oikealla",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Sarjakuva ilman",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Oletusfontti",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Vaikutus",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Kertaa New Roman",
    fontFamilyMenuTitle: "Valitse fontti",
    guidesTitle: "Näytä elementti oppaat",
    historyRedoTitle: "Tee uudelleen",
    historyUndoTitle: "Kumoa",
    hrCreateTitle: "Lisää vaakaviiva",
    imageResizeButtonDialogCancelButton: "Peruuta",
    imageResizeButtonDialogHeight: "Kuvan korkeus",
    imageResizeButtonDialogHeightPlaceHolder: "Korkeus",
    imageResizeButtonDialogOKButton: "Muuta kokoa",
    imageResizeButtonDialogTitle: "Muuta kuvan kokoa",
    imageResizeButtonDialogWidth: "Kuvan leveys",
    imageResizeButtonDialogWidthPlaceHolder: "Leveys",
    imageResizeButtonText: "Muuta kuvan kokoa",
    insertFileDialogCancelButton: "Peruuta",
    insertFileDialogOKButton: "Lisää tiedosto",
    insertFileNameLabel: "Tiedostonimi",
    insertFileNamePlaceHolder: "Tiedostonimi...",
    insertFileTitle: "Lisää tiedosto",
    insertFileURLLabel: "Tiedoston URL",
    insertFileURLPlaceHolder: "Tiedoston URL...",
    languageMenuTitle: "Vaihda kieli",
    linkCreateDialogCancelButton: "Peruuta",
    linkCreateDialogMenuHeader: "Valitse linkkityyppi",
    linkCreateDialogOKButton: "Lisää linkki",
    linkCreateDialogTitle: "Lisää linkki",
    linkCreateTitle: "Lisää linkki",
    linkRemoveTitle: "Poista linkki",
    linkTypeDocumentHeader: "Linkittää asiakirjan tai muun tiedoston",
    linkTypeDocumentInfo: "<h2>Ole varma, mitä laittaa yllä olevaan ruutuun?<\/h2><ol>    <li>Varmista tiedoston ladata sivustoosi.<\/li>    <li>Avaa ylöslataamasi tiedosto selaimessa.<\/li>    <li>Kopioi tiedoston URL-osoite selaimen osoiteriville ja liitä yllä olevassa ruudussa.<\/li><\/ol>",
    linkTypeDocumentLabel: "Asiakirjan tai muun tiedoston",
    linkTypeDocumentLocationLabel: "Sijainti:",
    linkTypeDocumentLocationPlaceHolder: "Kirjoita URL-osoite",
    linkTypeDocumentNewWindowHeader: "Uusi ikkuna",
    linkTypeDocumentNewWindowLabel: "Valitse tämä valintaruutu tiedosto on avattu uusi selaimen ikkunassa\/välilehdellä.",
    linkTypeEmailHeader: "Linkki sähköpostiosoitteeseen",
    linkTypeEmailLabel: "Sähköpostiosoite",
    linkTypeEmailSubjectLabel: "Aihe (valinnainen):",
    linkTypeEmailSubjectPlaceHolder: "Kirjoita aihe",
    linkTypeEmailToLabel: "Sähköposti:",
    linkTypeEmailToPlaceHolder: "Astua email kohdistaa",
    linkTypeExternalHeader: "Linkki sivu toisella sivustolla",
    linkTypeExternalInfo: "<h2>Ole varma, mitä laittaa yllä olevaan ruutuun?<\/h2><ol>    <li>Löydä sivua haluat linkittää Web.<\/li>    <li>Kopioi selaimen osoiteriviltä web-osoite ja liitä se yllä olevassa ruudussa.<\/li><\/ol>",
    linkTypeExternalLabel: "Sivu toisella sivustolla",
    linkTypeExternalLocationLabel: "Sijainti:",
    linkTypeExternalLocationPlaceHolder: "Kirjoita URL-osoite",
    linkTypeExternalNewWindowHeader: "Uusi ikkuna",
    linkTypeExternalNewWindowLabel: "Tämä ruutu on linkki avaa uuden selaimen ikkunassa\/välilehdellä.",
    linkTypeInternalHeader: "Linkki sivu tällä sivustolla",
    linkTypeInternalInfo: "<h2>Ole varma, mitä laittaa yllä olevaan ruutuun?<\/h2><ol>    <li>Löydä sivua tähän saittilinkkiin.<\/li>    <li>Kopioi web-osoite selaimen osoite Baari, lukuun ottamatta \"{{domain}}\" ja liitä se yllä olevassa ruudussa.<\/li><\/ol>",
    linkTypeInternalLabel: "Sivun tällä sivustolla",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Kirjoita URI",
    linkTypeInternalNewWindowHeader: "Uusi ikkuna",
    linkTypeInternalNewWindowLabel: "Tämä ruutu on linkki avaa uuden selaimen ikkunassa\/välilehdellä.",
    listOrderedTitle: "Järjestetty luettelo",
    listUnorderedTitle: "Järjestämätön lista",
    logoTitle: "Saat lisätietoja Raptor WYSIWYG-editorista",
    loremIpsumTitle: "Lisää nukke tekstiä testaus",
    navigateAway: "\nTällä sivulla on tallentamattomia muutoksia. \nJos siirryt pois tältä sivulta menetät tallentamattomat muutokset",
    pasteDialogCancelButton: "Peruuta",
    pasteDialogFormattedCleaned: "Muotoiltu &amp; puhdistaa",
    pasteDialogFormattedUnclean: "Muotoiltu epäpuhdas",
    pasteDialogOKButton: "Lisää",
    pasteDialogPlain: "Vain teksti",
    pasteDialogSource: "Lähdekoodi",
    pasteDialogTitle: "Liitä",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Ei voitu hakea muutoksia",
    revisionsApplyButtonDialogCancelButton: "Peruuta",
    revisionsApplyButtonDialogOKButton: "Palautus",
    revisionsApplyButtonDialogText: "Peruutuksen vahvistus",
    revisionsApplyButtonDialogTitle: "Peruutuksen vahvistus",
    revisionsApplyButtonText: "Palautus",
    revisionsApplyButtonTitle: "Palautus",
    revisionsApplyDialogContent: "Tämä korvaa nykyisen sisällön valitussa versiossa.<br>Nykyistä sisältöä lisätään tarkistamisesta ja näkevät tämän lohkon versiot-luettelosta.",
    revisionsButtonCurrent: "Nykyinen",
    revisionsButtonViewDiffText: "Erot",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Luotu",
    revisionsDialogCancelButton: "Peruuta",
    revisionsDialogTitle: "Näytä sisältö versiot",
    revisionsDiffButtonDialogCancelButton: "Sulje",
    revisionsDiffButtonDialogTitle: "Katso erot",
    revisionsDiffButtonText: "Katso erot",
    revisionsDiffButtonTitle: "Katso erot",
    revisionsLoading: "Ladataan muutoksia...",
    revisionsNone: "Minkäänlaista tarkistusta ei tälle elementille",
    revisionsPreviewButtonText: "Esikatselu",
    revisionsPreviewButtonTitle: "Esikatselu",
    revisionsText: "Muutokset",
    revisionsTextEmpty: "Ei muutoksia",
    revisionsTitle: "",
    rfmClose: "Sulje",
    rfmContinue: "Jatka",
    rfmDelete: "Poista",
    rfmDownload: "Lataa",
    rfmFileActions: "Toiminnot",
    rfmFileModificationTime: "Muutettu",
    rfmFileName: "Nimi",
    rfmFileSize: "Kokoa",
    rfmFileType: "Tyyppi",
    rfmFilteredTotal: "Osoittaminen {{start}} lopettamaan {{end}} {{filteredTotal}} tiedostot",
    rfmFirst: "Ensimmäinen",
    rfmHeadingDirectories: "Hakemistot",
    rfmHeadingSearch: "Etsi",
    rfmHeadingTags: "Tunnisteet",
    rfmHeadingUpload: "Lataa",
    rfmInsert: "Lisää",
    rfmLast: "Viimeksi",
    rfmSearch: "Go",
    rfmTagDocument: "Asiakirja",
    rfmTagImage: "Kuva",
    rfmTotal: ", suodatettu {{total}}",
    rfmUpload: "Lataa",
    rfmUploadBrowse: "Selaa",
    rfmUploadDrop: "Pudota tiedostoja tähän.",
    rfmUploadFileRemove: "Poista",
    rfmUploadOr: "tai",
    rfmView: "Näkymä",
    saveJsonFail: "Ei voi tallentaa {{failed}} sisältö vioittuneiden lohkojen uudelleenmäärittäminen",
    saveJsonSaved: "Tallennettu {{saved}} sisältö vioittuneiden lohkojen uudelleenmäärittäminen.",
    saveNotConfigured: "Tallenna ei ole määritetty, tai se on poistettu käytöstä.",
    saveRestFail: "{{failed}} sisältö vioittuneiden lohkojen uudelleenmäärittäminen tallentaminen epäonnistui.",
    saveRestPartial: "Tallennettu {{saved}} {{failed}} sisältö blocks pois.",
    saveRestSaved: "Tallennettu {{saved}} sisältö vioittuneiden lohkojen uudelleenmäärittäminen.",
    saveTitle: "Tallenna sisältö",
    snippetMenuTitle: "Katkelmia",
    specialCharactersArrows: "Nuolet",
    specialCharactersDialogOKButton: "Okei",
    specialCharactersDialogTitle: "Lisätä erikoismerkkejä",
    specialCharactersGreekAlphabet: "Kreikkalainen kirjaimisto",
    specialCharactersHelp: "Napsauta Lisää erikoismerkki. Klikkaa \"OK\" Kun olet valmis tämän valintaikkunan voi sulkea",
    specialCharactersMathematics: "Matematiikka",
    specialCharactersSymbols: "Symbolit",
    specialCharactersTitle: "Erikoismerkin lisääminen",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} merkkiä yli rajan",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} merkkiä jäljellä",
    statisticsButtonCharacters: "{{characters}} merkkiä",
    statisticsDialogCharactersOverLimit: "{{characters}} merkkiä {{charactersRemaining}} yli Suositellut raja",
    statisticsDialogCharactersRemaining: "{{characters}} {{charactersRemaining}} merkkiä jäljellä",
    statisticsDialogNotTruncated: "Sisältö ei ole katkaistu",
    statisticsDialogOKButton: "Okei",
    statisticsDialogSentence: "{{sentences}} lause",
    statisticsDialogSentences: "{{sentences}} lauseita",
    statisticsDialogTitle: "Sisältö tilastot",
    statisticsDialogTruncated: "Sisältö sisältää enintään {{limit}} merkkiä ja lyhennetään",
    statisticsDialogWord: "{{words}} sana",
    statisticsDialogWords: "{{words}} sanoja",
    statisticsTitle: "Näytä tilastot napsauttamalla tätä",
    tableCreateTitle: "Taulukon luominen",
    tableDeleteColumnTitle: "Poista sarakkeesta",
    tableDeleteRowTitle: "Poista taulukkorivi",
    tableInsertColumnTitle: "Lisää taulukon sarake",
    tableInsertRowTitle: "Lisää taulukkorivi",
    tableMergeCellsTitle: "Taulukkosolujen yhdistäminen",
    tableSplitCellsTitle: "Taulukkosolujen jakaminen",
    tagMenuTagAddress: "Osoite",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Otsakkeen 1",
    tagMenuTagH2: "Otsakkeen 2",
    tagMenuTagH3: "Otsakkeen 3",
    tagMenuTagH4: "Otsakkeen 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Kohdassa",
    tagMenuTagPre: "Alustettu",
    tagMenuTitle: "Elementin tyylin muuttaminen",
    tagTreeElementLink: "{{element}} osan valitseminen",
    tagTreeElementTitle: "Valitse sisältö \"{{element}}\" elementti",
    tagTreeRoot: "root",
    tagTreeRootLink: "Kaiken voi muokata sisällön valitseminen",
    tagTreeRootTitle: "Valitse muokattava sisältö",
    textBlockQuoteTitle: "Erotettu lainaus",
    textBoldTitle: "Lihavointi",
    textItalicTitle: "Kursivoitu",
    textSizeDecreaseTitle: "Pienennä tekstikokoa",
    textSizeIncreaseTitle: "Suurenna tekstikokoa",
    textStrikeTitle: "Yliviivata",
    textSubTitle: "Osa script",
    textSuperTitle: "Super kirjoitus",
    textUnderlineTitle: "Alleviivaus",
    unsavedEditWarningText: "Tällä sivulla on tallentamattomia muutoksia",
    viewSourceDialogCancelButton: "Sulje",
    viewSourceDialogOKButton: "Soveltaa lähdekoodi",
    viewSourceDialogTitle: "Sisältö lähdekoodi",
    viewSourceTitle: "Näytä\/Muokkaa lähdekoodia"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/fi.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/fr.js
/**
 * @fileOverview French strings file.
 * @license http://www.raptor-editor.com/license
 *
 * @author SebCorbin, seb.corbin@gmail.com, https://github.com/SebCorbin/
 * @author In4matik, https://github.com/In4matik/
 */
extendLocale('fr', 'Français', {
    alignCenterTitle: "Aligner au centre",
    alignJustifyTitle: "Justifier",
    alignLeftTitle: "Aligner à gauche",
    alignRightTitle: "Aligner à droite",
    cancelDialogCancelButton: "Fermer",
    cancelDialogContent: "Êtes-vous sûr(e) de vouloir arrêter la modification ? Toutes les modifications seront perdues !",
    cancelDialogOKButton: "OK",
    cancelDialogTitle: "Annuler l'édition",
    cancelTitle: "Annuler l'édition",
    classMenuTitle: "Sélecteur de style",
    clearFormattingTitle: "Effacer la mise en forme",
    clickButtonToEditText: "Cliquer pour commencer la modification",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatique",
    colorMenuBasicBlack: "Noir",
    colorMenuBasicBlue: "Bleu",
    colorMenuBasicGreen: "Vert",
    colorMenuBasicGrey: "Gris",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Violet",
    colorMenuBasicRed: "Rouge",
    colorMenuBasicTitle: "Changer le couleur du texte",
    colorMenuBasicWhite: "Blanc",
    dockToElementTitle: "Fixer l'éditeur à l'élément",
    dockToScreenTitle: "Fixer l'éditeur à l'écran",
    embedDialogCancelButton: "Annuler",
    embedDialogOKButton: "Intégrer l'objet",
    embedDialogTabCode: "Code intégré",
    embedDialogTabCodeContent: "Collez votre code dans la zone de texte suivante :",
    embedDialogTabPreview: "Aperçu",
    embedDialogTabPreviewContent: "Un aperçu de votre code est disponible ci-dessous :",
    embedDialogTitle: "Object intégré",
    embedTitle: "Object intégré",
    errorUINoName: "UI \"{{ui}}\" est invalide (doit posséder une propriété \"name\")",
    errorUINotObject: "UI \"{{ui}}\" est invalide (doit être un objet)",
    errorUIOverride: "UI \"{{name}}\" a déjà été définie, et sera écrasée",
    fileManagerDialogTitle: "Gestionnaire de fichiers",
    fileManagerTitle: "Gestionnaire de fichiers",
    floatLeftTitle: "Image à gauche du texte",
    floatNoneTitle: "Retirer l'aligement de l'image",
    floatRightTitle: "Image à droite du texte",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Comic Sans",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Police par défaut",
    fontFamilyMenuFontGeorgia: "Géorgie",
    fontFamilyMenuFontImpact: "Impact",
    fontFamilyMenuFontPalatino: "Palatin",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Choisissez votre police",
    guidesTitle: "Afficher les guides",
    historyRedoTitle: "Rétablir",
    historyUndoTitle: "Annuler",
    hrCreateTitle: "Insérer une ligne horizontale",
    imageResizeButtonDialogCancelButton: "Annuler",
    imageResizeButtonDialogHeight: "Hauteur de l'image",
    imageResizeButtonDialogHeightPlaceHolder: "Hauteur",
    imageResizeButtonDialogOKButton: "Redimmensionner",
    imageResizeButtonDialogTitle: "Redimmensionner l'image",
    imageResizeButtonDialogWidth: "Largeur de l'image",
    imageResizeButtonDialogWidthPlaceHolder: "Largeur",
    imageResizeButtonText: "Redimmensionner l'image",
    insertFileDialogCancelButton: "Anuuler",
    insertFileDialogOKButton: "Insérer le fichier",
    insertFileNameLabel: "Nom du fichier",
    insertFileNamePlaceHolder: "Nom du fichier...",
    insertFileTitle: "Insérer un fichier",
    insertFileURLLabel: "URL du fichier",
    insertFileURLPlaceHolder: "URL du fichier...",
    languageMenuDE: "Deutsch",
    languageMenuEN: "English",
    languageMenuES: "Español",
    languageMenuFR: "Français",
    languageMenuNL: "Nederlandse",
    languageMenuRU: "Pусский",
    languageMenuSV: "Svensk",
    languageMenuTitle: "Changer de langue",
    languageMenuZHCN: "简体中文版",
    linkCreateDialogCancelButton: "Annuler",
    linkCreateDialogMenuHeader: "Choisissez un type de lien :",
    linkCreateDialogOKButton: "Insérer un lien",
    linkCreateDialogTitle: "Insérer un lien",
    linkCreateTitle: "Insérer un lien",
    linkRemoveTitle: "Supprimer le lien",
    linkTypeDocumentHeader: "Lien vers un document ou un autre fichier",
    linkTypeDocumentInfo: "<h2>Pas sûr(e) de savoir quoi mettre dans le champ ci-dessus ?<\/h2><ol>    <li>Assurez-vous que le fichier a bien été envoyé sur votr site<\/li>    <li>Ouvrez le fichier envoyé dans votre navigateur.<\/li>    <li>Copiez l'adresse de la barre d'adresse de votre navigateur et collez-la dans le champs ci-dessous.<\/li><\/ol>",
    linkTypeDocumentLabel: "Document ou autre fichier",
    linkTypeDocumentLocationLabel: "Emplacement :",
    linkTypeDocumentLocationPlaceHolder: "Entrer une URL",
    linkTypeDocumentNewWindowHeader: "Nouvelle fenêtre",
    linkTypeDocumentNewWindowLabel: "Cochez cette case pour ouvrir le lien dans une nouvelle fenêtre de navigateur.",
    linkTypeEmailHeader: "Lier une adresse e-mail",
    linkTypeEmailLabel: "Adresse e-mail",
    linkTypeEmailSubjectLabel: "Sujet (facultatif):",
    linkTypeEmailSubjectPlaceHolder: "Saisir le sujet",
    linkTypeEmailToLabel: "E-mail:",
    linkTypeEmailToPlaceHolder: "Saisir l'adresse e-mail",
    linkTypeExternalHeader: "Lien vers une page sur un autre site",
    linkTypeExternalInfo: "<h2>Pas sûr(e) de savoir quoi mettre dans le champ ci-dessus ?<\/h2><ol>    <li>Trouvez la page web que vous voulez lier.<\/li>    <li>Copiez l'adresse de la barre d'adresse de votre navigateur et collez-la dans le champs ci-dessous.<\/li><\/ol>",
    linkTypeExternalLabel: "Page sur une autre site",
    linkTypeExternalLocationLabel: "Emplacement",
    linkTypeExternalLocationPlaceHolder: "Entrer une URL",
    linkTypeExternalNewWindowHeader: "Nouvelle fenêtre",
    linkTypeExternalNewWindowLabel: "Cochez cette case pour ouvrir le lien dans une nouvelle fenêtre de navigateur.",
    linkTypeInternalHeader: "Lien vers une page de ce site",
    linkTypeInternalInfo: "<h2>Pas sûr(e) de savoir quoi mettre dans le champ ci-dessus ?<\/h2><ol>    <li>Trouvez la page web que vous voulez lier.<\/li>    <li>Copiez l'adresse de la barre d'adresse de votre navigateur, sans \"{{domain}}\" et collez-la dans le champs ci-dessous..<\/li><\/ol>",
    linkTypeInternalLabel: "Page de ce site",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Entrer une URI",
    linkTypeInternalNewWindowHeader: "Nouvelle fenêtre",
    linkTypeInternalNewWindowLabel: "Cochez cette case pour ouvrir le lien dans une nouvelle fenêtre de navigateur.",
    listOrderedTitle: "Liste ordonnée",
    listUnorderedTitle: "Liste non ordonnée",
    logoTitle: "En savoir plus sur l'éditeur WYSIWYG Raptor",
    loremIpsumTitle: "Insérer du texte factice pour le test",
    navigateAway: "\nIl y a des modifications non enregistrées sur ce site. Si vous quittez cette page, elles seront définitivements perdues",
    pasteDialogCancelButton: "Annuler",
    pasteDialogFormattedCleaned: "Mis en forme & nettoyé",
    pasteDialogFormattedUnclean: "Mis en forme sans nettoyage",
    pasteDialogOKButton: "Insérer",
    pasteDialogPlain: "Texte brut",
    pasteDialogSource: "Code source",
    pasteDialogTitle: "Coller",
    placeholderPluginDefaultContent: "<br\/>",
    revisionsAJAXFailed: "Impossible de récupérer les révisions",
    revisionsApplyButtonDialogCancelButton: "Annuler",
    revisionsApplyButtonDialogOKButton: "Revenir en arrière",
    revisionsApplyButtonDialogText: "Confirmation de l'annulation",
    revisionsApplyButtonDialogTitle: "Confirmer le retour en arrière",
    revisionsApplyButtonText: "ROLLBACK",
    revisionsApplyButtonTitle: "Revenir en arrière",
    revisionsApplyDialogContent: "Cela remplacera le contenu actuel par celui de la révision sélectionnée.<br\/>Le contenu actuel sera ajouté comme une révision, et sera visible dans la liste des révisions pour ce bloc.",
    revisionsButtonCurrent: "Actuelle",
    revisionsButtonViewDiffText: "Différences",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Créé",
    revisionsDialogCancelButton: "Annuler",
    revisionsDialogTitle: "Voir le contenu des révisions",
    revisionsDiffButtonDialogCancelButton: "Fermer",
    revisionsDiffButtonDialogTitle: "Voir les différences",
    revisionsDiffButtonText: "Différences de vue",
    revisionsDiffButtonTitle: "Voir les différences",
    revisionsLoading: "Chargement des révisions...",
    revisionsNone: "Pas de révision pour cet élément",
    revisionsPreviewButtonText: "Aperçu",
    revisionsPreviewButtonTitle: "Aperçu",
    revisionsText: "Révisions",
    revisionsTextEmpty: "Aucune révision",
    revisionsTitle: "",
    rfmClose: "Fermer",
    rfmContinue: "Continuer",
    rfmDelete: "Supprimer",
    rfmDownload: "Télécharger",
    rfmFileActions: "Actions",
    rfmFileModificationTime: "Modifiée",
    rfmFileName: "Nom",
    rfmFileSize: "Taille",
    rfmFileType: "Type",
    rfmFilteredTotal: "Affichage {{start}} à {{end}} {{filteredTotal}} fichiers",
    rfmFirst: "Première",
    rfmHeadingDirectories: "Annuaires",
    rfmHeadingSearch: "Rechercher",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Télécharger",
    rfmInsert: "Insert",
    rfmLast: "Dernière",
    rfmSearch: "Aller",
    rfmTagDocument: "Document",
    rfmTagImage: "Image",
    rfmTotal: ", filtrées à partir de {{total}}",
    rfmUpload: "Télécharger",
    rfmUploadBrowse: "Parcourir",
    rfmUploadDrop: "Déposez des fichiers ici",
    rfmUploadFileRemove: "Supprimer",
    rfmUploadOr: "ou",
    rfmView: "Vue",
    saveJsonFail: "Impossible d'enregistrer {{failed}} bloc(s) de contenu",
    saveJsonSaved: "Enregistrement effectué de {{saved}} bloc(s) de contenu.",
    saveNotConfigured: "Save n'a pas été configuré, ou est désactivé.",
    saveRestFail: "Impossible d'enregistrer {{failed}} bloc(s) de contenu.",
    saveRestPartial: "Enregistrement de {{saved}} sur {{failed}} bloc(s) de contenu.",
    saveRestSaved: "Enregistrement effectué {{saved}} bloc(s) de contenu.",
    saveTitle: "Enregistrer le contenu",
    snippetMenuTitle: "Fragments",
    specialCharactersArrows: "Flèches",
    specialCharactersDialogOKButton: "OK",
    specialCharactersDialogTitle: "Insérer un caractère spécial",
    specialCharactersGreekAlphabet: "Alphabet grec",
    specialCharactersHelp: "Cliquez sur un caractère spécial pour l'ajouter. Cliquez sur \"OK\" lorsque vous avez fini pour fermer la fenêtre.",
    specialCharactersMathematics: "Mathématiques",
    specialCharactersSymbols: "Symboles",
    specialCharactersTitle: "Insérer un caractère spécial",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} caractères au-dessus de la limite",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} caractères restants",
    statisticsButtonCharacters: "{{characters}} caractères",
    statisticsDialogCharactersOverLimit: "{{characters}} caractères, {{charactersRemaining}} au-dessus de la limite",
    statisticsDialogCharactersRemaining: "{{characters}} caractères, {{charactersRemaining}} restants",
    statisticsDialogNotTruncated: "Le contenu ne sera pas tronqué",
    statisticsDialogOKButton: "OK",
    statisticsDialogSentence: "{{sentences}} phrase",
    statisticsDialogSentences: "{{sentences}} phrases",
    statisticsDialogTitle: "Statistiques de contenu",
    statisticsDialogTruncated: "Le contenu contient plus de {{limit}} caractères et peut être tronqué",
    statisticsDialogWord: "{{words}} mot",
    statisticsDialogWords: "{{words}} mots",
    statisticsTitle: "Cliquez pour voir les statistiques",
    tableCreateTitle: "Créer un tableau",
    tableDeleteColumnTitle: "Supprimer une colonne du tableau",
    tableDeleteRowTitle: "Supprimer une ligne du tableau",
    tableInsertColumnTitle: "Insérer une colonne",
    tableInsertRowTitle: "Insérer une ligne",
    tableMergeCellsTitle: "Fusionner des cellules",
    tableSplitCellsTitle: "Tronquer des cellules",
    tagMenuTagAddress: "Address",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Titre&nbsp;1",
    tagMenuTagH2: "Titre&nbsp;2",
    tagMenuTagH3: "Titre&nbsp;3",
    tagMenuTagH4: "Titre&nbsp;4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Paragraphe",
    tagMenuTagPre: "Pré-formaté",
    tagMenuTitle: "Modifier le style de l'élément",
    tagTreeElementLink: "Sélectionner l'élément {{element}}",
    tagTreeElementTitle: "Cliquer pour sélectionner le contenu de l'élément \"{{element}}\"",
    tagTreeRoot: "racine",
    tagTreeRootLink: "Sélectionner tout le contenu modifiable",
    tagTreeRootTitle: "Cliquer pour sélectionner tout le contenu modifiable",
    textBlockQuoteTitle: "Citation",
    textBoldTitle: "Gras",
    textItalicTitle: "Italique",
    textSizeDecreaseTitle: "Diminuer la taille du texte",
    textSizeIncreaseTitle: "Augmenter la taille du texte",
    textStrikeTitle: "Barré",
    textSubTitle: "Indice",
    textSuperTitle: "Exposant",
    textUnderlineTitle: "Souligné",
    unsavedEditWarningText: "Il y a des modifications non enregistrées sur cette page",
    viewSourceDialogCancelButton: "Fermer",
    viewSourceDialogOKButton: "Appliquer le code source",
    viewSourceDialogTitle: "Code source du contenu",
    viewSourceTitle: "Voir \/ Modifier le code source"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/fr.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/he.js
/**
 * @fileOverview Hebrew strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('he', 'עברית', {
    alignCenterTitle: "ישר טקסט למרכז",
    alignJustifyTitle: "יישור טקסט להצדיק",
    alignLeftTitle: "יישור טקסט לשמאל",
    alignRightTitle: "ישר טקסט לימין",
    cancelDialogCancelButton: "להמשיך בעריכה",
    cancelDialogContent: "האם אתה בטוח שברצונך לבטל עריכה? כל השינויים יאבדו!",
    cancelDialogOKButton: "ביטול העריכה",
    cancelDialogTitle: "ביטול העריכה",
    cancelTitle: "ביטול העריכה",
    classMenuTitle: "סגנון בורר",
    clearFormattingTitle: "נקה עיצוב",
    clickButtonToEditText: "עריכה",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "אוטומטי",
    colorMenuBasicBlack: "שחור",
    colorMenuBasicBlue: "כחול",
    colorMenuBasicGreen: "גרין",
    colorMenuBasicGrey: "גריי",
    colorMenuBasicOrange: "כתום",
    colorMenuBasicPurple: "סגול",
    colorMenuBasicRed: "אדום",
    colorMenuBasicTitle: "שינוי צבע הטקסט",
    colorMenuBasicWhite: "לבן",
    dockToElementTitle: "מזח העגינה עורך לרכיב",
    dockToScreenTitle: "מזח העגינה עורך למסך",
    embedDialogCancelButton: "ביטול",
    embedDialogOKButton: "להטביע אובייקט",
    embedDialogTabCode: "הטמע קוד",
    embedDialogTabCodeContent: "הדבק את קוד ה embed של אזור הטקסט שלהלן:",
    embedDialogTabPreview: "תצוגה מקדימה",
    embedDialogTabPreviewContent: "תצוגה מקדימה של האובייקט המוטבע שלך מוצג להלן:",
    embedDialogTitle: "להטביע אובייקט",
    embedTitle: "להטביע אובייקט",
    errorUINoName: "ממשק המשתמש ממשק \"{{ui}}\" אינו חוקי (חייב להיות שם מאפיין)",
    errorUINotObject: "ממשק המשתמש ממשק \"{{ui}}\" אינו חוקי (חייב להיות אובייקט)",
    errorUIOverride: "ממשק המשתמש \"{{name}}\" כבר נרשם, והוא יוחלף",
    fileManagerDialogTitle: "מנהל קבצים",
    fileManagerTitle: "מנהל קבצים",
    floatLeftTitle: "יישור התמונה משמאל",
    floatNoneTitle: "להסיר את התמונה ליישר",
    floatRightTitle: "יישור התמונה מימין",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "קומיקס ללא",
    fontFamilyMenuFontCourier: "שליח חדש",
    fontFamilyMenuFontDefault: "גופן ברירת המחדל",
    fontFamilyMenuFontGeorgia: "גרוזיה",
    fontFamilyMenuFontImpact: "ההשפעה",
    fontFamilyMenuFontPalatino: "פלטין",
    fontFamilyMenuFontTimes: "פעמים רומן חדש",
    fontFamilyMenuTitle: "בחר את הגופן שלך",
    guidesTitle: "הצג קווי יסוד",
    historyRedoTitle: "בצע שוב",
    historyUndoTitle: "בטל",
    hrCreateTitle: "הוספת הסרגל האופקי",
    imageResizeButtonDialogCancelButton: "ביטול",
    imageResizeButtonDialogHeight: "גובה תמונה",
    imageResizeButtonDialogHeightPlaceHolder: "גובה",
    imageResizeButtonDialogOKButton: "שינוי גודל",
    imageResizeButtonDialogTitle: "שינוי גודל של תמונה",
    imageResizeButtonDialogWidth: "רוחב תמונה",
    imageResizeButtonDialogWidthPlaceHolder: "רוחב",
    imageResizeButtonText: "שינוי גודל של תמונה",
    insertFileDialogCancelButton: "ביטול",
    insertFileDialogOKButton: "להוסיף קובץ",
    insertFileNameLabel: "שם קובץ",
    insertFileNamePlaceHolder: "שם קובץ...",
    insertFileTitle: "להוסיף קובץ",
    insertFileURLLabel: "כתובת url של קובץ",
    insertFileURLPlaceHolder: "כתובת URL של קובץ...",
    languageMenuTitle: "שינוי שפה",
    linkCreateDialogCancelButton: "ביטול",
    linkCreateDialogMenuHeader: "בחרו סוג הקישור",
    linkCreateDialogOKButton: "הוסף קישור",
    linkCreateDialogTitle: "הוסף קישור",
    linkCreateTitle: "הוסף קישור",
    linkRemoveTitle: "הסר קישור",
    linkTypeDocumentHeader: "קישור של מסמך או קובץ אחר",
    linkTypeDocumentInfo: "<h2>לא בטוח מה לשים בתיבה לעיל?<\/h2><ol>    <li>ודא שהקובץ הועלה לאתר האינטרנט שלך.<\/li>    <li>פתח את הקובץ שהועלה בדפדפן שלך.<\/li>    <li>העתק URL של הקובץ בשורת הכתובת של הדפדפן שלך ולהדביקו בתיבת לעיל.<\/li><\/ol>",
    linkTypeDocumentLabel: "מסמך או קובץ אחר",
    linkTypeDocumentLocationLabel: "מיקום:",
    linkTypeDocumentLocationPlaceHolder: "הזן כתובת URL",
    linkTypeDocumentNewWindowHeader: "חלון חדש",
    linkTypeDocumentNewWindowLabel: "סמן תיבה זו כדי קובץ לפתוח דפדפן בחלון\/טאב חדש.",
    linkTypeEmailHeader: "קישור אל כתובת דואר אלקטרוני",
    linkTypeEmailLabel: "כתובת הדוא ל שלך",
    linkTypeEmailSubjectLabel: "נושא (אופציונלי):",
    linkTypeEmailSubjectPlaceHolder: "הזן נושא",
    linkTypeEmailToLabel: "דוא:",
    linkTypeEmailToPlaceHolder: "הזן את כתובת הדוא",
    linkTypeExternalHeader: "קישור לדף באתר אחר",
    linkTypeExternalInfo: "<h2>לא בטוח מה לשים בתיבה לעיל?<\/h2><ol>    <li>מצא את העמוד על האינטרנט שברצונך לקשר.<\/li>    <li>העתק את כתובת האינטרנט בשורת הכתובת של הדפדפן שלך ולהדביקו בתיבת לעיל.<\/li><\/ol>",
    linkTypeExternalLabel: "דף באתר אחר",
    linkTypeExternalLocationLabel: "מיקום:",
    linkTypeExternalLocationPlaceHolder: "הזן כתובת URL",
    linkTypeExternalNewWindowHeader: "חלון חדש",
    linkTypeExternalNewWindowLabel: "סמן תיבה זו כדי שהקישור לפתוח דפדפן בחלון\/טאב חדש.",
    linkTypeInternalHeader: "קישור לדף באתר זה",
    linkTypeInternalInfo: "<h2>לא בטוח מה לשים בתיבה לעיל?<\/h2><ol>    <li>מצא את העמוד על הקישור באתר זה כדי.<\/li>    <li>להעתיק את כתובת האינטרנט של הדפדפן לכתובת בר, למעט \"{{domain}}\" ולהדביקו בתיבת לעיל.<\/li><\/ol>",
    linkTypeInternalLabel: "דף באתר זה",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "הזן כתובת URI",
    linkTypeInternalNewWindowHeader: "חלון חדש",
    linkTypeInternalNewWindowLabel: "סמן תיבה זו כדי שהקישור לפתוח דפדפן בחלון\/טאב חדש.",
    listOrderedTitle: "רשימה מסודרת",
    listUnorderedTitle: "רשימה שאינה מסודרת",
    logoTitle: "למד עוד אודות עורך WYSIWYG את הראפטור",
    loremIpsumTitle: "הוספת טקסט בדיקה",
    navigateAway: "\nיש נשמרו השינויים בדף זה. \nאם תנווט מחוץ לדף זה תאבד את השינויים שלא נשמרו",
    pasteDialogCancelButton: "ביטול",
    pasteDialogFormattedCleaned: "מעוצב &amp; לנקות",
    pasteDialogFormattedUnclean: "מעוצב טמאה",
    pasteDialogOKButton: "הוספה",
    pasteDialogPlain: "טקסט רגיל",
    pasteDialogSource: "קוד מקור",
    pasteDialogTitle: "הדבק",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "נכשל באחזור מהדורות",
    revisionsApplyButtonDialogCancelButton: "ביטול",
    revisionsApplyButtonDialogOKButton: "חזרה למצב קודם",
    revisionsApplyButtonDialogText: "אישור חזרה למצב קודם",
    revisionsApplyButtonDialogTitle: "אישור חזרה למצב קודם",
    revisionsApplyButtonText: "חזרה למצב קודם",
    revisionsApplyButtonTitle: "חזרה למצב קודם",
    revisionsApplyDialogContent: "זה יחליף את התוכן הנוכחי עם הגרסה שנבחרה.<br>התוכן הנוכחי יתווסף כמהדורה, יהיה גלוי ברשימת התיקונים של קוביית מידע זו.",
    revisionsButtonCurrent: "זרם",
    revisionsButtonViewDiffText: "ההבדלים",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "נוצר",
    revisionsDialogCancelButton: "ביטול",
    revisionsDialogTitle: "הצג תיקונים תוכן",
    revisionsDiffButtonDialogCancelButton: "סגור",
    revisionsDiffButtonDialogTitle: "ההבדלים תצוגה",
    revisionsDiffButtonText: "ההבדלים תצוגה",
    revisionsDiffButtonTitle: "ההבדלים תצוגה",
    revisionsLoading: "טוען תיקונים...",
    revisionsNone: "אין תיקונים עבור רכיב זה",
    revisionsPreviewButtonText: "תצוגה מקדימה",
    revisionsPreviewButtonTitle: "תצוגה מקדימה",
    revisionsText: "מהדורות",
    revisionsTextEmpty: "אין תיקונים",
    revisionsTitle: "",
    rfmClose: "סגור",
    rfmContinue: "המשך",
    rfmDelete: "מחק",
    rfmDownload: "להורדה",
    rfmFileActions: "פעולות",
    rfmFileModificationTime: "שונה",
    rfmFileName: "שם",
    rfmFileSize: "גודל",
    rfmFileType: "סוג",
    rfmFilteredTotal: "מראה {{start}} לסיים {{end}} {{filteredTotal}} קבצים",
    rfmFirst: "הראשון",
    rfmHeadingDirectories: "ספריות",
    rfmHeadingSearch: "חיפוש",
    rfmHeadingTags: "תגיות",
    rfmHeadingUpload: "להעלות",
    rfmInsert: "הוספה",
    rfmLast: "אחרונה",
    rfmSearch: ". קדימה",
    rfmTagDocument: "המסמך",
    rfmTagImage: "התמונה",
    rfmTotal: ", מסוננים מסכום {{total}}",
    rfmUpload: "להעלות",
    rfmUploadBrowse: "עיון",
    rfmUploadDrop: "להוריד קבצים כאן",
    rfmUploadFileRemove: "הסר",
    rfmUploadOr: "או",
    rfmView: "תצוגה",
    saveJsonFail: "הצלחתי להציל גושי תוכן {{failed}}",
    saveJsonSaved: "נשמר בהצלחה גושי תוכן {{saved}}.",
    saveNotConfigured: "שמור לא נקבעה, או אינו זמין.",
    saveRestFail: "שמירת גושי תוכן {{failed}} נכשלה.",
    saveRestPartial: "הציל {{saved}} מקוביות תוכן {{failed}}.",
    saveRestSaved: "נשמר בהצלחה גושי תוכן {{saved}}.",
    saveTitle: "שמירת תוכן",
    snippetMenuTitle: "גזירים",
    specialCharactersArrows: "חצים",
    specialCharactersDialogOKButton: "אוקיי",
    specialCharactersDialogTitle: "הוספת תווים מיוחדים",
    specialCharactersGreekAlphabet: "אלפבית יווני",
    specialCharactersHelp: "לחץ על תו מיוחד כדי להוסיף אותו. לחץ על \"אישור\" כאשר נעשה כדי לסגור תיבת דו-שיח זו",
    specialCharactersMathematics: "מתמטיקה",
    specialCharactersSymbols: "סמלים",
    specialCharactersTitle: "הוספת תו מיוחד",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} תווים ממגבלת",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} תווים שנותרו",
    statisticsButtonCharacters: "{{characters}} תווים",
    statisticsDialogCharactersOverLimit: "תווים {{characters}}, {{charactersRemaining}} מעל הגבול מומלצים",
    statisticsDialogCharactersRemaining: "תווים {{characters}}, {{charactersRemaining}} שנותרו",
    statisticsDialogNotTruncated: "תוכן לא יקוצר",
    statisticsDialogOKButton: "אוקיי",
    statisticsDialogSentence: "גזר הדין {{sentences}}",
    statisticsDialogSentences: "משפטים {{sentences}}",
    statisticsDialogTitle: "תוכן סטטיסטיקות",
    statisticsDialogTruncated: "תוכן מכיל יותר תווים {{limit}}, עשויים להיחתך",
    statisticsDialogWord: "המילה {{words}}",
    statisticsDialogWords: "מילים {{words}}",
    statisticsTitle: "לחץ כדי להציג נתונים סטטיסטיים",
    tableCreateTitle: "יצירת טבלה",
    tableDeleteColumnTitle: "מחק עמודה בטבלה",
    tableDeleteRowTitle: "מחק שורת הטבלה",
    tableInsertColumnTitle: "הוספת עמודת הטבלה",
    tableInsertRowTitle: "הוסף שורת הטבלה",
    tableMergeCellsTitle: "מיזוג תאים בטבלה",
    tableSplitCellsTitle: "פיצול תאים בטבלה",
    tagMenuTagAddress: "כתובת",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "כותרת 1",
    tagMenuTagH2: "כותרת 2",
    tagMenuTagH3: "' כותרת 3",
    tagMenuTagH4: "כותרת 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "פסקה",
    tagMenuTagPre: "מעוצב מראש",
    tagMenuTitle: "שינוי סגנון רכיב",
    tagTreeElementLink: "בחר ברכיב {{element}}",
    tagTreeElementTitle: "לחץ כדי לבחור את התוכן של רכיב \"{{element}}\"",
    tagTreeRoot: "שורש",
    tagTreeRootLink: "בחר את כל התוכן לעריכה",
    tagTreeRootTitle: "לחץ כדי לבחור את כל התוכן לעריכה",
    textBlockQuoteTitle: "בלוק ציטוט",
    textBoldTitle: "מודגש",
    textItalicTitle: "נטוי",
    textSizeDecreaseTitle: "להקטין את גודל הטקסט",
    textSizeIncreaseTitle: "להגדיל את גודל הטקסט",
    textStrikeTitle: "חוצה",
    textSubTitle: "קובץ script משנה",
    textSuperTitle: "סופר-הסקריפט",
    textUnderlineTitle: "קו תחתון",
    unsavedEditWarningText: "יש נשמרו השינויים בדף זה",
    viewSourceDialogCancelButton: "סגור",
    viewSourceDialogOKButton: "להחיל את קוד המקור",
    viewSourceDialogTitle: "קוד מקור תוכן",
    viewSourceTitle: "הצג\/ערוך קוד המקור"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/he.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/hi.js
/**
 * @fileOverview Hindi strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('hi', 'मानक हिन्दी', {
    alignCenterTitle: "पाठ मध्य संरेखित करें",
    alignJustifyTitle: "पाठ को संरेखित करना का औचित्य साबित",
    alignLeftTitle: "पाठ बाएँ संरेखित करें",
    alignRightTitle: "पाठ दाएँ संरेखित करें",
    cancelDialogCancelButton: "संपादन जारी रखें",
    cancelDialogContent: "आप सुनिश्चित करें कि आप संपादन रद्द करना चाहते हैं? सभी परिवर्तन खो जाएँगे!",
    cancelDialogOKButton: "संपादन रद्द करें",
    cancelDialogTitle: "संपादन रद्द करें",
    cancelTitle: "संपादन रद्द करें",
    classMenuTitle: "शैली पिकर",
    clearFormattingTitle: "स्वरूपण साफ़ करें",
    clickButtonToEditText: "संपादित करें",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "स्वत:",
    colorMenuBasicBlack: "ब्लैक",
    colorMenuBasicBlue: "ब्लू",
    colorMenuBasicGreen: "ग्रीन",
    colorMenuBasicGrey: "ग्रे",
    colorMenuBasicOrange: "ऑरेंज",
    colorMenuBasicPurple: "बैंगनी",
    colorMenuBasicRed: "लाल",
    colorMenuBasicTitle: "पाठ का रंग परिवर्तित करें",
    colorMenuBasicWhite: "व्हाइट",
    dockToElementTitle: "डॉक\/संपादक तत्व को अनडॉक करें",
    dockToScreenTitle: "डॉक\/अनडॉक करने के लिए स्क्रीन संपादक",
    embedDialogCancelButton: "रद्द करें",
    embedDialogOKButton: "ऑब्जेक्ट एम्बेड करें",
    embedDialogTabCode: "एम्बेड कोड",
    embedDialogTabCodeContent: "नीचे दिए गए पाठ क्षेत्र में अपने एम्बेड कोड चिपकाएँ:",
    embedDialogTabPreview: "पूर्वावलोकन",
    embedDialogTabPreviewContent: "अपने एम्बेडेड ऑब्जेक्ट का एक पूर्वावलोकन के नीचे प्रदर्शित होता है:",
    embedDialogTitle: "ऑब्जेक्ट एम्बेड करें",
    embedTitle: "ऑब्जेक्ट एम्बेड करें",
    errorUINoName: "UI \"{{ui}}\" अमान्य है (एक नाम गुण होना आवश्यक है)",
    errorUINotObject: "UI \"{{ui}}\" अमान्य है (एक ऑब्जेक्ट होना चाहिए)",
    errorUIOverride: "UI \"{{name}}\" पहले से ही पंजीकृत किया गया है, और अधिलेखित हो जाएगा",
    fileManagerDialogTitle: "फ़ाइल प्रबंधक",
    fileManagerTitle: "फ़ाइल प्रबंधक",
    floatLeftTitle: "छवि को बाईं ओर संरेखित करें",
    floatNoneTitle: "छवि निकालें संरेखित करें",
    floatRightTitle: "छवि ठीक से संरेखित करें",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "हास्य बिना",
    fontFamilyMenuFontCourier: "कोरियर नया",
    fontFamilyMenuFontDefault: "डिफ़ॉल्ट फ़ॉन्ट",
    fontFamilyMenuFontGeorgia: "जॉर्जिया",
    fontFamilyMenuFontImpact: "प्रभाव",
    fontFamilyMenuFontPalatino: "पैलेटाइन",
    fontFamilyMenuFontTimes: "टाइम्स न्यू रोमन",
    fontFamilyMenuTitle: "आपका फ़ॉन्ट चुनें",
    guidesTitle: "तत्व मार्गदर्शिकाएँ दिखाएँ",
    historyRedoTitle: "फिर से करें",
    historyUndoTitle: "पूर्ववत् करें",
    hrCreateTitle: "क्षैतिज रूल डालें",
    imageResizeButtonDialogCancelButton: "रद्द करें",
    imageResizeButtonDialogHeight: "छवि ऊँचाई",
    imageResizeButtonDialogHeightPlaceHolder: "ऊँचाई",
    imageResizeButtonDialogOKButton: "आकार बदलें",
    imageResizeButtonDialogTitle: "छवि का आकार बदलना",
    imageResizeButtonDialogWidth: "छवि चौड़ाई",
    imageResizeButtonDialogWidthPlaceHolder: "चौड़ाई",
    imageResizeButtonText: "छवि का आकार बदलना",
    insertFileDialogCancelButton: "रद्द करें",
    insertFileDialogOKButton: "फ़ाइल सम्मिलित करें",
    insertFileNameLabel: "फ़ाइल का नाम",
    insertFileNamePlaceHolder: "फ़ाइल का नाम...",
    insertFileTitle: "फ़ाइल सम्मिलित करें",
    insertFileURLLabel: "फ़ाइल यूआरएल",
    insertFileURLPlaceHolder: "फ़ाइल URL...",
    languageMenuTitle: "भाषा बदलें",
    linkCreateDialogCancelButton: "रद्द करें",
    linkCreateDialogMenuHeader: "एक लिंक प्रकार चुनें",
    linkCreateDialogOKButton: "लिंक सम्मिलित करें",
    linkCreateDialogTitle: "लिंक सम्मिलित करें",
    linkCreateTitle: "लिंक सम्मिलित करें",
    linkRemoveTitle: "लिंक निकालें",
    linkTypeDocumentHeader: "किसी दस्तावेज़ या अन्य फ़ाइल के लिए लिंक",
    linkTypeDocumentInfo: "<h2>नहीं यकीन है कि क्या इसके बाद के संस्करण बॉक्स में डाल दिया है?<\/h2><ol>    <li>सुनिश्चित करें कि आपकी वेबसाइट के लिए फ़ाइल अपलोड किया गया है।<\/li>    <li>अपलोड की गई फ़ाइल आपके ब्राउज़र में खोलें।<\/li>    <li>अपने ब्राउज़र की पता पट्टी से फ़ाइल के URL की प्रतिलिपि बनाएँ और इसे उपरोक्त बॉक्स में पेस्ट करें।<\/li><\/ol>",
    linkTypeDocumentLabel: "दस्तावेज़ या अन्य फ़ाइल",
    linkTypeDocumentLocationLabel: "स्थान:",
    linkTypeDocumentLocationPlaceHolder: "कोई URL दर्ज करें",
    linkTypeDocumentNewWindowHeader: "नई विंडो",
    linkTypeDocumentNewWindowLabel: "एक नई ब्राउज़र विंडो\/टैब में खोलें फ़ाइल के लिए इस बॉक्स को चेक करें।",
    linkTypeEmailHeader: "एक ईमेल पता करने के लिए लिंक",
    linkTypeEmailLabel: "ईमेल पता",
    linkTypeEmailSubjectLabel: "विषय (वैकल्पिक):",
    linkTypeEmailSubjectPlaceHolder: "विषय दर्ज करें",
    linkTypeEmailToLabel: "ईमेल:",
    linkTypeEmailToPlaceHolder: "ईमेल पता दर्ज करें",
    linkTypeExternalHeader: "एक अन्य वेबसाइट पर एक पृष्ठ से लिंक करें",
    linkTypeExternalInfo: "<h2>नहीं यकीन है कि क्या इसके बाद के संस्करण बॉक्स में डाल दिया है?<\/h2><ol>    <li>पृष्ठ लिंक करने के लिए इच्छित वेब पर खोजें।<\/li>    <li>अपने ब्राउज़र की पता बार से वेब पते की प्रतिलिपि बनाएँ और इसे उपरोक्त बॉक्स में पेस्ट करें।<\/li><\/ol>",
    linkTypeExternalLabel: "एक अन्य वेबसाइट पर पृष्ठ",
    linkTypeExternalLocationLabel: "स्थान:",
    linkTypeExternalLocationPlaceHolder: "कोई URL दर्ज करें",
    linkTypeExternalNewWindowHeader: "नई विंडो",
    linkTypeExternalNewWindowLabel: "एक नई ब्राउज़र विंडो\/टैब में खोलें लिंक है करने के लिए इस बॉक्स को चेक करें।",
    linkTypeInternalHeader: "इस वेबसाइट पर एक पृष्ठ से लिंक करें",
    linkTypeInternalInfo: "<h2>नहीं यकीन है कि क्या इसके बाद के संस्करण बॉक्स में डाल दिया है?<\/h2><ol>    <li>पृष्ठ पर इस साइट लिंक करने के लिए मिल।<\/li>    <li>अपने ब्राउज़र की पता पट्टी, \"{{domain}}\" को छोड़कर से वेब पते की प्रतिलिपि बनाएँ और इसे उपरोक्त बॉक्स में पेस्ट करें।<\/li><\/ol>",
    linkTypeInternalLabel: "इस वेबसाइट पर पृष्ठ",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "एक URI दर्ज करें",
    linkTypeInternalNewWindowHeader: "नई विंडो",
    linkTypeInternalNewWindowLabel: "एक नई ब्राउज़र विंडो\/टैब में खोलें लिंक है करने के लिए इस बॉक्स को चेक करें।",
    listOrderedTitle: "आदेश सूची",
    listUnorderedTitle: "Unordered सूची",
    logoTitle: "और Raptor WYSIWYG संपादक के बारे में जानें",
    loremIpsumTitle: "परीक्षण के लिए डमी पाठ सम्मिलित करें",
    navigateAway: "\nवहाँ परिवर्तन इस पेज पर बिना सहेजे गए हैं। \nयदि आप इस पृष्ठ से दूर नेविगेट आप अपने न सहेजे गए परिवर्तन खो देंगे",
    pasteDialogCancelButton: "रद्द करें",
    pasteDialogFormattedCleaned: "स्वरूपित और साफ किया",
    pasteDialogFormattedUnclean: "अस्वच्छ स्वरूपित किया गया",
    pasteDialogOKButton: "सम्मिलित करें",
    pasteDialogPlain: "सादा पाठ",
    pasteDialogSource: "स्रोत कोड",
    pasteDialogTitle: "चिपकाएँ",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "संशोधन को पुनः प्राप्त करने में विफल रहा",
    revisionsApplyButtonDialogCancelButton: "रद्द करें",
    revisionsApplyButtonDialogOKButton: "रोलबैक",
    revisionsApplyButtonDialogText: "रोलबैक पुष्टिकरण",
    revisionsApplyButtonDialogTitle: "रोलबैक पुष्टिकरण",
    revisionsApplyButtonText: "रोलबैक",
    revisionsApplyButtonTitle: "रोलबैक",
    revisionsApplyDialogContent: "यह चयनित संशोधन के साथ वर्तमान सामग्री बदल देगा।<br>वर्तमान सामग्री एक संशोधन के रूप में जोड़ दिया जाएगा, और इस खंड के लिए संशोधन सूची में दिखाई जाएगी।",
    revisionsButtonCurrent: "वर्तमान",
    revisionsButtonViewDiffText: "मतभेद",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "बनाया गया",
    revisionsDialogCancelButton: "रद्द करें",
    revisionsDialogTitle: "दृश्य सामग्री पुनरावलोकन",
    revisionsDiffButtonDialogCancelButton: "बंद करें",
    revisionsDiffButtonDialogTitle: "दृश्य अंतर",
    revisionsDiffButtonText: "दृश्य अंतर",
    revisionsDiffButtonTitle: "दृश्य अंतर",
    revisionsLoading: "पुनरावलोकन लोड हो रहा है...",
    revisionsNone: "इस तत्व के लिए कोई संशोधन",
    revisionsPreviewButtonText: "पूर्वावलोकन",
    revisionsPreviewButtonTitle: "पूर्वावलोकन",
    revisionsText: "पुनरावलोकन",
    revisionsTextEmpty: "कोई संशोधन",
    revisionsTitle: "",
    rfmClose: "बंद करें",
    rfmContinue: "जारी रखें",
    rfmDelete: "हटाएँ",
    rfmDownload: "डाउनलोड करें",
    rfmFileActions: "क्रियाएँ",
    rfmFileModificationTime: "संशोधित",
    rfmFileName: "नाम",
    rfmFileSize: "का आकार",
    rfmFileType: "प्रकार",
    rfmFilteredTotal: "{{start}} {{end}} के दिखा {{filteredTotal}} फ़ाइलें",
    rfmFirst: "प्रथम",
    rfmHeadingDirectories: "निर्देशिकाएँ",
    rfmHeadingSearch: "खोज",
    rfmHeadingTags: "टैग",
    rfmHeadingUpload: "अपलोड करें",
    rfmInsert: "सम्मिलित करें",
    rfmLast: "अंतिम",
    rfmSearch: "जाओ",
    rfmTagDocument: "दस्तावेज़",
    rfmTagImage: "छवि",
    rfmTotal: ", छान {{total}}",
    rfmUpload: "अपलोड करें",
    rfmUploadBrowse: "ब्राउज़ करें",
    rfmUploadDrop: "फ़ाइलें यहाँ छोड़ें",
    rfmUploadFileRemove: "निकालें",
    rfmUploadOr: "या",
    rfmView: "दृश्य",
    saveJsonFail: "{{failed}} सामग्री लुभाने सहेजने में विफल",
    saveJsonSaved: "{{saved}} सामग्री लुभाने सफलतापूर्वक सहेजा गया।",
    saveNotConfigured: "सहेजें नहीं कॉन्फ़िगर किया गया है, या अक्षम किया गया है।",
    saveRestFail: "{{failed}} सामग्री लुभाने सहेजने में विफल।",
    saveRestPartial: "{{saved}} सामग्री ब्लॉक से बाहर {{failed}} बचाया।",
    saveRestSaved: "{{saved}} सामग्री लुभाने सफलतापूर्वक सहेजा गया।",
    saveTitle: "बचाने के लिए सामग्री",
    snippetMenuTitle: "स्निपेट्स",
    specialCharactersArrows: "तीर",
    specialCharactersDialogOKButton: "ठीक है",
    specialCharactersDialogTitle: "विशेष वर्ण सम्मिलित करें",
    specialCharactersGreekAlphabet: "यूनानी वर्णमाला",
    specialCharactersHelp: "इसे जोड़ने के लिए कोई विशेष वर्ण क्लिक करें। \"इस संवाद को बंद करने के लिए जब किया ठीक\" क्लिक करें",
    specialCharactersMathematics: "गणित",
    specialCharactersSymbols: "प्रतीक",
    specialCharactersTitle: "कोई विशेष वर्ण सम्मिलित करें",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} वर्ण सीमा से अधिक",
    statisticsButtonCharacterRemaining: "शेष वर्ण {{charactersRemaining}}",
    statisticsButtonCharacters: "{{characters}} अक्षर",
    statisticsDialogCharactersOverLimit: "{{characters}} वर्णों, {{charactersRemaining}} की सिफारिश की सीमा से अधिक",
    statisticsDialogCharactersRemaining: "शेष {{characters}} अक्षर, {{charactersRemaining}}",
    statisticsDialogNotTruncated: "सामग्री छोटा नहीं हो जाएगा",
    statisticsDialogOKButton: "ठीक है",
    statisticsDialogSentence: "{{sentences}} वाक्य",
    statisticsDialogSentences: "{{sentences}} वाक्य",
    statisticsDialogTitle: "सामग्री आँकड़े",
    statisticsDialogTruncated: "सामग्री {{limit}} वर्णों से अधिक होता है और काटे जा सकते हैं",
    statisticsDialogWord: "{{words}} शब्द",
    statisticsDialogWords: "{{words}} शब्द",
    statisticsTitle: "आँकड़े देखने के लिए क्लिक करें",
    tableCreateTitle: "तालिका बनाएँ",
    tableDeleteColumnTitle: "तालिका स्तंभ हटाएँ",
    tableDeleteRowTitle: "तालिका पंक्ति हटाएँ",
    tableInsertColumnTitle: "तालिका स्तंभ सम्मिलित करें",
    tableInsertRowTitle: "तालिका पंक्ति सम्मिलित करें",
    tableMergeCellsTitle: "टेबल कोशिकाओं विलय",
    tableSplitCellsTitle: "तालिका कक्षों को विभाजित",
    tagMenuTagAddress: "पते",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "शीर्ष 1",
    tagMenuTagH2: "शीर्ष 2",
    tagMenuTagH3: "शीर्ष 3",
    tagMenuTagH4: "शीर्ष 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "अनुच्छेद",
    tagMenuTagPre: "पूर्व स्वरूपित",
    tagMenuTitle: "तत्व शैली परिवर्तित करें",
    tagTreeElementLink: "{{element}} तत्व का चयन करें",
    tagTreeElementTitle: "\"{{element}}\" तत्व की सामग्री का चयन करने के लिए क्लिक करें",
    tagTreeRoot: "रूट",
    tagTreeRootLink: "सभी संपादन योग्य सामग्री का चयन करें",
    tagTreeRootTitle: "सभी संपादन योग्य सामग्री का चयन करने के लिए क्लिक करें",
    textBlockQuoteTitle: "ब्लॉक उद्धरण",
    textBoldTitle: "बोल्ड",
    textItalicTitle: "इटैलिक",
    textSizeDecreaseTitle: "पाठ का आकार घटाएँ",
    textSizeIncreaseTitle: "पाठ का आकार बढ़ाएँ",
    textStrikeTitle: "स्ट्राइक थ्रू",
    textSubTitle: "उप-लिपि",
    textSuperTitle: "सुपर स्क्रिप्ट",
    textUnderlineTitle: "रेखांकित करें",
    unsavedEditWarningText: "वहाँ इस पृष्ठ पर परिवर्तन बिना सहेजे गए हैं",
    viewSourceDialogCancelButton: "बंद करें",
    viewSourceDialogOKButton: "स्रोत कोड लागू करें",
    viewSourceDialogTitle: "सामग्री स्रोत कोड",
    viewSourceTitle: "देखें\/स्रोत कोड संपादित करें"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/hi.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ht.js
/**
 * @fileOverview Haitian Creole strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ht', 'Kreyòl Ayisyen', {
    alignCenterTitle: "Fè aliman tèks sant",
    alignJustifyTitle: "Fè aliman tèks jistifye",
    alignLeftTitle: "Fè aliman tèks gòch",
    alignRightTitle: "Fè aliman tèks dwat",
    cancelDialogCancelButton: "Kontinye Modification",
    cancelDialogContent: "Eske ou si ou vle pou anile pwogram modification Tout chanjman p'ap pèdi.",
    cancelDialogOKButton: "Annuler Modification",
    cancelDialogTitle: "Annuler Modification",
    cancelTitle: "Annuler modification",
    classMenuTitle: "Estil sélecteur",
    clearFormattingTitle: "Clairement en",
    clickButtonToEditText: "Edite",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Otomatik",
    colorMenuBasicBlack: "Noua",
    colorMenuBasicBlue: "Blè",
    colorMenuBasicGreen: "Vèt",
    colorMenuBasicGrey: "Gri",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Vyolèt, mov",
    colorMenuBasicRed: "Rouj",
    colorMenuBasicTitle: "Chanje koulè tèks",
    colorMenuBasicWhite: "Blan",
    dockToElementTitle: "Waf\/undock editè pou eleman",
    dockToScreenTitle: "Waf\/undock editè pou écran",
    embedDialogCancelButton: "Anile",
    embedDialogOKButton: "Houke Objet",
    embedDialogTabCode: "Houke kòd",
    embedDialogTabCodeContent: "Pat kòd intégrer ou nan tèks zòn ki pi ba:",
    embedDialogTabPreview: "Aperçu",
    embedDialogTabPreviewContent: "Yon aperçu Des objets embedded ou s' pi ba pase:",
    embedDialogTitle: "Houke Objet",
    embedTitle: "Houke objet",
    errorUINoName: "UI, \"{{ui}}\" non (pou fè sa ki rete non)",
    errorUINotObject: "UI, \"{{ui}}\" non (dwe yon objet)",
    errorUIOverride: "UI, \"{{name}}\" ki deja te anrejistre, Et Sera remplacé",
    fileManagerDialogTitle: "Responsab yon fichier",
    fileManagerTitle: "Responsab yon fichier",
    floatLeftTitle: "Fè aliman estati a gosh",
    floatNoneTitle: "Retire estati fè aliman",
    floatRightTitle: "Fè aliman estati a dwat",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Bande san",
    fontFamilyMenuFontCourier: "Nouvo courrier",
    fontFamilyMenuFontDefault: "Klavye defo",
    fontFamilyMenuFontGeorgia: "Georgie",
    fontFamilyMenuFontImpact: "Enpak",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Fwa nouvo Romèn",
    fontFamilyMenuTitle: "Chwazi klavye ou",
    guidesTitle: "Montre eleman konsèy",
    historyRedoTitle: "Refè",
    historyUndoTitle: "Delage",
    hrCreateTitle: "Mete kouche plat ki t' ap mache sou",
    imageResizeButtonDialogCancelButton: "Anile",
    imageResizeButtonDialogHeight: "Imaj wotè",
    imageResizeButtonDialogHeightPlaceHolder: "Wotè",
    imageResizeButtonDialogOKButton: "Redimensionner",
    imageResizeButtonDialogTitle: "Redimensionner imaj",
    imageResizeButtonDialogWidth: "Imaj lajè",
    imageResizeButtonDialogWidthPlaceHolder: "Ajè",
    imageResizeButtonText: "Redimensionner imaj",
    insertFileDialogCancelButton: "Anile",
    insertFileDialogOKButton: "Mete fichier",
    insertFileNameLabel: "Fichier non",
    insertFileNamePlaceHolder: "Fichier non...",
    insertFileTitle: "Mete fichier",
    insertFileURLLabel: "Adrès entènèt fichier",
    insertFileURLPlaceHolder: "Adrès entènèt fichier...",
    languageMenuTitle: "Chanjman lang",
    linkCreateDialogCancelButton: "Anile",
    linkCreateDialogMenuHeader: "Chwazi yon jan ki lye de",
    linkCreateDialogOKButton: "Mete lyen",
    linkCreateDialogTitle: "Mete lyen",
    linkCreateTitle: "Mete lyen",
    linkRemoveTitle: "Retire lyen",
    linkTypeDocumentHeader: "Lien pou yon dokiman ou fichier lòt",
    linkTypeDocumentInfo: "<h2>Pa si sa pou yo mete yo nan bwat la CI-dessus?<\/h2><ol>    <li>Asire dokiman an te chargé pou ou sit entènèt.<\/li>    <li>Louvri chargé dokiman an nan browser ou.<\/li>    <li>Copie adrès entènèt dokiman an de browser ou adrès kafe Et pat li antre nan bwat la CI-dessus.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokiman ou fichier lòt",
    linkTypeDocumentLocationLabel: "Kote yo ye:",
    linkTypeDocumentLocationPlaceHolder: "Rantre nan yon adrès entènèt",
    linkTypeDocumentNewWindowHeader: "Nouvo fenèt",
    linkTypeDocumentNewWindowLabel: "Tyeke bwat sa a gen dokiman an te ouvwi nan yon nouvo browser fennèt\/onglet.",
    linkTypeEmailHeader: "Lien pou yon adrès kouryèll",
    linkTypeEmailLabel: "Mel adrès",
    linkTypeEmailSubjectLabel: "Sijè (opsyonèl):",
    linkTypeEmailSubjectPlaceHolder: "Rantre nan sijè",
    linkTypeEmailToLabel: "Mel:",
    linkTypeEmailToPlaceHolder: "Antre fè kouryèll adrès",
    linkTypeExternalHeader: "Lien pou yon paj sou sit entènèt yon lòt",
    linkTypeExternalInfo: "<h2>Pa si sa pou yo mete yo nan bwat la CI-dessus?<\/h2><ol>    <li>Chèche paj la sou entènèt la, ou vle Lien pou.<\/li>    <li>Copie adrès entènèt la nan browser ou adrès kafe Et pat li antre nan bwat la CI-dessus.<\/li><\/ol>",
    linkTypeExternalLabel: "Page sou sit entènèt yon lòt",
    linkTypeExternalLocationLabel: "Kote yo ye:",
    linkTypeExternalLocationPlaceHolder: "Rantre nan yon adrès entènèt",
    linkTypeExternalNewWindowHeader: "Nouvo fenèt",
    linkTypeExternalNewWindowLabel: "Tyeke bwat sa a gen lyen louvri nan yon nouvo browser fennèt\/onglet.",
    linkTypeInternalHeader: "Lien pou yon paj sou sit entènèt sa a",
    linkTypeInternalInfo: "<h2>Pa si sa pou yo mete yo nan bwat la CI-dessus?<\/h2><ol>    <li>Chèche paj la sou sa a kote ki gen lyen pou.<\/li>    <li>Copie adrès entènèt la nan adrès ou browser bar, Des \"{{domain}}\" Et pat li antre nan bwat la CI-dessus.<\/li><\/ol>",
    linkTypeInternalLabel: "Page sou sit entènèt sa a",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Rantre nan yon OURI",
    linkTypeInternalNewWindowHeader: "Nouvo fenèt",
    linkTypeInternalNewWindowLabel: "Tyeke bwat sa a gen lyen louvri nan yon nouvo browser fennèt\/onglet.",
    listOrderedTitle: "Lis a",
    listUnorderedTitle: "Lis non",
    logoTitle: "Aprann plis sou editè WYSIWYG Raptor",
    loremIpsumTitle: "Mete dantrènman tèks pou yo swiv lè",
    navigateAway: "\nGen sont enregistrées chanjman nan paj sa a. \nSi w navige kite paj sa a ou pral pèdi ou chanje non",
    pasteDialogCancelButton: "Anile",
    pasteDialogFormattedCleaned: "Fòmate &amp; pwòpte",
    pasteDialogFormattedUnclean: "Fòmate kondisyon",
    pasteDialogOKButton: "Apò",
    pasteDialogPlain: "La Plèn tèks",
    pasteDialogSource: "Sous kòd",
    pasteDialogTitle: "Mòtye",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Te tonbe pou rekipere révisions",
    revisionsApplyButtonDialogCancelButton: "Anile",
    revisionsApplyButtonDialogOKButton: "Ki dekouvri dediksyon an",
    revisionsApplyButtonDialogText: "Konfimasyon ki dekouvri dediksyon an",
    revisionsApplyButtonDialogTitle: "Konfimasyon ki dekouvri dediksyon an",
    revisionsApplyButtonText: "Ki dekouvri dediksyon an",
    revisionsApplyButtonTitle: "Ki dekouvri dediksyon an",
    revisionsApplyDialogContent: "Sa ap ranplase contenu aktyèl la ak lan, sélectionnée revizyon.<br>Contenu aktyèl la ap tankou yon revizyon ajouté, epi p'ap vizib nan lis révisions la pou blòk sa a.",
    revisionsButtonCurrent: "Kouran",
    revisionsButtonViewDiffText: "Diferans",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Te kreye",
    revisionsDialogCancelButton: "Anile",
    revisionsDialogTitle: "Révisions pi kontan wè",
    revisionsDiffButtonDialogCancelButton: "Fèmen",
    revisionsDiffButtonDialogTitle: "Wè diferans",
    revisionsDiffButtonText: "Wè diferans",
    revisionsDiffButtonTitle: "Wè diferans",
    revisionsLoading: "Chaje révisions...",
    revisionsNone: "Pa révisions pou eleman sa a",
    revisionsPreviewButtonText: "Aperçu",
    revisionsPreviewButtonTitle: "Aperçu",
    revisionsText: "Révisions",
    revisionsTextEmpty: "Révisions pa",
    revisionsTitle: "",
    rfmClose: "Fèmen",
    rfmContinue: "Kontinye",
    rfmDelete: "Retire",
    rfmDownload: "Rale dosye",
    rfmFileActions: "Aksyon",
    rfmFileModificationTime: "Modifye",
    rfmFileName: "fe-apel",
    rfmFileSize: "Taille",
    rfmFileType: "Tip",
    rfmFilteredTotal: "Affichage {{start}} pou {{end}} de fichiers {{filteredTotal}}",
    rfmFirst: "Premye",
    rfmHeadingDirectories: "Répertoires",
    rfmHeadingSearch: "Recherche",
    rfmHeadingTags: "Baj",
    rfmHeadingUpload: "Téléchargement",
    rfmInsert: "Apò",
    rfmLast: "Dire",
    rfmSearch: "Ale",
    rfmTagDocument: "Dokiman",
    rfmTagImage: "Estati",
    rfmTotal: ", filtrage depi {{total}} nan",
    rfmUpload: "Téléchargement",
    rfmUploadBrowse: "Parcourir",
    rfmUploadDrop: "Ane ke yo bliye Fichiers isit la",
    rfmUploadFileRemove: "Retire",
    rfmUploadOr: "ou",
    rfmView: "Vi",
    saveJsonFail: "Te tonbe pou sove block(s) contenu {{failed}}",
    saveJsonSaved: "Anpil siksè te sove block(s) contenu {{saved}}.",
    saveNotConfigured: "Save ki pa te configuré, ou andikape.",
    saveRestFail: "Te tonbe pou sove {{failed}} block(s) contenu.",
    saveRestPartial: "Te sove {{saved}} nan blòk contenu {{failed}}.",
    saveRestSaved: "Anpil siksè te sove block(s) contenu {{saved}}.",
    saveTitle: "Mete sou kote contenu",
    snippetMenuTitle: "Extraits",
    specialCharactersArrows: "Flèch",
    specialCharactersDialogOKButton: "Oke",
    specialCharactersDialogTitle: "Mete Caractères espesyal",
    specialCharactersGreekAlphabet: "Alfabèt grèk",
    specialCharactersHelp: "Sur yon karaktè espesyal pou ajoute sa. Sur \"Bon\" lè fè pou fèmen dialog sa a",
    specialCharactersMathematics: "Matematik",
    specialCharactersSymbols: "Senbòl",
    specialCharactersTitle: "Mete yon karaktè espesyal",
    statisticsButtonCharacterOverLimit: "caractères {{charactersRemaining}} sou fwontyè",
    statisticsButtonCharacterRemaining: "caractères {{charactersRemaining}}, ki te rete",
    statisticsButtonCharacters: "caractères {{characters}}",
    statisticsDialogCharactersOverLimit: "{{characters}} caractères, {{charactersRemaining}} sou fwontyè recommandé",
    statisticsDialogCharactersRemaining: "{{characters}} caractères, {{charactersRemaining}} ki te rete",
    statisticsDialogNotTruncated: "Contenu a pa être tronqué",
    statisticsDialogOKButton: "Oke",
    statisticsDialogSentence: "fraz matematik {{sentences}}",
    statisticsDialogSentences: "{{sentences}} peines",
    statisticsDialogTitle: "Contenu Statistiques",
    statisticsDialogTruncated: "Contenu contient plis pase caractères {{limit}} Et ka tronqué",
    statisticsDialogWord: "di {{words}}",
    statisticsDialogWords: "mots {{words}}",
    statisticsTitle: "Sur pou wè statistiques",
    tableCreateTitle: "Kreye tab la",
    tableDeleteColumnTitle: "Retire kolòn tab la",
    tableDeleteRowTitle: "Retire tab la ligne",
    tableInsertColumnTitle: "Mete tab la rèl do",
    tableInsertRowTitle: "Mete tab la ligne",
    tableMergeCellsTitle: "Èstriti cellules tab la",
    tableSplitCellsTitle: "Ranp tab cellules",
    tagMenuTagAddress: "Adrès",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Rubrique 1",
    tagMenuTagH2: "Rubrique 2",
    tagMenuTagH3: "Rubrique, 3",
    tagMenuTagH4: "Rubrique, 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Paragraph",
    tagMenuTagPre: "Fòmate ki te fèt avan",
    tagMenuTitle: "Chanje fason eleman",
    tagTreeElementLink: "Fè chwa eleman {{element}}",
    tagTreeElementTitle: "Sur pou yo chwazi a eleman \"{{element}}\" sa ki nan liv",
    tagTreeRoot: "rasin",
    tagTreeRootLink: "Fè chwa tout contenu modifiable",
    tagTreeRootTitle: "Sur pou yo chwazi tout contenu modifiable",
    textBlockQuoteTitle: "Site blòk",
    textBoldTitle: "Gras",
    textItalicTitle: "En",
    textSizeDecreaseTitle: "Vini pi piti tèks taille",
    textSizeIncreaseTitle: "Fè vini pi gran tèks taille",
    textStrikeTitle: "Leve men sou à",
    textSubTitle: "Script de baz",
    textSuperTitle: "Super-script",
    textUnderlineTitle: "Soulinye",
    unsavedEditWarningText: "Gen sont enregistrées chanjman nan paj sa a",
    viewSourceDialogCancelButton: "Fèmen",
    viewSourceDialogOKButton: "Aplike sous kòd",
    viewSourceDialogTitle: "Contenu sous kòd",
    viewSourceTitle: "Wè\/edisyon sous kòd"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ht.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/hu.js
/**
 * @fileOverview Hungarian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('hu', 'magyar', {
    alignCenterTitle: "Felsorakoztat szöveg központ",
    alignJustifyTitle: "A szöveg igazítása indokolja",
    alignLeftTitle: "Szöveg balra igazítása",
    alignRightTitle: "Szöveg jobbra igazítása",
    cancelDialogCancelButton: "Tovább a Szerkesztés",
    cancelDialogContent: "Biztosan megszakítja a szerkesztő? Minden módosítás elvész!",
    cancelDialogOKButton: "Módosítás törlése",
    cancelDialogTitle: "Módosítás törlése",
    cancelTitle: "Módosítás törlése",
    classMenuTitle: "Stílus Pipetta",
    clearFormattingTitle: "Formázás törlése",
    clickButtonToEditText: "Szerkesztése",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatikus",
    colorMenuBasicBlack: "Fekete",
    colorMenuBasicBlue: "Kék",
    colorMenuBasicGreen: "Zöld",
    colorMenuBasicGrey: "Szürke",
    colorMenuBasicOrange: "Narancs",
    colorMenuBasicPurple: "Lila",
    colorMenuBasicRed: "Piros",
    colorMenuBasicTitle: "Szöveg színének módosítása",
    colorMenuBasicWhite: "Fehér",
    dockToElementTitle: "Dokk\/dokkolásának megszüntetése elem-szerkesztő",
    dockToScreenTitle: "Szerkesztő-hoz képernyő dokk\/dokkolásának megszüntetése",
    embedDialogCancelButton: "Mégse",
    embedDialogOKButton: "Beágyazott objektum",
    embedDialogTabCode: "Beágyaz kód",
    embedDialogTabCodeContent: "Illessze be az embed kódot a szöveg terület az alábbi:",
    embedDialogTabPreview: "Előnézet",
    embedDialogTabPreviewContent: "A beágyazott objektumot egy képe alatt jelenik meg:",
    embedDialogTitle: "Beágyazott objektum",
    embedTitle: "Beágyazott objektum",
    errorUINoName: "UI: \"{{ui}}\" érvénytelen (kell rendelkeznie a name tulajdonság)",
    errorUINotObject: "UI: \"{{ui}}\" érvénytelen (kell egy objektum)",
    errorUIOverride: "UI: \"{{name}}\" már regisztrált, és felül lesz írva",
    fileManagerDialogTitle: "Fájlkezelő",
    fileManagerTitle: "Fájlkezelő",
    floatLeftTitle: "Kép balra igazítás",
    floatNoneTitle: "Távolítsa el a kép igazítása",
    floatRightTitle: "Jobb kép igazítása",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Képregény, anélkül",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Alapértelmezett betűtípus",
    fontFamilyMenuFontGeorgia: "Grúzia",
    fontFamilyMenuFontImpact: "Hatása",
    fontFamilyMenuFontPalatino: "Nádor",
    fontFamilyMenuFontTimes: "Idő új római",
    fontFamilyMenuTitle: "Válassza a betűtípus",
    guidesTitle: "Elem Vezetővonalak megjelenítése",
    historyRedoTitle: "Ismét:",
    historyUndoTitle: "Visszavonás",
    hrCreateTitle: "Helyezze be a vízszintes díszítővonal",
    imageResizeButtonDialogCancelButton: "Mégse",
    imageResizeButtonDialogHeight: "Kép magassága",
    imageResizeButtonDialogHeightPlaceHolder: "Magasság",
    imageResizeButtonDialogOKButton: "Átméretezése",
    imageResizeButtonDialogTitle: "Kép átméretezése",
    imageResizeButtonDialogWidth: "Image szélességű",
    imageResizeButtonDialogWidthPlaceHolder: "Szélessége",
    imageResizeButtonText: "Kép átméretezése",
    insertFileDialogCancelButton: "Mégse",
    insertFileDialogOKButton: "Fájl beszúrása",
    insertFileNameLabel: "Fájlnév",
    insertFileNamePlaceHolder: "Fájl név...",
    insertFileTitle: "Fájl beszúrása",
    insertFileURLLabel: "Fájl URL-címe",
    insertFileURLPlaceHolder: "Fájl URL...",
    languageMenuTitle: "Nyelv módosítása",
    linkCreateDialogCancelButton: "Mégse",
    linkCreateDialogMenuHeader: "Válassza ki a hivatkozás típusa",
    linkCreateDialogOKButton: "Hivatkozás beszúrása",
    linkCreateDialogTitle: "Hivatkozás beszúrása",
    linkCreateTitle: "Hivatkozás beszúrása",
    linkRemoveTitle: "Hivatkozás eltávolítása",
    linkTypeDocumentHeader: "A dokumentum vagy egyéb fájl csatolása",
    linkTypeDocumentInfo: "<h2>Nem persze mit tenni betesz a doboz fenti?<\/h2><ol>    <li>Győződjön meg arról, a reszelő van feltöltött-hoz-a website.<\/li>    <li>Nyissa meg a feltöltött fájl a böngészőben.<\/li>    <li>Másolja a fájl URL-címet a böngésző címsorába, és illessze be a fenti mezőbe.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokumentum vagy egyéb fájl",
    linkTypeDocumentLocationLabel: "Helyszín:",
    linkTypeDocumentLocationPlaceHolder: "Adjon meg egy URL-t",
    linkTypeDocumentNewWindowHeader: "Új ablak",
    linkTypeDocumentNewWindowLabel: "A négyzet bejelölésével a fájlt egy új böngésző ablakban\/lapon nyissa meg.",
    linkTypeEmailHeader: "Láncszem-hoz egy elektronikus levél cím",
    linkTypeEmailLabel: "Elektronikus levél cím",
    linkTypeEmailSubjectLabel: "Tárgy (nem kötelező):",
    linkTypeEmailSubjectPlaceHolder: "Írja be a tárgy",
    linkTypeEmailToLabel: "E-mail:",
    linkTypeEmailToPlaceHolder: "Adja meg e-mail címét",
    linkTypeExternalHeader: "Láncszem-hoz egy oldal egy másik weboldalon",
    linkTypeExternalInfo: "<h2>Nem persze mit tenni betesz a doboz fenti?<\/h2><ol>    <li>Talál a oldal az interneten, ön akar-hoz láncszem-hoz.<\/li>    <li>Másolja a webcímet a böngésző címsorába, és illessze be a fenti mezőbe.<\/li><\/ol>",
    linkTypeExternalLabel: "Egy másik weboldalon oldal",
    linkTypeExternalLocationLabel: "Helyszín:",
    linkTypeExternalLocationPlaceHolder: "Adjon meg egy URL-t",
    linkTypeExternalNewWindowHeader: "Új ablak",
    linkTypeExternalNewWindowLabel: "A négyzet bejelölésével a linket egy új böngésző ablakban\/lapon nyissa meg.",
    linkTypeInternalHeader: "Láncszem-hoz egy oldalt ezen a honlapon",
    linkTypeInternalInfo: "<h2>Nem persze mit tenni betesz a doboz fenti?<\/h2><ol>    <li>Az erre a helyhivatkozásra, hogy az oldalon talál.<\/li>    <li>Másolja a webcímet a böngésző cím büfé, kivéve a \"{{domain}}\", és illessze be a fenti mezőbe.<\/li><\/ol>",
    linkTypeInternalLabel: "Ezen a honlapon oldalt",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Adjon meg egy URI",
    linkTypeInternalNewWindowHeader: "Új ablak",
    linkTypeInternalNewWindowLabel: "A négyzet bejelölésével a linket egy új böngésző ablakban\/lapon nyissa meg.",
    listOrderedTitle: "Rendezett lista",
    listUnorderedTitle: "Rendezetlen lista",
    logoTitle: "Tudjon meg többet a Raptor WYSIWYG szerkesztő",
    loremIpsumTitle: "Helyezze be a dummy text vizsgálatra",
    navigateAway: "\nMentetlen módosítások ezen az oldalon. \nHa ezen az oldalon a nem mentett változtatások elvesznek",
    pasteDialogCancelButton: "Mégse",
    pasteDialogFormattedCleaned: "Formázott &amp; tisztítani",
    pasteDialogFormattedUnclean: "Formázott tisztátalan",
    pasteDialogOKButton: "Beszúrása",
    pasteDialogPlain: "Egyszerű szöveg",
    pasteDialogSource: "Forráskód",
    pasteDialogTitle: "Paszta",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Nem sikerült beolvasni a felülvizsgálatok",
    revisionsApplyButtonDialogCancelButton: "Mégse",
    revisionsApplyButtonDialogOKButton: "Visszaállítás",
    revisionsApplyButtonDialogText: "Visszaigazolást visszaállítást",
    revisionsApplyButtonDialogTitle: "Visszaigazolást visszaállítást",
    revisionsApplyButtonText: "Visszaállítás",
    revisionsApplyButtonTitle: "Visszaállítás",
    revisionsApplyDialogContent: "Ez felváltja a jelenlegi tartalom kijelölt felülvizsgálata.<br>A jelenlegi tartalom lesz hozzáadott mint egy felülvizsgálat, és ennek a blokknak a felülvizsgálatok listában látható lesz.",
    revisionsButtonCurrent: "Aktuális",
    revisionsButtonViewDiffText: "Különbségek",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Készítette:",
    revisionsDialogCancelButton: "Mégse",
    revisionsDialogTitle: "Nézd tartalmi felülvizsgálata",
    revisionsDiffButtonDialogCancelButton: "Zár",
    revisionsDiffButtonDialogTitle: "Nézet különbségek",
    revisionsDiffButtonText: "Nézet különbségek",
    revisionsDiffButtonTitle: "Nézet különbségek",
    revisionsLoading: "Átvilágítások betöltése...",
    revisionsNone: "Ehhez az elemhez nem felülvizsgálatok",
    revisionsPreviewButtonText: "Előnézet",
    revisionsPreviewButtonTitle: "Előnézet",
    revisionsText: "Felülvizsgálatok",
    revisionsTextEmpty: "Nincs felülvizsgálatok",
    revisionsTitle: "",
    rfmClose: "Zár",
    rfmContinue: "Továbbra is",
    rfmDelete: "Törlése",
    rfmDownload: "Letöltés",
    rfmFileActions: "Műveletek",
    rfmFileModificationTime: "Módosított",
    rfmFileName: "név",
    rfmFileSize: "Méret",
    rfmFileType: "Típus",
    rfmFilteredTotal: "A {{start}} fájlok befejezéséhez {{end}} {{filteredTotal}} találat",
    rfmFirst: "Első",
    rfmHeadingDirectories: "Könyvtárak",
    rfmHeadingSearch: "Szálláshelyek keresése",
    rfmHeadingTags: "Címkék",
    rfmHeadingUpload: "Feltöltés",
    rfmInsert: "Beszúrása",
    rfmLast: "Utolsó",
    rfmSearch: "Megy",
    rfmTagDocument: "Dokumentum",
    rfmTagImage: "Kép",
    rfmTotal: ", szűrt {{total}}",
    rfmUpload: "Feltöltés",
    rfmUploadBrowse: "Tallózás",
    rfmUploadDrop: "Húzza ide a fájlok",
    rfmUploadFileRemove: "Eltávolítása",
    rfmUploadOr: "vagy",
    rfmView: "Nézet",
    saveJsonFail: "Nem sikerült menteni a {{failed}} tartalom blokk (ok)",
    saveJsonSaved: "Sikeresen mentette a {{saved}} tartalom blokk (ok).",
    saveNotConfigured: "Mentés nincs beállítva vagy le van tiltva.",
    saveRestFail: "Nem sikerült menteni a {{failed}} tartalom blokk (ok).",
    saveRestPartial: "Mentett {{saved}} {{failed}} tartalom építõelemei ki.",
    saveRestSaved: "Sikeresen mentette a {{saved}} tartalom blokk (ok).",
    saveTitle: "Tartalom mentése",
    snippetMenuTitle: "Mozaik",
    specialCharactersArrows: "Nyilak",
    specialCharactersDialogOKButton: "oké",
    specialCharactersDialogTitle: "Különleges karakterek beszúrásához",
    specialCharactersGreekAlphabet: "Görög ábécé",
    specialCharactersHelp: "Kattintson a speciális karaktert adja hozzá. Kattintson az \"OK\" Ha végzett, zárja be a párbeszédpanelt",
    specialCharactersMathematics: "Matematika",
    specialCharactersSymbols: "Szimbólumok",
    specialCharactersTitle: "A különleges karakter beszúrása",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} karakter felső határ",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} beírható karakterek száma még",
    statisticsButtonCharacters: "{{characters}} karakterek",
    statisticsDialogCharactersOverLimit: "{{characters}} karakter, {{charactersRemaining}} a javasolt korlátnál több mint",
    statisticsDialogCharactersRemaining: "{{characters}} karakter, a {{charactersRemaining}} a fennmaradó",
    statisticsDialogNotTruncated: "Tartalom nem lesz megcsonkított",
    statisticsDialogOKButton: "oké",
    statisticsDialogSentence: "{{sentences}} mondat",
    statisticsDialogSentences: "{{sentences}} mondatok",
    statisticsDialogTitle: "Tartalom statisztika",
    statisticsDialogTruncated: "Tartalom több, mint {{limit}} karakterek és csonkított",
    statisticsDialogWord: "{{words}} szó",
    statisticsDialogWords: "{{words}} szavak",
    statisticsTitle: "Kattintson a statisztika megtekintése",
    tableCreateTitle: "Táblázat létrehozása",
    tableDeleteColumnTitle: "Táblázat oszlop törlése",
    tableDeleteRowTitle: "Táblázat sorának törlése",
    tableInsertColumnTitle: "Táblázat oszlop beszúrása",
    tableInsertRowTitle: "Táblázatsor beszúrása",
    tableMergeCellsTitle: "Táblázatcellák egyesítése",
    tableSplitCellsTitle: "Táblázatcellák felosztása",
    tagMenuTagAddress: "Cím",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Címsor 1",
    tagMenuTagH2: "Címsor 2",
    tagMenuTagH3: "Címsor 3",
    tagMenuTagH4: "Fejezet 4",
    tagMenuTagNA: "NINCS ADAT",
    tagMenuTagP: "Bekezdés",
    tagMenuTagPre: "Előre formázott",
    tagMenuTitle: "Elem stílusának módosítása",
    tagTreeElementLink: "Válasszon elemet a(z) {{element}} elem",
    tagTreeElementTitle: "Jelölje be a \"{{element}}\" elem tartalmának",
    tagTreeRoot: "gyökér",
    tagTreeRootLink: "Minden szerkeszthető tartalom kijelölése",
    tagTreeRootTitle: "Jelölje be a minden szerkeszthető tartalom",
    textBlockQuoteTitle: "Idézetblokk",
    textBoldTitle: "Merész",
    textItalicTitle: "Dőlt",
    textSizeDecreaseTitle: "Szövegméret csökkentése",
    textSizeIncreaseTitle: "Szövegméret növelése",
    textStrikeTitle: "Áthúzott",
    textSubTitle: "Al script",
    textSuperTitle: "Szuper-script",
    textUnderlineTitle: "Aláhúzás",
    unsavedEditWarningText: "Mentetlen módosítások ezen az oldalon",
    viewSourceDialogCancelButton: "Zár",
    viewSourceDialogOKButton: "Alkalmazni a forrás kód",
    viewSourceDialogTitle: "Tartalomforrás-kód",
    viewSourceTitle: "Megtekintése\/szerkesztése forrás kód"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/hu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/id.js
/**
 * @fileOverview Indonesian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('id', 'Indonesia', {
    alignCenterTitle: "Align pusat teks",
    alignJustifyTitle: "Sejajarkan teks membenarkan",
    alignLeftTitle: "Sejajarkan teks kiri",
    alignRightTitle: "Sejajarkan teks kanan",
    cancelDialogCancelButton: "Lanjutkan mengedit",
    cancelDialogContent: "Apakah Anda yakin mau membatalkan mengedit? Semua perubahan akan hilang!",
    cancelDialogOKButton: "Membatalkan mengedit",
    cancelDialogTitle: "Membatalkan mengedit",
    cancelTitle: "Membatalkan mengedit",
    classMenuTitle: "Gaya picker",
    clearFormattingTitle: "Menghapus pemformatan",
    clickButtonToEditText: "Mengedit",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Otomatis",
    colorMenuBasicBlack: "Hitam",
    colorMenuBasicBlue: "Biru",
    colorMenuBasicGreen: "Hijau",
    colorMenuBasicGrey: "Abu-abu",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Ungu",
    colorMenuBasicRed: "Merah",
    colorMenuBasicTitle: "Mengubah warna teks",
    colorMenuBasicWhite: "Putih",
    dockToElementTitle: "Dermaga\/undock editor untuk elemen",
    dockToScreenTitle: "Dermaga\/undock editor untuk layar",
    embedDialogCancelButton: "Batal",
    embedDialogOKButton: "Menanamkan objek",
    embedDialogTabCode: "Menempelkan kode",
    embedDialogTabCodeContent: "Paste kode embed ke dalam area teks di bawah ini:",
    embedDialogTabPreview: "Tinjauan",
    embedDialogTabPreviewContent: "Preview tertanam objek ditampilkan di bawah ini:",
    embedDialogTitle: "Menanamkan objek",
    embedTitle: "Menanamkan objek",
    errorUINoName: "UI \"{{ui}}\" tidak valid (harus memiliki name properti)",
    errorUINotObject: "UI \"{{ui}}\" tidak valid (harus objek)",
    errorUIOverride: "UI \"{{name}}\" telah terdaftar, dan akan ditimpa",
    fileManagerDialogTitle: "Manajer file",
    fileManagerTitle: "Manajer file",
    floatLeftTitle: "Menyelaraskan gambar ke kiri",
    floatNoneTitle: "Menghapus gambar sejajar",
    floatRightTitle: "Menyelaraskan gambar di sebelah kanan",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Komik tanpa",
    fontFamilyMenuFontCourier: "Kurir baru",
    fontFamilyMenuFontDefault: "Default Font",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Dampak",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Memilih huruf",
    guidesTitle: "Tampilkan elemen panduan",
    historyRedoTitle: "Mengulang",
    historyUndoTitle: "Membatalkan",
    hrCreateTitle: "Menyisipkan garis horizontal",
    imageResizeButtonDialogCancelButton: "Batal",
    imageResizeButtonDialogHeight: "Tinggi gambar",
    imageResizeButtonDialogHeightPlaceHolder: "Tinggi",
    imageResizeButtonDialogOKButton: "Mengubah ukuran",
    imageResizeButtonDialogTitle: "Resize gambar",
    imageResizeButtonDialogWidth: "Lebar gambar",
    imageResizeButtonDialogWidthPlaceHolder: "Lebar",
    imageResizeButtonText: "Resize gambar",
    insertFileDialogCancelButton: "Batal",
    insertFileDialogOKButton: "Menyisipkan file",
    insertFileNameLabel: "Nama file",
    insertFileNamePlaceHolder: "Nama file...",
    insertFileTitle: "Menyisipkan file",
    insertFileURLLabel: "File URL",
    insertFileURLPlaceHolder: "File URL...",
    languageMenuTitle: "Mengubah bahasa",
    linkCreateDialogCancelButton: "Batal",
    linkCreateDialogMenuHeader: "Pilih jenis link",
    linkCreateDialogOKButton: "Masukkan Link",
    linkCreateDialogTitle: "Masukkan Link",
    linkCreateTitle: "Masukkan Link",
    linkRemoveTitle: "Menghapus Link",
    linkTypeDocumentHeader: "Link ke dokumen atau file lain",
    linkTypeDocumentInfo: "<h2>Tidak yakin apa yang harus dimasukkan ke dalam kotak di atas?<\/h2><ol>    <li>Pastikan file yang telah di-upload ke situs web Anda.<\/li>    <li>Buka file upload di browser Anda.<\/li>    <li>Salin file URL dari browser Anda address bar dan paste ke dalam kotak di atas.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokumen atau file lain",
    linkTypeDocumentLocationLabel: "Lokasi:",
    linkTypeDocumentLocationPlaceHolder: "Masukkan URL",
    linkTypeDocumentNewWindowHeader: "Jendela baru",
    linkTypeDocumentNewWindowLabel: "Centang kotak ini untuk memiliki file terbuka di browser window baru\/tab.",
    linkTypeEmailHeader: "Link ke alamat email",
    linkTypeEmailLabel: "Alamat email",
    linkTypeEmailSubjectLabel: "Subjek (opsional):",
    linkTypeEmailSubjectPlaceHolder: "Masukkan subjek",
    linkTypeEmailToLabel: "Email:",
    linkTypeEmailToPlaceHolder: "Masukkan alamat email",
    linkTypeExternalHeader: "Link ke halaman di situs lain",
    linkTypeExternalInfo: "<h2>Tidak yakin apa yang harus dimasukkan ke dalam kotak di atas?<\/h2><ol>    <li>Menemukan halaman web yang Anda ingin link ke.<\/li>    <li>Salin alamat web dari address bar browser Anda dan paste ke dalam kotak di atas.<\/li><\/ol>",
    linkTypeExternalLabel: "Halaman pada situs web lain",
    linkTypeExternalLocationLabel: "Lokasi:",
    linkTypeExternalLocationPlaceHolder: "Masukkan URL",
    linkTypeExternalNewWindowHeader: "Jendela baru",
    linkTypeExternalNewWindowLabel: "Centang kotak ini untuk memiliki link terbuka di browser window baru\/tab.",
    linkTypeInternalHeader: "Link ke halaman di situs ini",
    linkTypeInternalInfo: "<h2>Tidak yakin apa yang harus dimasukkan ke dalam kotak di atas?<\/h2><ol>    <li>Menemukan halaman link situs ini untuk.<\/li>    <li>Salin alamat web dari browser Anda Alamat bar, termasuk \"{{domain}}\" dan sisipkan ke dalam kotak di atas.<\/li><\/ol>",
    linkTypeInternalLabel: "Halaman di situs ini",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Masukkan URI",
    linkTypeInternalNewWindowHeader: "Jendela baru",
    linkTypeInternalNewWindowLabel: "Centang kotak ini untuk memiliki link terbuka di browser window baru\/tab.",
    listOrderedTitle: "Daftar",
    listUnorderedTitle: "Daftar unordered",
    logoTitle: "Pelajari lebih lanjut tentang Raptor WYSIWYG Editor",
    loremIpsumTitle: "Memasukkan teks atau dummy untuk menguji",
    navigateAway: "\nSana adalah perubahan yang belum disimpan pada Halaman ini. \nJika Anda keluar dari Halaman ini Anda akan kehilangan perubahan Anda belum disimpan",
    pasteDialogCancelButton: "Batal",
    pasteDialogFormattedCleaned: "Diformat &amp; dibersihkan",
    pasteDialogFormattedUnclean: "Diformat najis",
    pasteDialogOKButton: "Masukkan",
    pasteDialogPlain: "Teks biasa",
    pasteDialogSource: "Kode sumber",
    pasteDialogTitle: "Pasta",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Gagal untuk mengambil revisi",
    revisionsApplyButtonDialogCancelButton: "Batal",
    revisionsApplyButtonDialogOKButton: "Rollback",
    revisionsApplyButtonDialogText: "Konfirmasi rollback",
    revisionsApplyButtonDialogTitle: "Konfirmasi rollback",
    revisionsApplyButtonText: "Rollback",
    revisionsApplyButtonTitle: "Rollback",
    revisionsApplyDialogContent: "Ini akan mengganti konten saat ini dengan revisi yang dipilih.<br>Konten saat ini akan ditambahkan sebagai revisi, dan akan terlihat dalam daftar revisi untuk blok ini.",
    revisionsButtonCurrent: "Saat ini",
    revisionsButtonViewDiffText: "Perbedaan",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Dibuat",
    revisionsDialogCancelButton: "Batal",
    revisionsDialogTitle: "Lihat konten revisi",
    revisionsDiffButtonDialogCancelButton: "Tutup",
    revisionsDiffButtonDialogTitle: "Lihat perbedaan",
    revisionsDiffButtonText: "Lihat perbedaan",
    revisionsDiffButtonTitle: "Lihat perbedaan",
    revisionsLoading: "Memuat revisi...",
    revisionsNone: "Tidak ada revisi untuk elemen ini",
    revisionsPreviewButtonText: "Tinjauan",
    revisionsPreviewButtonTitle: "Tinjauan",
    revisionsText: "Revisi",
    revisionsTextEmpty: "Revisi tidak",
    revisionsTitle: "",
    rfmClose: "Tutup",
    rfmContinue: "Lanjutkan",
    rfmDelete: "Hapus",
    rfmDownload: "Men-download",
    rfmFileActions: "Tindakan",
    rfmFileModificationTime: "Dimodifikasi",
    rfmFileName: "Nama",
    rfmFileSize: "Ukuran",
    rfmFileType: "Jenis",
    rfmFilteredTotal: "Menampilkan {{start}} sampai {{end}} {{filteredTotal}} file",
    rfmFirst: "Pertama",
    rfmHeadingDirectories: "Direktori",
    rfmHeadingSearch: "Cari",
    rfmHeadingTags: "Tag",
    rfmHeadingUpload: "Meng-upload",
    rfmInsert: "Masukkan",
    rfmLast: "Terakhir",
    rfmSearch: "Pergi",
    rfmTagDocument: "Dokumen",
    rfmTagImage: "Gambar",
    rfmTotal: ", disaring dari {{total}}",
    rfmUpload: "Meng-upload",
    rfmUploadBrowse: "Jelajahi",
    rfmUploadDrop: "Drop file di sini",
    rfmUploadFileRemove: "Hapus",
    rfmUploadOr: "atau",
    rfmView: "Pemandangan",
    saveJsonFail: "Gagal untuk menyimpan block(s) konten {{failed}}",
    saveJsonSaved: "Berhasil disimpan {{saved}} block(s) konten.",
    saveNotConfigured: "Simpan belum dikonfigurasi, atau dinonaktifkan.",
    saveRestFail: "Gagal untuk menyimpan {{failed}} block(s) konten.",
    saveRestPartial: "Menyelamatkan {{saved}} dari blok-blok konten {{failed}}.",
    saveRestSaved: "Berhasil disimpan {{saved}} block(s) konten.",
    saveTitle: "Menyimpan konten",
    snippetMenuTitle: "Potongan",
    specialCharactersArrows: "Panah",
    specialCharactersDialogOKButton: "Oke",
    specialCharactersDialogTitle: "Menyisipkan karakter khusus",
    specialCharactersGreekAlphabet: "Alfabet Yunani",
    specialCharactersHelp: "Klik karakter khusus untuk menambahkannya. Klik \"OK\" ketika dilakukan untuk menutup dialog ini",
    specialCharactersMathematics: "Matematika",
    specialCharactersSymbols: "Simbol",
    specialCharactersTitle: "Menyisipkan karakter khusus",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} karakter atas batas",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} karakter tersisa",
    statisticsButtonCharacters: "{{characters}} karakter",
    statisticsDialogCharactersOverLimit: "{{characters}} karakter, {{charactersRemaining}} atas batas direkomendasikan",
    statisticsDialogCharactersRemaining: "karakter {{characters}}, {{charactersRemaining}} tersisa",
    statisticsDialogNotTruncated: "Konten tidak akan terpotong",
    statisticsDialogOKButton: "Oke",
    statisticsDialogSentence: "kalimat {{sentences}}",
    statisticsDialogSentences: "kalimat {{sentences}}",
    statisticsDialogTitle: "Statistik isi",
    statisticsDialogTruncated: "Konten yang berisi lebih dari {{limit}} karakter dan mungkin terpotong",
    statisticsDialogWord: "kata {{words}}",
    statisticsDialogWords: "kata-kata {{words}}",
    statisticsTitle: "Klik untuk melihat statistik",
    tableCreateTitle: "Membuat tabel",
    tableDeleteColumnTitle: "Menghapus kolom table",
    tableDeleteRowTitle: "Menghapus baris tabel",
    tableInsertColumnTitle: "Masukkan kolom table",
    tableInsertRowTitle: "Menyisipkan baris tabel",
    tableMergeCellsTitle: "Menggabungkan sel-sel tabel",
    tableSplitCellsTitle: "Sel-sel tabel Split",
    tagMenuTagAddress: "Alamat",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Pos 1",
    tagMenuTagH2: "Pos 2",
    tagMenuTagH3: "Judul 3",
    tagMenuTagH4: "Pos 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Ayat",
    tagMenuTagPre: "Pra-diformat",
    tagMenuTitle: "Mengubah elemen gaya",
    tagTreeElementLink: "Memilih elemen {{element}}",
    tagTreeElementTitle: "Klik untuk memilih isi dari elemen \"{{element}}\"",
    tagTreeRoot: "akar",
    tagTreeRootLink: "Pilih Semua konten dapat diedit",
    tagTreeRootTitle: "Klik untuk memilih semua konten dapat diedit",
    textBlockQuoteTitle: "Blok kutipan",
    textBoldTitle: "Bold",
    textItalicTitle: "Miring",
    textSizeDecreaseTitle: "Pengurangan ukuran teks",
    textSizeIncreaseTitle: "Meningkatkan ukuran teks",
    textStrikeTitle: "Menyerang melalui",
    textSubTitle: "Sub script",
    textSuperTitle: "Super script",
    textUnderlineTitle: "Menggarisbawahi",
    unsavedEditWarningText: "Sana adalah perubahan yang belum disimpan pada Halaman ini",
    viewSourceDialogCancelButton: "Tutup",
    viewSourceDialogOKButton: "Menerapkan kode sumber",
    viewSourceDialogTitle: "Kode sumber konten",
    viewSourceTitle: "Lihat\/edit kode sumber"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/id.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/it.js
/**
 * @fileOverview Italian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('it', 'Italiano', {
    alignCenterTitle: "Allineare testo centro",
    alignJustifyTitle: "Allineare il testo giustificare",
    alignLeftTitle: "Allineare testo sinistra",
    alignRightTitle: "Allineare a destra il testo",
    cancelDialogCancelButton: "Continuare la modifica",
    cancelDialogContent: "Sei sicuro di che voler annullare la modifica? Tutte le modifiche andranno perse!",
    cancelDialogOKButton: "Annullare la modifica",
    cancelDialogTitle: "Annullare la modifica",
    cancelTitle: "Annullare la modifica",
    classMenuTitle: "Selettore di stile",
    clearFormattingTitle: "Annullare la formattazione",
    clickButtonToEditText: "Modifica",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatico",
    colorMenuBasicBlack: "Nero",
    colorMenuBasicBlue: "Blu",
    colorMenuBasicGreen: "Verde",
    colorMenuBasicGrey: "Grigio",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Viola",
    colorMenuBasicRed: "Rosso",
    colorMenuBasicTitle: "Cambiare il colore del testo",
    colorMenuBasicWhite: "Bianco",
    dockToElementTitle: "Dock\/disancorare editor all'elemento",
    dockToScreenTitle: "Dock\/disancorare editor a schermo",
    embedDialogCancelButton: "Annulla",
    embedDialogOKButton: "Incorporare l'oggetto",
    embedDialogTabCode: "Codice embed",
    embedDialogTabCodeContent: "Incollare il codice da incorporare nell'area di testo qui sotto:",
    embedDialogTabPreview: "Anteprima",
    embedDialogTabPreviewContent: "Di seguito viene visualizzata un'anteprima del tuo oggetto incorporato:",
    embedDialogTitle: "Incorporare l'oggetto",
    embedTitle: "Incorporare l'oggetto",
    errorUINoName: "UI interfaccia \"{{ui}}\" non è valido (deve avere una proprietà name)",
    errorUINotObject: "UI interfaccia \"{{ui}}\" non è valido (deve essere un oggetto)",
    errorUIOverride: "Interfaccia utente \"{{name}}\" è già stato registrato e verrà sovrascritto",
    fileManagerDialogTitle: "File Manager",
    fileManagerTitle: "File Manager",
    floatLeftTitle: "Allineare l'immagine a sinistra",
    floatNoneTitle: "Rimuovere l'immagine allineare",
    floatRightTitle: "Allineare l'immagine a destra",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Fumetto senza",
    fontFamilyMenuFontCourier: "Corriere nuovo",
    fontFamilyMenuFontDefault: "Tipo di carattere predefinito",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Impatto",
    fontFamilyMenuFontPalatino: "Palatino",
    fontFamilyMenuFontTimes: "Volte nuovo romano",
    fontFamilyMenuTitle: "Scegli il tuo carattere",
    guidesTitle: "Visualizza elemento guide",
    historyRedoTitle: "Rifare",
    historyUndoTitle: "Annulla",
    hrCreateTitle: "Inserire il righello orizzontale",
    imageResizeButtonDialogCancelButton: "Annulla",
    imageResizeButtonDialogHeight: "Altezza immagine",
    imageResizeButtonDialogHeightPlaceHolder: "Altezza",
    imageResizeButtonDialogOKButton: "Ridimensionare",
    imageResizeButtonDialogTitle: "Ridimensionare immagine",
    imageResizeButtonDialogWidth: "Larghezza immagine",
    imageResizeButtonDialogWidthPlaceHolder: "Larghezza",
    imageResizeButtonText: "Ridimensionare immagine",
    insertFileDialogCancelButton: "Annulla",
    insertFileDialogOKButton: "Inserire il file.",
    insertFileNameLabel: "Nome del file",
    insertFileNamePlaceHolder: "Nome del file...",
    insertFileTitle: "Inserire il file.",
    insertFileURLLabel: "URL del file.",
    insertFileURLPlaceHolder: "File URL...",
    languageMenuTitle: "Cambia lingua",
    linkCreateDialogCancelButton: "Annulla",
    linkCreateDialogMenuHeader: "Scegliere un tipo di collegamento",
    linkCreateDialogOKButton: "Inserire Link",
    linkCreateDialogTitle: "Inserire Link",
    linkCreateTitle: "Inserire Link",
    linkRemoveTitle: "Rimuovere Link",
    linkTypeDocumentHeader: "Link a un documento o un altro file",
    linkTypeDocumentInfo: "<h2>Non so cosa mettere nella casella in alto?<\/h2><ol>    <li>Assicurarsi che il file è stato caricato al tuo sito Web.<\/li>    <li>Aprire il file caricato nel browser.<\/li>    <li>Copia URL del file dalla barra degli indirizzi del browser e incollarlo nella casella in alto.<\/li><\/ol>",
    linkTypeDocumentLabel: "Documenti o altri file",
    linkTypeDocumentLocationLabel: "Ubicazione:",
    linkTypeDocumentLocationPlaceHolder: "Immettere un URL",
    linkTypeDocumentNewWindowHeader: "Nuova finestra",
    linkTypeDocumentNewWindowLabel: "Spuntare questa casella per avere il file aperto in una nuova finestra\/scheda del browser.",
    linkTypeEmailHeader: "Link a un indirizzo email",
    linkTypeEmailLabel: "Indirizzo email",
    linkTypeEmailSubjectLabel: "Oggetto (facoltativo):",
    linkTypeEmailSubjectPlaceHolder: "Inserisci oggetto",
    linkTypeEmailToLabel: "Posta elettronica:",
    linkTypeEmailToPlaceHolder: "Inserisci indirizzo email",
    linkTypeExternalHeader: "Link a una pagina su un altro sito",
    linkTypeExternalInfo: "<h2>Non so cosa mettere nella casella in alto?<\/h2><ol>    <li>Trovare la pagina web che si desidera linkare.<\/li>    <li>Copiare l'indirizzo web dalla barra degli indirizzi del browser e incollarlo nella casella in alto.<\/li><\/ol>",
    linkTypeExternalLabel: "Pagina su un altro sito Web",
    linkTypeExternalLocationLabel: "Ubicazione:",
    linkTypeExternalLocationPlaceHolder: "Immettere un URL",
    linkTypeExternalNewWindowHeader: "Nuova finestra",
    linkTypeExternalNewWindowLabel: "Spuntare questa casella per avere il link aperto in una nuova finestra\/scheda del browser.",
    linkTypeInternalHeader: "Link a una pagina su questo sito",
    linkTypeInternalInfo: "<h2>Non so cosa mettere nella casella in alto?<\/h2><ol>    <li>Trovare la pagina su questo sito link a.<\/li>    <li>Copiare l'indirizzo web dalla barra, escludendo \"{{domain}}\" degli indirizzi del browser e incollarlo nella casella in alto.<\/li><\/ol>",
    linkTypeInternalLabel: "Pagina su questo sito",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Immettere un URI",
    linkTypeInternalNewWindowHeader: "Nuova finestra",
    linkTypeInternalNewWindowLabel: "Spuntare questa casella per avere il link aperto in una nuova finestra\/scheda del browser.",
    listOrderedTitle: "Elenco ordinato",
    listUnorderedTitle: "Elenco non ordinato",
    logoTitle: "Ulteriori informazioni sull'Editor WYSIWYG Raptor",
    loremIpsumTitle: "Inserire un testo fittizio per il test",
    navigateAway: "\nCi sono non salvate le modifiche su questa pagina. \nSe si sposta da questa pagina si perderanno le modifiche non salvate",
    pasteDialogCancelButton: "Annulla",
    pasteDialogFormattedCleaned: "Formattato &amp; pulito",
    pasteDialogFormattedUnclean: "Formattato impuro",
    pasteDialogOKButton: "Inserire",
    pasteDialogPlain: "Testo normale",
    pasteDialogSource: "Codice sorgente",
    pasteDialogTitle: "Incolla",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Impossibile recuperare le revisioni",
    revisionsApplyButtonDialogCancelButton: "Annulla",
    revisionsApplyButtonDialogOKButton: "Rollback",
    revisionsApplyButtonDialogText: "Conferma di rollback",
    revisionsApplyButtonDialogTitle: "Conferma di rollback",
    revisionsApplyButtonText: "Rollback",
    revisionsApplyButtonTitle: "Rollback",
    revisionsApplyDialogContent: "Questo sostituirà l'attuale contenuto della revisione selezionata.<br>Il contenuto corrente verrà aggiunto come una revisione e sarà visibile nell'elenco revisioni per questo blocco.",
    revisionsButtonCurrent: "Corrente",
    revisionsButtonViewDiffText: "Differenze",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Creato",
    revisionsDialogCancelButton: "Annulla",
    revisionsDialogTitle: "Visualizzazione contenuti revisioni",
    revisionsDiffButtonDialogCancelButton: "Chiudere",
    revisionsDiffButtonDialogTitle: "Mostra differenze",
    revisionsDiffButtonText: "Mostra differenze",
    revisionsDiffButtonTitle: "Mostra differenze",
    revisionsLoading: "Caricamento revisioni...",
    revisionsNone: "No revisioni per questo elemento",
    revisionsPreviewButtonText: "Anteprima",
    revisionsPreviewButtonTitle: "Anteprima",
    revisionsText: "Revisioni",
    revisionsTextEmpty: "No revisioni",
    revisionsTitle: "",
    rfmClose: "Chiudere",
    rfmContinue: "Continuare",
    rfmDelete: "Eliminare",
    rfmDownload: "Scarica",
    rfmFileActions: "Azioni",
    rfmFileModificationTime: "Modificato",
    rfmFileName: "Nome",
    rfmFileSize: "Dimensione",
    rfmFileType: "Tipo",
    rfmFilteredTotal: "Visualizzando {{start}} a {{end}} {{filteredTotal}} file",
    rfmFirst: "Primo",
    rfmHeadingDirectories: "Directory",
    rfmHeadingSearch: "Ricerca",
    rfmHeadingTags: "Tag",
    rfmHeadingUpload: "Caricare",
    rfmInsert: "Inserire",
    rfmLast: "Ultima",
    rfmSearch: "Vai",
    rfmTagDocument: "Documento",
    rfmTagImage: "Immagine",
    rfmTotal: ", filtrata da {{total}}",
    rfmUpload: "Caricare",
    rfmUploadBrowse: "Sfoglia",
    rfmUploadDrop: "Rilasciare i file qui",
    rfmUploadFileRemove: "Rimuovere",
    rfmUploadOr: "o",
    rfmView: "Vista",
    saveJsonFail: "Non è riuscito a salvare {{failed}} blocchi (i contenuti)",
    saveJsonSaved: "Salvate correttamente {{saved}} blocchi (i contenuti).",
    saveNotConfigured: "Save non è stato configurato, o è disabilitato.",
    saveRestFail: "Impossibile salvare {{failed}} blocchi (i contenuti).",
    saveRestPartial: "Salvato {{saved}} {{failed}} blocchi di contenuto.",
    saveRestSaved: "Salvate correttamente {{saved}} blocchi (i contenuti).",
    saveTitle: "Salvare il contenuto",
    snippetMenuTitle: "Frammenti",
    specialCharactersArrows: "Frecce",
    specialCharactersDialogOKButton: "Ok",
    specialCharactersDialogTitle: "Inserire caratteri speciali",
    specialCharactersGreekAlphabet: "Alfabeto greco",
    specialCharactersHelp: "Fare clic su un carattere speciale per aggiungerlo. Fare clic su \"OK\" quando fatto per chiudere questa finestra di dialogo",
    specialCharactersMathematics: "Matematica",
    specialCharactersSymbols: "Simboli",
    specialCharactersTitle: "Inserire un carattere speciale",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} caratteri oltre limite",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} caratteri rimanenti",
    statisticsButtonCharacters: "{{characters}} caratteri",
    statisticsDialogCharactersOverLimit: "oltre il limite consigliato caratteri di {{characters}}, {{charactersRemaining}}",
    statisticsDialogCharactersRemaining: "caratteri di {{characters}}, {{charactersRemaining}} rimanenti",
    statisticsDialogNotTruncated: "Contenuto non verrà troncato",
    statisticsDialogOKButton: "Ok",
    statisticsDialogSentence: "frase {{sentences}}",
    statisticsDialogSentences: "frasi di {{sentences}}",
    statisticsDialogTitle: "Statistiche di contenuto",
    statisticsDialogTruncated: "Contenuto contiene più di {{limit}} caratteri e può essere troncato",
    statisticsDialogWord: "parola di {{words}}",
    statisticsDialogWords: "Parole di {{words}}",
    statisticsTitle: "Clicca per visualizzare le statistiche",
    tableCreateTitle: "Creare la tabella",
    tableDeleteColumnTitle: "Eliminare la colonna di tabella",
    tableDeleteRowTitle: "Eliminare la riga della tabella",
    tableInsertColumnTitle: "Inserisci colonna tabella",
    tableInsertRowTitle: "Inserire una riga di tabella",
    tableMergeCellsTitle: "Unire le celle di tabella",
    tableSplitCellsTitle: "Dividere le celle della tabella",
    tagMenuTagAddress: "Indirizzo",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Rubrica 1",
    tagMenuTagH2: "Rubrica 2",
    tagMenuTagH3: "Rubrica 3",
    tagMenuTagH4: "Rubrica 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Paragrafo",
    tagMenuTagPre: "Pre-formattato",
    tagMenuTitle: "Cambia tipo di elemento",
    tagTreeElementLink: "Selezionare {{element}}",
    tagTreeElementTitle: "Fare clic per selezionare il contenuto dell'elemento \"{{element}}\" elemento",
    tagTreeRoot: "radice",
    tagTreeRootLink: "Selezionare tutto il contenuto modificabile",
    tagTreeRootTitle: "Fare clic per selezionare tutto il contenuto modificabile",
    textBlockQuoteTitle: "Citazione",
    textBoldTitle: "Grassetto",
    textItalicTitle: "Corsivo",
    textSizeDecreaseTitle: "Diminuire la dimensione del testo",
    textSizeIncreaseTitle: "Aumentare la dimensione del testo",
    textStrikeTitle: "Barrare",
    textSubTitle: "Subscript",
    textSuperTitle: "Super-script di",
    textUnderlineTitle: "Sottolineatura",
    unsavedEditWarningText: "Ci sono non salvate le modifiche su questa pagina",
    viewSourceDialogCancelButton: "Chiudere",
    viewSourceDialogOKButton: "Applicare il codice sorgente",
    viewSourceDialogTitle: "Codice sorgente contenuto",
    viewSourceTitle: "Visualizza\/modifica del codice sorgente"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/it.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ja.js
/**
 * @fileOverview Japaneese strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ja', '日本語', {
    alignCenterTitle: "テキストを中央に揃える",
    alignJustifyTitle: "テキストを均等に揃える",
    alignLeftTitle: "テキストを左に揃える",
    alignRightTitle: "テキストを右に揃える",
    
    cancelDialogCancelButton: "編集を続行する",
    cancelDialogContent: "編集をキャンセルしてもよろしいですか。すべての変更は失われます。",
    cancelDialogOKButton: "編集をキャンセルする",
    cancelDialogTitle: "編集をキャンセルする",
    cancelTitle: "編集をキャンセルする",
    
    classMenuTitle: "スタイルの選択",
    clearFormattingTitle: "書式をクリアする",
    clickButtonToEditText: "編集",
    clickButtonToEditTitle: null,
    
    colorMenuBasicAutomatic: "自動",
    colorMenuBasicBlack: "黒",
    colorMenuBasicBlue: "青",
    colorMenuBasicGreen: "緑",
    colorMenuBasicGrey: "灰色",
    colorMenuBasicOrange: "オレンジ",
    colorMenuBasicPurple: "紫",
    colorMenuBasicRed: "赤",
    colorMenuBasicTitle: "テキストの色を変更する",
    colorMenuBasicWhite: "白",
    
    dockToElementTitle: "要素にエディターをドック\/アンドックする",
    dockToScreenTitle: "画面にエディターをドック\/アンドックする",
    
    embedTitle: "オブジェクトを埋め込む",
    embedDialogTitle: "オブジェクトを埋め込む",
    embedDialogTabCode: "埋め込みコード",
    embedDialogTabCodeContent: "埋め込みコードを下のテキスト領域に貼り付けてください：",
    embedDialogTabPreview: "プレビュー",
    embedDialogTabPreviewContent: "埋め込みオブジェクトのプレビューが下に表示されます：",
    embedDialogOKButton: "オブジェクトを埋め込む",
    embedDialogCancelButton: "キャンセル",
    
    errorUINoName: "UI\"{{ui}}\"は無効です (name プロパティが必要です）",
    errorUINotObject: "UI\"{{ui}}\"は無効です (オブジェクトである必要があります)",
    errorUIOverride: "UI\"{{name}}\"は既に登録されているため上書きします",
    
    floatLeftTitle: "画像を左側に配置する",
    floatNoneTitle: "画像の配置を削除する",
    floatRightTitle: "画像を右側に配置する",
    
    fontFamilyMenuTitle: "フォントを選択する",
    fontFamilyMenuFontDefault: "既定のフォント",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontPalatino: "Platino",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuFontComicSans: "Comic Sans",
    fontFamilyMenuFontImpact: "Impact",
    fontFamilyMenuFontCourier: "Courier New",
    
    guidesTitle: "要素ガイドを表示する",
    
    historyRedoTitle: "やり直す",
    historyUndoTitle: "元に戻す",
    
    hrCreateTitle: "区切り線を挿入する",
    
    imageResizeButtonText: "画像のサイズを変更する",
    imageResizeButtonDialogWidth: "画像の幅",
    imageResizeButtonDialogHeight: "画像の高さ",
    imageResizeButtonDialogWidthPlaceHolder: "幅",
    imageResizeButtonDialogHeightPlaceHolder: "高さ",
    imageResizeButtonDialogTitle: "画像のサイズを変更する",
    imageResizeButtonDialogOKButton: "サイズを変更します",
    imageResizeButtonDialogCancelButton: "キャンセル",
    
    insertFileTitle: "ファイルを挿入する",
    insertFileDialogOKButton: "ファイルを挿入します",
    insertFileDialogCancelButton: "キャンセル",
    insertFileURLLabel: "ファイルのURL",
    insertFileNameLabel: "ファイル名",
    insertFileURLPlaceHolder: "ファイルのURL...",
    insertFileNamePlaceHolder: "ファイル名...",
    
    languageMenuTitle: "言語の変更",
    languageMenuDE: "ドイツ語",
    languageMenuEN: "英語",
    languageMenuES: "スペイン語",
    languageMenuFR: "フランス語",
    languageMenuNL: "オランダ語",
    languageMenuRU: "ロシア語",
    languageMenuSV: "スウェーデン語",
    languageMenuZHCN: "簡体字中国語",
    
    loremIpsumTitle: "テスト用のダミーテキストを挿入する",
    
    listOrderedTitle: "順序付きリスト",
    listUnorderedTitle: "順不同リスト",
    
    linkCreateTitle: "リンクを挿入する",
    linkRemoveTitle: "リンクを削除する",
    
    linkCreateDialogTitle: "リンクを挿入する",
    linkCreateDialogOKButton: "リンクを挿入します",
    linkCreateDialogCancelButton: "キャンセル",
    linkCreateDialogMenuHeader: "リンクの種類を選択してください",
    
    linkTypeEmailLabel: "メールアドレス",
    linkTypeEmailHeader: "電子メールアドレスにリンクする",
    linkTypeEmailToLabel: "電子メール：",
    linkTypeEmailToPlaceHolder: "メールアドレスを入力してください。",
    linkTypeEmailSubjectLabel: "件名（オプション）：",
    linkTypeEmailSubjectPlaceHolder: "件名を入力してください。",
    
    linkTypeExternalLabel: "外部のウェブサイト上のページ",
    linkTypeExternalHeader: "外部のウェブサイト上のページにリンクする",
    linkTypeExternalLocationLabel: "場所:",
    linkTypeExternalLocationPlaceHolder: "URLを入力してください。",
    linkTypeExternalNewWindowHeader: "新しいウィンドウ",
    linkTypeExternalNewWindowLabel: "リンクをブラウザの新しいウィンドウ\/タブで開くにはこれをチェックしてください。",
    linkTypeExternalInfo: "<h2>何を入力すればよいかわかりませんか？<\/h2><ol><li>リンクしたいウェブページを見つけます。<\/li><li>ブラウザーのアドレスバーからウェブアドレスをコピーして、上記のボックスに貼り付けます。<\/li><\/ol>",
    
    linkTypeDocumentLabel: "ドキュメントまたはその他のファイル",
    linkTypeDocumentHeader: "ドキュメントまたはその他のファイルにリンクする",
    linkTypeDocumentLocationLabel: "場所:",
    linkTypeDocumentLocationPlaceHolder: "URLを入力してください。",
    linkTypeDocumentNewWindowHeader: "新しいウィンドウ",
    linkTypeDocumentNewWindowLabel: "リンクをブラウザの新しいウィンドウ\/タブで開くにはこれをチェックしてください。",
    linkTypeDocumentInfo: "<h2>何を入力すればよいかわかりませんか？<\/h2><ol><li>ファイルがあなたのウェブサイトにアップロードされていることを確認します。<\/li><li>お使いのブラウザーでアップロードされたファイルを開きます。<\/li><li>ファイルのURLをブラウザのアドレスバーからコピーして、上記のボックスに貼り付けます。<\/li><\/ol>",

    linkTypeInternalLabel: "このウェブサイト上のページ",
    linkTypeInternalHeader: "このウェブサイト上のページへリンクする",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "URIを入力してください。",
    linkTypeInternalNewWindowHeader: "新しいウィンドウ",
    linkTypeInternalNewWindowLabel: "リンクをブラウザの新しいウィンドウ\/タブで開くにはこれをチェックしてください。",
    linkTypeInternalInfo: "<h2>何を入力すればよいかわかりませんか？<\/h2><ol><li>リンクしたいウェブページを見つけます。<\/li><li>ブラウザーのアドレスバーからウェブアドレスをコピーして、\"{{domain}}\"を除いた部分を上記のボックスに貼り付けます。<\/li><\/ol>",
    
    logoTitle: "Raptor WYSIWYG Editorの詳細を確認する",
    
    navigateAway: "このページには未保存の変更があります。このページから移動すると未保存の変更が失われます。",
    
    pasteDialogTitle: "ペースト",
    pasteDialogOKButton: "挿入する",
    pasteDialogCancelButton: "キャンセル",
    pasteDialogPlain: "プレインテキスト",
    pasteDialogFormattedCleaned: "フォーマット済み ＆ クリーニング済み",
    pasteDialogFormattedUnclean: "フォーマット済み、未クリーニング",
    pasteDialogSource: "ソースコード",
    
    placeholderPluginDefaultContent: "<br/>",
    
    saveTitle: "コンテンツを保存する",
    saveNotConfigured: "保存が構成されていないか無効化されています。",
    saveJsonFail: "{{failed}}個のコンテンツブロックの保存に失敗しました。",
    saveJsonSaved: "{{saved}}個のコンテンツブロックを正常に保存しました。",
    saveRestFail: "{{failed}}個のコンテンツブロックの保存に失敗しました。",
    saveRestPartial: "{{failed}}個のうち{{saved}}個のコンテンツブロックを保存しました。",
    saveRestSaved: "{{saved}}個のコンテンツブロックを正常に保存しました。",
    
    snippetMenuTitle: "スニペット",
    
    specialCharactersArrows: "矢印",
    specialCharactersDialogOKButton: "OK",
    specialCharactersDialogTitle: "特殊文字を挿入する",
    specialCharactersGreekAlphabet: "ギリシャ語のアルファベット",
    specialCharactersHelp: "特殊文字をクリックして追加します。完了したら\"OK\"をクリックしてこのダイアログを閉じます。",
    specialCharactersMathematics: "数学",
    specialCharactersSymbols: "シンボル",
    specialCharactersTitle: "特殊文字を挿入する",
    
    statisticsButtonCharacterOverLimit: "制限超過 {{charactersRemaining}} 文字",
    statisticsButtonCharacterRemaining: "残り {{charactersRemaining}} 文字",
    statisticsButtonCharacters: "{{characters}} 文字",
    statisticsDialogCharactersOverLimit: "{{characters}} 文字、推奨される制限より {{charactersRemaining}} 文字オーバー",
    statisticsDialogCharactersRemaining: "{{characters}} 文字、残り {{charactersRemaining}} 文字",
    statisticsDialogNotTruncated: "コンテンツは切り詰めされません",
    statisticsDialogOKButton: "OK",
    statisticsDialogSentence: "{{sentences}} 文",
    statisticsDialogSentences: "{{sentences}} 文",
    statisticsDialogTitle: "コンテンツの統計",
    statisticsDialogTruncated: "コンテンツは {{limit}} 文字以上が含まれているため、切り詰めされる可能性があります。",
    statisticsDialogWord: "{{words}} 単語",
    statisticsDialogWords: "{{words}} 単語",
    statisticsTitle: "クリックして統計を表示する",
    
    tableCreateTitle: "テーブルを作成する",
    tableDeleteColumnTitle: "テーブルの列を削除する",
    tableDeleteRowTitle: "テーブルの行を削除する",
    tableInsertColumnTitle: "テーブルに列を挿入する",
    tableInsertRowTitle: "テーブルに行を挿入する",
    tableMergeCellsTitle: "テーブルセルを結合する",
    tableSplitCellsTitle: "テーブルセルを分割する",
    
    tagMenuTagH1: "見出し1",
    tagMenuTagH2: "見出し2",
    tagMenuTagH3: "見出し3",
    tagMenuTagH4: "見出し4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "段落",
    tagMenuTagDiv: "Div",
    tagMenuTagPre: "フォーマット済み",
    tagMenuTagAddress: "アドレス",
    tagMenuTitle: "要素のスタイルを変更する",
    
    tagTreeElementLink: "{{}} 要素を選択します",
    tagTreeElementTitle: "クリックして\"{{element}}\"要素のコンテンツを選択する",
    tagTreeRoot: "ルート",
    tagTreeRootLink: "すべての編集可能なコンテンツを選択する",
    tagTreeRootTitle: "クリックしてすべての編集可能なコンテンツを選択する",
    
    textBlockQuoteTitle: "ブロック引用",
    textBoldTitle: "太字",
    textItalicTitle: "斜体",
    textStrikeTitle: "打ち消し線",
    textSubTitle: "下付",
    textSuperTitle: "上付",
    textUnderlineTitle: "下線",
    textSizeDecreaseTitle: "テキストのサイズを小さく",
    textSizeIncreaseTitle: "テキストのサイズを大きく",
    
    unsavedEditWarningText: "このページには未保存の変更があります",
    
    revisionsText: "リビジョン",
    revisionsTextEmpty: "リビジョンなし",
    revisionsTitle: null,
    revisionsCreated: "作成済",
    revisionsApplyButtonTitle: "ロールバック",
    revisionsApplyButtonText: "ロールバック",
    revisionsAJAXFailed: "リビジョンの取得が失敗しました",
    revisionsApplyButtonDialogCancelButton: "キャンセル",
    revisionsApplyButtonDialogOKButton: "ロールバック",
    revisionsApplyButtonDialogTitle: "ロールバックの確認",
    revisionsApplyDialogContent: "選択したリビジョンで現在のコンテンツが上書きされます。<br>現在のコンテンツはリビジョンとして追加され、このブロックのリビジョン一覧に表示されます。",
    revisionsDialogCancelButton: "キャンセル",
    revisionsDialogTitle: "コンテンツのリビジョンを見る",
    revisionsButtonCurrent: "現在",
    revisionsButtonViewDiffText: "差異",
    revisionsButtonViewDiffTitle: null,
    revisionsDiffButtonDialogCancelButton: "閉じる",
    revisionsDiffButtonDialogTitle: "差異の表示",
    revisionsDiffButtonTitle: "差異の表示",
    revisionsDiffButtonText: "差異の表示",
    revisionsLoading: "リビジョンを読み込んでいます...",
    revisionsNone: "この要素にはリビジョンがありません",
    revisionsPreviewButtonTitle: "プレビュー",
    revisionsPreviewButtonText: "プレビュー",

    fileManagerDialogTitle: "ファイルマネージャー",
    fileManagerTitle: "ファイルマネージャー",
    rfmClose: "閉じる",
    rfmContinue: "続行",
    rfmDelete: "削除",
    rfmDownload: "ダウンロード",
    rfmFileActions: "アクション",
    rfmFileModificationTime: "変更",
    rfmFileName: "名前",
    rfmFileSize: "サイズ",
    rfmFileType: "タイプ",
    rfmFilteredTotal: "{{filteredTotal}}個中 {{start}} から {{end}} までのファイルを表示",
    rfmFirst: "最初",
    rfmHeadingDirectories: "ディレクトリ",
    rfmHeadingSearch: "検索",
    rfmHeadingTags: "タグ",
    rfmHeadingUpload: "アップロード",
    rfmInsert: "挿入",
    rfmLast: "最後",
    rfmSearch: "検索",
    rfmTagDocument: "ドキュメント",
    rfmTagImage: "画像",
    rfmTotal: "、{{total}}個からフィルターされています",
    rfmUpload: "アップロード",
    rfmUploadBrowse: "参照",
    rfmUploadDrop: "ここにファイルをドロップしてください",
    rfmUploadFileRemove: "削除",
    rfmUploadOr: "または",
    rfmView: "ビュー",
    
    viewSourceDialogCancelButton: "閉じる",
    viewSourceDialogOKButton: "ソースコードを適用する",
    viewSourceDialogTitle: "コンテンツのソースコード",
    viewSourceTitle: "ソースコードの表示\/編集"
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ja.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ko.js
/**
 * @fileOverview Korean strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ko', '한국어', {
    alignCenterTitle: "텍스트 중앙 정렬",
    alignJustifyTitle: "텍스트 정렬 정당화",
    alignLeftTitle: "텍스트 왼쪽 정렬",
    alignRightTitle: "텍스트 오른쪽 정렬",
    cancelDialogCancelButton: "편집 계속",
    cancelDialogContent: "당신은 편집을 취소 하 시겠습니까? 모든 변경 내용이 손실 될 것입니다!",
    cancelDialogOKButton: "편집 취소",
    cancelDialogTitle: "편집 취소",
    cancelTitle: "편집 취소",
    classMenuTitle: "스타일 선택",
    clearFormattingTitle: "서식 지우기",
    clickButtonToEditText: "편집",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "자동 번역",
    colorMenuBasicBlack: "블랙",
    colorMenuBasicBlue: "블루",
    colorMenuBasicGreen: "그린",
    colorMenuBasicGrey: "그레이",
    colorMenuBasicOrange: "오렌지",
    colorMenuBasicPurple: "보라색",
    colorMenuBasicRed: "레드",
    colorMenuBasicTitle: "텍스트 색 변경",
    colorMenuBasicWhite: "화이트",
    dockToElementTitle: "도킹\/도킹 해제 요소 편집기",
    dockToScreenTitle: "도킹\/도킹 해제 화면 편집기",
    embedDialogCancelButton: "취소",
    embedDialogOKButton: "개체 포함",
    embedDialogTabCode: "소스 코드",
    embedDialogTabCodeContent: "텍스트 영역 아래에 소스 코드를 붙여 넣습니다.",
    embedDialogTabPreview: "미리 보기",
    embedDialogTabPreviewContent: "내장된 개체의 미리 보기 아래에 표시 됩니다.",
    embedDialogTitle: "개체 포함",
    embedTitle: "개체 포함",
    errorUINoName: "UI \"{{ui}}\"는 유효 하지 않습니다 (name 속성이 있어야 함)",
    errorUINotObject: "UI \"{{ui}}\"는 유효 하지 않습니다 (개체 여야 합니다)",
    errorUIOverride: "UI \"{{name}}\" 이미 등록 된 고 덮어",
    fileManagerDialogTitle: "파일 관리자",
    fileManagerTitle: "파일 관리자",
    floatLeftTitle: "왼쪽에 이미지를 정렬",
    floatNoneTitle: "이미지 제거 정렬",
    floatRightTitle: "오른쪽에 이미지를 정렬",
    fontFamilyMenuFontArial: "굴림",
    fontFamilyMenuFontComicSans: "없이 만화",
    fontFamilyMenuFontCourier: "새로운 택배",
    fontFamilyMenuFontDefault: "기본 글꼴",
    fontFamilyMenuFontGeorgia: "그루지야",
    fontFamilyMenuFontImpact: "에 미치는 영향",
    fontFamilyMenuFontPalatino: "팔 라틴",
    fontFamilyMenuFontTimes: "새로운 로마 시간",
    fontFamilyMenuTitle: "당신의 글꼴 선택",
    guidesTitle: "표시 요소 가이드",
    historyRedoTitle: "다시 실행",
    historyUndoTitle: "실행 취소",
    hrCreateTitle: "가로줄 삽입",
    imageResizeButtonDialogCancelButton: "취소",
    imageResizeButtonDialogHeight: "이미지 높이",
    imageResizeButtonDialogHeightPlaceHolder: "높이",
    imageResizeButtonDialogOKButton: "크기 조정",
    imageResizeButtonDialogTitle: "이미지 크기를 조정합니다",
    imageResizeButtonDialogWidth: "이미지 너비",
    imageResizeButtonDialogWidthPlaceHolder: "너비",
    imageResizeButtonText: "이미지 크기를 조정합니다",
    insertFileDialogCancelButton: "취소",
    insertFileDialogOKButton: "파일 삽입",
    insertFileNameLabel: "파일 이름",
    insertFileNamePlaceHolder: "파일 이름...",
    insertFileTitle: "파일 삽입",
    insertFileURLLabel: "파일 URL",
    insertFileURLPlaceHolder: "파일 URL...",
    languageMenuTitle: "언어 선택",
    linkCreateDialogCancelButton: "취소",
    linkCreateDialogMenuHeader: "연결 유형 선택",
    linkCreateDialogOKButton: "링크 삽입",
    linkCreateDialogTitle: "링크 삽입",
    linkCreateTitle: "링크 삽입",
    linkRemoveTitle: "링크 제거",
    linkTypeDocumentHeader: "문서 또는 다른 파일에 연결",
    linkTypeDocumentInfo: "<h2>확실히 위의 상자에 넣어 해야할지?<\/h2><ol>    <li>귀하의 웹사이트에 업로드 된 파일 확인 하십시오.<\/li>    <li>브라우저에서 업로드 된 파일을 엽니다.<\/li>    <li>브라우저의 주소 표시줄에서 파일의 URL을 복사 하 고 위의 상자에 붙여 넣습니다.<\/li><\/ol>",
    linkTypeDocumentLabel: "문서 또는 다른 파일",
    linkTypeDocumentLocationLabel: "위치:",
    linkTypeDocumentLocationPlaceHolder: "URL 입력",
    linkTypeDocumentNewWindowHeader: "새 창",
    linkTypeDocumentNewWindowLabel: "새 브라우저 창\/탭에서 열 파일을가지고이 확인란을 선택 합니다.",
    linkTypeEmailHeader: "이메일 주소에 연결",
    linkTypeEmailLabel: "이메일 주소",
    linkTypeEmailSubjectLabel: "제목 (선택 사항):",
    linkTypeEmailSubjectPlaceHolder: "제목을 입력합니다",
    linkTypeEmailToLabel: "메일 주소:",
    linkTypeEmailToPlaceHolder: "이메일 주소를 입력",
    linkTypeExternalHeader: "다른 웹사이트에 있는 페이지에 링크",
    linkTypeExternalInfo: "<h2>확실히 위의 상자에 넣어 해야할지?<\/h2><ol>    <li>링크 하려는 웹 페이지를 찾아.<\/li>    <li>브라우저의 주소 표시줄에서 웹 주소를 복사 하 고 위의 상자에 붙여 넣습니다.<\/li><\/ol>",
    linkTypeExternalLabel: "다른 웹사이트에 페이지",
    linkTypeExternalLocationLabel: "위치:",
    linkTypeExternalLocationPlaceHolder: "URL 입력",
    linkTypeExternalNewWindowHeader: "새 창",
    linkTypeExternalNewWindowLabel: "링크를 새 브라우저 창\/탭에서이 확인란을 선택 합니다.",
    linkTypeInternalHeader: "이 웹사이트에 있는 페이지에 링크",
    linkTypeInternalInfo: "<h2>확실히 위의 상자에 넣어 해야할지?<\/h2><ol>    <li>이 사이트 링크를 페이지를 찾아.<\/li>    <li>브라우저의 주소 표시줄에 \"{{domain}}\"를 제외 하 고에서 웹 주소를 복사 하 고 위의 상자에 붙여 넣습니다.<\/li><\/ol>",
    linkTypeInternalLabel: "이 웹사이트에 페이지",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "URI 입력",
    linkTypeInternalNewWindowHeader: "새 창",
    linkTypeInternalNewWindowLabel: "링크를 새 브라우저 창\/탭에서이 확인란을 선택 합니다.",
    listOrderedTitle: "정렬 된 목록",
    listUnorderedTitle: "순서 없는 목록",
    logoTitle: "랩 터 WYSIWYG 편집기에 대 한 자세한 내용은",
    loremIpsumTitle: "테스트용 더미 텍스트 삽입",
    navigateAway: "\n거기 있다이 페이지에 변경 내용이 저장 되지. \n저장 되지 않은 변경 내용이 손실 됩니다이 페이지에서 이동 하는 경우",
    pasteDialogCancelButton: "취소",
    pasteDialogFormattedCleaned: "포맷 및 청소",
    pasteDialogFormattedUnclean: "부정한 포맷",
    pasteDialogOKButton: "삽입",
    pasteDialogPlain: "일반 텍스트",
    pasteDialogSource: "소스 코드",
    pasteDialogTitle: "붙여넣기",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "개정을 검색 하지 못했습니다.",
    revisionsApplyButtonDialogCancelButton: "취소",
    revisionsApplyButtonDialogOKButton: "롤백",
    revisionsApplyButtonDialogText: "롤백 확인",
    revisionsApplyButtonDialogTitle: "롤백 확인",
    revisionsApplyButtonText: "롤백",
    revisionsApplyButtonTitle: "롤백",
    revisionsApplyDialogContent: "이 선택한 버전으로 현재 내용을 대체 하 게 됩니다.<br>현재 콘텐츠 수정으로 추가 되 고이 블록에 대 한 수정 내용 목록에 표시 됩니다.",
    revisionsButtonCurrent: "전류",
    revisionsButtonViewDiffText: "차이",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "만든",
    revisionsDialogCancelButton: "취소",
    revisionsDialogTitle: "보기 콘텐츠 수정",
    revisionsDiffButtonDialogCancelButton: "닫기",
    revisionsDiffButtonDialogTitle: "차이 보기",
    revisionsDiffButtonText: "차이 보기",
    revisionsDiffButtonTitle: "차이 보기",
    revisionsLoading: "버전 로드...",
    revisionsNone: "이 요소에 대 한 수정 없음",
    revisionsPreviewButtonText: "미리 보기",
    revisionsPreviewButtonTitle: "미리 보기",
    revisionsText: "개정",
    revisionsTextEmpty: "없음 수정",
    revisionsTitle: "",
    rfmClose: "닫기",
    rfmContinue: "계속 해 서",
    rfmDelete: "삭제",
    rfmDownload: "다운로드",
    rfmFileActions: "작업",
    rfmFileModificationTime: "수정",
    rfmFileName: "이름",
    rfmFileSize: "크기",
    rfmFileType: "유형",
    rfmFilteredTotal: "보여주는 {{start}} {{end}}를 {{filteredTotal}} 파일",
    rfmFirst: "첫 번째",
    rfmHeadingDirectories: "디렉토리",
    rfmHeadingSearch: "검색",
    rfmHeadingTags: "태그",
    rfmHeadingUpload: "업로드",
    rfmInsert: "삽입",
    rfmLast: "최근",
    rfmSearch: "가 서",
    rfmTagDocument: "문서",
    rfmTagImage: "이미지",
    rfmTotal: "{{total}}에서 필터링",
    rfmUpload: "업로드",
    rfmUploadBrowse: "찾아보기",
    rfmUploadDrop: "여기 방울 파일",
    rfmUploadFileRemove: "제거",
    rfmUploadOr: "또는",
    rfmView: "보기",
    saveJsonFail: "{{failed}} 콘텐츠 블럭과 저장 하지 못했습니다.",
    saveJsonSaved: "{{saved}} 콘텐츠 블럭과 성공적으로 저장 합니다.",
    saveNotConfigured: "구성 되지 않은 또는 사용할 수 없습니다.",
    saveRestFail: "{{failed}} 콘텐츠 블럭과 저장 하지 못했습니다.",
    saveRestPartial: "{{saved}} {{failed}} 콘텐츠 블록을 저장 합니다.",
    saveRestSaved: "{{saved}} 콘텐츠 블럭과 성공적으로 저장 합니다.",
    saveTitle: "콘텐츠 저장",
    snippetMenuTitle: "미리 보기",
    specialCharactersArrows: "화살표",
    specialCharactersDialogOKButton: "괜찮았던 것",
    specialCharactersDialogTitle: "특수 문자 삽입",
    specialCharactersGreekAlphabet: "그리스 문자",
    specialCharactersHelp: "특수 문자 추가를 클릭 합니다. \"확인\"을 클릭 완료 되 면이 대화 상자를 닫습니다",
    specialCharactersMathematics: "수학",
    specialCharactersSymbols: "기호",
    specialCharactersTitle: "특수 문자 삽입",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} 문자 한도 초과",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} 자 남음",
    statisticsButtonCharacters: "{{characters}} 문자",
    statisticsDialogCharactersOverLimit: "권장 되는 제한은 위에 {{characters}} 문자, {{charactersRemaining}}",
    statisticsDialogCharactersRemaining: "{{characters}} 자, {{charactersRemaining}} 남음",
    statisticsDialogNotTruncated: "콘텐츠가 잘리지 않습니다.",
    statisticsDialogOKButton: "괜찮았던 것",
    statisticsDialogSentence: "{{sentences}} 문장",
    statisticsDialogSentences: "{{sentences}} 문장",
    statisticsDialogTitle: "콘텐츠 통계",
    statisticsDialogTruncated: "{{limit}} 자 이상 포함 내용과 잘릴 수 있습니다.",
    statisticsDialogWord: "{{words}} 단어",
    statisticsDialogWords: "{{words}} 단어",
    statisticsTitle: "클릭 통계 보기",
    tableCreateTitle: "테이블 만들기",
    tableDeleteColumnTitle: "테이블 열 삭제",
    tableDeleteRowTitle: "테이블 행을 삭제",
    tableInsertColumnTitle: "표 열 삽입",
    tableInsertRowTitle: "표 행을 삽입",
    tableMergeCellsTitle: "표 셀 병합",
    tableSplitCellsTitle: "표 셀 분하시오",
    tagMenuTagAddress: "주소",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "제목 1",
    tagMenuTagH2: "제목 2",
    tagMenuTagH3: "제목 3",
    tagMenuTagH4: "제목 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "단락",
    tagMenuTagPre: "사전 포맷",
    tagMenuTitle: "요소의 스타일 변경",
    tagTreeElementLink: "{{element}} 요소 선택",
    tagTreeElementTitle: "\"{{element}}\" 요소 내용을 선택 하려면 클릭 하십시오",
    tagTreeRoot: "루트",
    tagTreeRootLink: "모든 편집 가능한 콘텐츠 선택",
    tagTreeRootTitle: "모든 편집 가능한 콘텐츠를 선택 하려면 클릭 하십시오",
    textBlockQuoteTitle: "블록 인용",
    textBoldTitle: "굵게",
    textItalicTitle: "기울임꼴",
    textSizeDecreaseTitle: "텍스트 크기 감소",
    textSizeIncreaseTitle: "텍스트 크기 증가",
    textStrikeTitle: "통해 파업",
    textSubTitle: "서브 스크립트",
    textSuperTitle: "슈퍼 스크립트",
    textUnderlineTitle: "밑줄",
    unsavedEditWarningText: "거기이 페이지에서 변경을 저장 되지 있습니다.",
    viewSourceDialogCancelButton: "닫기",
    viewSourceDialogOKButton: "소스 코드 적용",
    viewSourceDialogTitle: "콘텐츠 소스 코드",
    viewSourceTitle: "보기\/편집 소스 코드"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ko.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/lt.js
/**
 * @fileOverview Lithuanian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('lt', 'Lietuvių', {
    alignCenterTitle: "Centruoti tekstą",
    alignJustifyTitle: "Išlygiuoti tekstą pateisinti",
    alignLeftTitle: "Lygiuoti tekstą kairėje",
    alignRightTitle: "Tekstą lygiuoti dešinėje",
    cancelDialogCancelButton: "Tęsti redagavimą",
    cancelDialogContent: "Ar tikrai norite atšaukti redagavimą? Visi pakeitimai bus prarasti!",
    cancelDialogOKButton: "Atšaukti redagavimą",
    cancelDialogTitle: "Atšaukti redagavimą",
    cancelTitle: "Atšaukti redagavimą",
    classMenuTitle: "Stiliaus parinkiklis",
    clearFormattingTitle: "Valyti formatavimą",
    clickButtonToEditText: "Redaguoti",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatinis",
    colorMenuBasicBlack: "Juoda",
    colorMenuBasicBlue: "Mėlyna",
    colorMenuBasicGreen: "Žalioji",
    colorMenuBasicGrey: "Pilka",
    colorMenuBasicOrange: "Oranžinė",
    colorMenuBasicPurple: "Violetinė",
    colorMenuBasicRed: "Raudona",
    colorMenuBasicTitle: "Pakeisti teksto spalvą:",
    colorMenuBasicWhite: "Balta",
    dockToElementTitle: "Elementas redaktorius dokas\/atjungti nuo doko",
    dockToScreenTitle: "Atjungti nuo doko\/doko redaktorius į ekraną",
    embedDialogCancelButton: "Atšaukti",
    embedDialogOKButton: "Įterpti objektą",
    embedDialogTabCode: "Įterpti kodą",
    embedDialogTabCodeContent: "Įklijuokite savo įterpti kodą į teksto srities apačioje:",
    embedDialogTabPreview: "Peržiūra",
    embedDialogTabPreviewContent: "Peržiūrėti savo įdėtasis objektas yra rodomas žemiau:",
    embedDialogTitle: "Įterpti objektą",
    embedTitle: "Įterpti objektą",
    errorUINoName: "UI \"{{ui}}\" yra neteisingas (turi būti ypatybei pavadinimas)",
    errorUINotObject: "UI \"{{ui}}\" yra neteisingas (turi būti objekto)",
    errorUIOverride: "UI \"{{name}}\" jau buvo įregistruotas, ir jis bus perrašytas",
    fileManagerDialogTitle: "Failų tvarkyklė",
    fileManagerTitle: "Failų tvarkyklė",
    floatLeftTitle: "Suderinti vaizdą į kairę",
    floatNoneTitle: "Pašalinti vaizdo lygiuotė",
    floatRightTitle: "Suderinti vaizdą į dešinę",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Komiksai be",
    fontFamilyMenuFontCourier: "Kurjerių naujas",
    fontFamilyMenuFontDefault: "Numatytasis šriftas",
    fontFamilyMenuFontGeorgia: "Gruzija",
    fontFamilyMenuFontImpact: "Poveikio",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Pasirinkti šrifto dydį",
    guidesTitle: "Rodyti elementas informacija",
    historyRedoTitle: "Perdaryti",
    historyUndoTitle: "Anuliuoti",
    hrCreateTitle: "Įterpti Horizontal Rule",
    imageResizeButtonDialogCancelButton: "Atšaukti",
    imageResizeButtonDialogHeight: "Nuotraukos aukštis",
    imageResizeButtonDialogHeightPlaceHolder: "Aukštis",
    imageResizeButtonDialogOKButton: "Keisti dydį",
    imageResizeButtonDialogTitle: "Resize vaizdo",
    imageResizeButtonDialogWidth: "Plotis",
    imageResizeButtonDialogWidthPlaceHolder: "Plotis",
    imageResizeButtonText: "Resize vaizdo",
    insertFileDialogCancelButton: "Atšaukti",
    insertFileDialogOKButton: "Įterpti failą",
    insertFileNameLabel: "Failo vardas",
    insertFileNamePlaceHolder: "Failo vardas...",
    insertFileTitle: "Įterpti failą",
    insertFileURLLabel: "Failo URL",
    insertFileURLPlaceHolder: "Failo URL...",
    languageMenuTitle: "Kalbos keitimas",
    linkCreateDialogCancelButton: "Atšaukti",
    linkCreateDialogMenuHeader: "Pasirinkite saito tipas",
    linkCreateDialogOKButton: "Įterpti saitą",
    linkCreateDialogTitle: "Įterpti saitą",
    linkCreateTitle: "Įterpti saitą",
    linkRemoveTitle: "Pašalinti saitą",
    linkTypeDocumentHeader: "Nuoroda į dokumentą ar kitą failą",
    linkTypeDocumentInfo: "<h2>Nesate tikras, ką įtraukti į aukščiau esantį laukelį?<\/h2><ol>    <li>Užtikrinti, kad failas yra įkeltas į jūsų svetainę.<\/li>    <li>Atidaryti nusiųstą failą savo naršyklėje.<\/li>    <li>Kopijuoti failo URL iš savo naršyklės adreso juostą ir įklijuokite jį į aukščiau esantį laukelį.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokumento ar kito failo",
    linkTypeDocumentLocationLabel: "Vieta:",
    linkTypeDocumentLocationPlaceHolder: "Įveskite URL",
    linkTypeDocumentNewWindowHeader: "Naujame lange",
    linkTypeDocumentNewWindowLabel: "Pažymėkite šį langelį, kad failą atidaryti naujame naršyklės lange\/skirtuke.",
    linkTypeEmailHeader: "Susieti su el. pašto adresą",
    linkTypeEmailLabel: "Elektroninio pašto adresas",
    linkTypeEmailSubjectLabel: "Tema (neprivaloma):",
    linkTypeEmailSubjectPlaceHolder: "Çra¹ykite tem±",
    linkTypeEmailToLabel: "El. paštas:",
    linkTypeEmailToPlaceHolder: "Įveskite elektroninio pašto adresą",
    linkTypeExternalHeader: "Nuoroda į kitą svetainę puslapyje",
    linkTypeExternalInfo: "<h2>Nesate tikras, ką įtraukti į aukščiau esantį laukelį?<\/h2><ol>    <li>Rasti puslapyje norite susieti su žiniatinklyje.<\/li>    <li>Nukopijuokite interneto adresą, iš savo naršyklės adreso juostą ir įklijuokite jį į aukščiau esantį laukelį.<\/li><\/ol>",
    linkTypeExternalLabel: "Puslapis apie kitą svetainę",
    linkTypeExternalLocationLabel: "Vieta:",
    linkTypeExternalLocationPlaceHolder: "Įveskite URL",
    linkTypeExternalNewWindowHeader: "Naujame lange",
    linkTypeExternalNewWindowLabel: "Paώymλkite πα langelα, kad atidaryti naujame naršyklės lange\/skirtuke nuoroda.",
    linkTypeInternalHeader: "Nuoroda į puslapį šioje svetainėje",
    linkTypeInternalInfo: "<h2>Nesate tikras, ką įtraukti į aukščiau esantį laukelį?<\/h2><ol>    <li>Rasti puslapyje šios svetainės nuorodą.<\/li>    <li>Nukopijuokite interneto adresą, iš savo naršyklės adreso juostoje, išskyrus \"{{domain}}\" ir įklijuokite jį į aukščiau esantį laukelį.<\/li><\/ol>",
    linkTypeInternalLabel: "Puslapis šioje svetainėje",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Įveskite URI",
    linkTypeInternalNewWindowHeader: "Naujame lange",
    linkTypeInternalNewWindowLabel: "Paώymλkite πα langelα, kad atidaryti naujame naršyklės lange\/skirtuke nuoroda.",
    listOrderedTitle: "Sekos sąrašas",
    listUnorderedTitle: "Nesutvarkytas sąrašas",
    logoTitle: "Sužinokite daugiau apie Raptor WYSIWYG redaktorius",
    loremIpsumTitle: "Įterpti manekenas teksto bandymams",
    navigateAway: "\nYra neįrašytų keitimų šiame puslapyje. \nJei jums išeiti iš šio puslapio jums bus prarasti neįrašytus keitimus",
    pasteDialogCancelButton: "Atšaukti",
    pasteDialogFormattedCleaned: "Formatuoti &amp; išvalyti",
    pasteDialogFormattedUnclean: "Suformatuotas nešvarus",
    pasteDialogOKButton: "Įterpti",
    pasteDialogPlain: "Paprastasis tekstas",
    pasteDialogSource: "Šaltinio kodas",
    pasteDialogTitle: "Pasta",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Nepavyko nuskaityti pakeitimus",
    revisionsApplyButtonDialogCancelButton: "Atšaukti",
    revisionsApplyButtonDialogOKButton: "Keitimų atšaukimas",
    revisionsApplyButtonDialogText: "Keitimų atšaukimo patvirtinimas",
    revisionsApplyButtonDialogTitle: "Keitimų atšaukimo patvirtinimas",
    revisionsApplyButtonText: "Keitimų atšaukimas",
    revisionsApplyButtonTitle: "Keitimų atšaukimas",
    revisionsApplyDialogContent: "Tai pakeis pasirinktą peržiūrėti turinio.<br>Turinio bus pridedamas kaip peržiūrėti, ir bus matomi pakeitimai šį bloką.",
    revisionsButtonCurrent: "Srovė",
    revisionsButtonViewDiffText: "Skirtumai",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Sukurta",
    revisionsDialogCancelButton: "Atšaukti",
    revisionsDialogTitle: "Rodyti turinio pakeitimai",
    revisionsDiffButtonDialogCancelButton: "Uždaryti",
    revisionsDiffButtonDialogTitle: "Rodyti skirtumai",
    revisionsDiffButtonText: "Rodyti skirtumai",
    revisionsDiffButtonTitle: "Rodyti skirtumai",
    revisionsLoading: "Pakrovimo pakeitimus...",
    revisionsNone: "Nėra pataisymų šio elemento",
    revisionsPreviewButtonText: "Peržiūra",
    revisionsPreviewButtonTitle: "Peržiūra",
    revisionsText: "Pakeitimai",
    revisionsTextEmpty: "Jokių pataisymų",
    revisionsTitle: "",
    rfmClose: "Uždaryti",
    rfmContinue: "Toliau",
    rfmDelete: "Naikinti",
    rfmDownload: "Parsisiųsti",
    rfmFileActions: "Veiksmai",
    rfmFileModificationTime: "Modifikuotas",
    rfmFileName: "vardas, pavadinimas",
    rfmFileSize: "Dydis",
    rfmFileType: "Tipo",
    rfmFilteredTotal: "Parodydami {{start}} {{end}} {{filteredTotal}} failų",
    rfmFirst: "Pirmosios",
    rfmHeadingDirectories: "Katalogai",
    rfmHeadingSearch: "Paieškos",
    rfmHeadingTags: "Žymos",
    rfmHeadingUpload: "Įkelti",
    rfmInsert: "Įterpti",
    rfmLast: "Paskutinis",
    rfmSearch: "Eiti",
    rfmTagDocument: "Dokumento",
    rfmTagImage: "Vaizdas",
    rfmTotal: ", išfiltruoti iš {{total}}",
    rfmUpload: "Įkelti",
    rfmUploadBrowse: "Naršyti",
    rfmUploadDrop: "Numeskite failus čia",
    rfmUploadFileRemove: "Pašalinti",
    rfmUploadOr: "ar",
    rfmView: "Rodyti",
    saveJsonFail: "Nepavyko įrašyti {{failed}} turinio numerių grupę-ES",
    saveJsonSaved: "Sėkmingai įrašyti {{saved}} turinio numerių grupę-ES.",
    saveNotConfigured: "Įrašyti nesukonfigūruota, arba išjungta.",
    saveRestFail: "Nepavyko įrašyti {{failed}} turinio numerių grupę-ES.",
    saveRestPartial: "Įrašyti {{saved}} iš {{failed}} turinio blokai.",
    saveRestSaved: "Sėkmingai įrašyti {{saved}} turinio numerių grupę-ES.",
    saveTitle: "Išsaugoti turinio",
    snippetMenuTitle: "Fragmentai",
    specialCharactersArrows: "Rodykles",
    specialCharactersDialogOKButton: "gerai",
    specialCharactersDialogTitle: "Įterpti specialiuosius simbolius",
    specialCharactersGreekAlphabet: "Kazys Binkis",
    specialCharactersHelp: "Spustelėkite Specialusis simbolis jį įtraukti. Spustelėkite \"Gerai\" kai daroma uždarykite šį dialogo langą",
    specialCharactersMathematics: "Matematikos",
    specialCharactersSymbols: "Simboliai",
    specialCharactersTitle: "Specialiojo rašmens įterpimas",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} simbolių ribą",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} simboliai lieka",
    statisticsButtonCharacters: "{{characters}} simboliai",
    statisticsDialogCharactersOverLimit: "{{characters}} simboliai, {{charactersRemaining}} per nurodytas rekomenduojamas limitas",
    statisticsDialogCharactersRemaining: "{{characters}}, {{charactersRemaining}} liko simbolių",
    statisticsDialogNotTruncated: "Turinys bus nukirsta",
    statisticsDialogOKButton: "gerai",
    statisticsDialogSentence: "{{sentences}} sakinys",
    statisticsDialogSentences: "{{sentences}} sakiniai",
    statisticsDialogTitle: "Turinio statistika",
    statisticsDialogTruncated: "Turinį sudaro daugiau negu {{limit}} simbolių ir gali būti sutrumpintas",
    statisticsDialogWord: "{{words}} žodis",
    statisticsDialogWords: "{{words}} žodžiai",
    statisticsTitle: "Paspauskite, jei norite peržiūrėti statistiką",
    tableCreateTitle: "Lentelės kūrimas",
    tableDeleteColumnTitle: "Naikinti lentelės stulpelyje",
    tableDeleteRowTitle: "Naikinti lentelės eilutę",
    tableInsertColumnTitle: "Įterpti lentelės stulpelį",
    tableInsertRowTitle: "Įterpti lentelės eilutę",
    tableMergeCellsTitle: "Sulieti lentelės langelius",
    tableSplitCellsTitle: "Skaidyti lentelės langelius",
    tagMenuTagAddress: "Adresas",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Antraštė 1",
    tagMenuTagH2: "2 Išlaidų kategorija",
    tagMenuTagH3: "3 Pozicijos",
    tagMenuTagH4: "4 Išlaidų kategorijos",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Dalies",
    tagMenuTagPre: "Iš anksto suformatuotas",
    tagMenuTitle: "Pakeisti elemento stilius",
    tagTreeElementLink: "Pasirinkite {{element}} elementas",
    tagTreeElementTitle: "Spustelėkite, kad pasirinktumėte \"{{element}}\" elemento turinį",
    tagTreeRoot: "šaknis",
    tagTreeRootLink: "Pasirinkite Redaguoti pridìti",
    tagTreeRootTitle: "Spustelėkite, kad pažymėtumėte visą redaguojamą turinį",
    textBlockQuoteTitle: "Bloko citata",
    textBoldTitle: "Paryškinti",
    textItalicTitle: "Pasvirasis",
    textSizeDecreaseTitle: "Mažinti teksto dydį",
    textSizeIncreaseTitle: "Didinti teksto dydį",
    textStrikeTitle: "Perbraukti",
    textSubTitle: "Sub-scenarijų",
    textSuperTitle: "Super scenarijus",
    textUnderlineTitle: "Pabraukti",
    unsavedEditWarningText: "Yra neįrašytų keitimų šiame puslapyje",
    viewSourceDialogCancelButton: "Uždaryti",
    viewSourceDialogOKButton: "Taikyti kodą",
    viewSourceDialogTitle: "Turinio šaltinio kodas",
    viewSourceTitle: "Peržiūrėti\/redaguoti kodą"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/lt.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/lv.js
/**
 * @fileOverview Latvian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('lv', 'Latviešu', {
    alignCenterTitle: "Līdzināt tekstu centrs",
    alignJustifyTitle: "Līdzinātu tekstu, kas attaisno",
    alignLeftTitle: "Līdzināt tekstu pa kreisi",
    alignRightTitle: "Līdzināt tekstu pa labi",
    cancelDialogCancelButton: "Turpināt rediģēšanu",
    cancelDialogContent: "Vai tiešām vēlaties atcelt rediģēšanu Visas izmaiņas tiks zaudētas!",
    cancelDialogOKButton: "Atcelt rediģēšanu",
    cancelDialogTitle: "Atcelt rediģēšanu",
    cancelTitle: "Atcelt rediģēšanu",
    classMenuTitle: "Stila izvēles",
    clearFormattingTitle: "Notīrīt formatējumu",
    clickButtonToEditText: "Rediģēt",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automātiska",
    colorMenuBasicBlack: "Black",
    colorMenuBasicBlue: "Zila",
    colorMenuBasicGreen: "Green",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Violeta",
    colorMenuBasicRed: "Red",
    colorMenuBasicTitle: "Teksta krāsas maiņa",
    colorMenuBasicWhite: "White",
    dockToElementTitle: "Elementu redaktoru doks\/atdokošana",
    dockToScreenTitle: "Dock\/atdokot redaktora ekrānā",
    embedDialogCancelButton: "Atcelt",
    embedDialogOKButton: "Iegultu objektu",
    embedDialogTabCode: "Iegulto kodu",
    embedDialogTabCodeContent: "Ielīmējiet iegultu kodu teksta apgabalu zemāk:",
    embedDialogTabPreview: "Priekšskatījums",
    embedDialogTabPreviewContent: "Iegulto objektu priekšskatījums tiek parādīts zemāk:",
    embedDialogTitle: "Iegultu objektu",
    embedTitle: "Iegultu objektu",
    errorUINoName: "Lietotāja Interfeisu \"{{ui}}\" ir nederīga (jābūt nosaukuma rekvizītu)",
    errorUINotObject: "Lietotāja Interfeisu \"{{ui}}\" ir nederīga (jābūt objektam)",
    errorUIOverride: "UI \"{{name}}\" jau ir reģistrēta, un tiks pārrakstīti",
    fileManagerDialogTitle: "Failu pārvaldnieks",
    fileManagerTitle: "Failu pārvaldnieks",
    floatLeftTitle: "Līdzināt attēlu pa kreisi",
    floatNoneTitle: "Noņemiet attēla līdzināšana",
    floatRightTitle: "Līdzināt attēlu pa labi",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Komiksu bez",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Noklusējuma fonts",
    fontFamilyMenuFontGeorgia: "Gruzija",
    fontFamilyMenuFontImpact: "Ietekme",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Izvēlieties savu fontu",
    guidesTitle: "Rādīt elementu ceļveži",
    historyRedoTitle: "Atcelt atsaukšanu",
    historyUndoTitle: "Atsaukt",
    hrCreateTitle: "Iespraust horizontāla līnija",
    imageResizeButtonDialogCancelButton: "Atcelt",
    imageResizeButtonDialogHeight: "Attēla augstums",
    imageResizeButtonDialogHeightPlaceHolder: "Augstums",
    imageResizeButtonDialogOKButton: "Mainīt izmērus",
    imageResizeButtonDialogTitle: "Mainītu attēla izmērus",
    imageResizeButtonDialogWidth: "Attēla platums",
    imageResizeButtonDialogWidthPlaceHolder: "Platums",
    imageResizeButtonText: "Mainītu attēla izmērus",
    insertFileDialogCancelButton: "Atcelt",
    insertFileDialogOKButton: "Faila iespraušana",
    insertFileNameLabel: "Faila nosaukums",
    insertFileNamePlaceHolder: "Faila nosaukumu...",
    insertFileTitle: "Faila iespraušana",
    insertFileURLLabel: "Faila URL",
    insertFileURLPlaceHolder: "Faila URL...",
    languageMenuTitle: "Mainīt valodu",
    linkCreateDialogCancelButton: "Atcelt",
    linkCreateDialogMenuHeader: "Izvēlieties saites tipu",
    linkCreateDialogOKButton: "Ievietot saiti",
    linkCreateDialogTitle: "Ievietot saiti",
    linkCreateTitle: "Ievietot saiti",
    linkRemoveTitle: "Noņemt saiti",
    linkTypeDocumentHeader: "Saiti uz dokumentu vai citu failu",
    linkTypeDocumentInfo: "<h2>Nav pārliecināts, ko likt lodziņā augstāk?<\/h2><ol>    <li>Pārliecinieties, ka fails ir augšupielādēts uz jūsu vietni.<\/li>    <li>Pārlūkprogrammā atvērtu augšupielādēto failu.<\/li>    <li>Kopēsit failu URL pārlūkprogrammas adrešu joslā un ielīmējiet lodziņā augstāk.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokumentu vai citu failu",
    linkTypeDocumentLocationLabel: "Atrašanās vieta:",
    linkTypeDocumentLocationPlaceHolder: "Ievadiet URL",
    linkTypeDocumentNewWindowHeader: "Jaunā logā",
    linkTypeDocumentNewWindowLabel: "Atzīmējiet šo izvēles rūtiņu, lai failu atvērtu jaunā pārlūkprogrammas logā\/TAB.",
    linkTypeEmailHeader: "Saiti uz e-pasta adresi",
    linkTypeEmailLabel: "E-pasta adresi",
    linkTypeEmailSubjectLabel: "Tēma (neobligāti):",
    linkTypeEmailSubjectPlaceHolder: "Ievadiet tēmu",
    linkTypeEmailToLabel: "E-pasts:",
    linkTypeEmailToPlaceHolder: "Ievadiet e-pasta adresi",
    linkTypeExternalHeader: "Saiti uz lapu citā vietnē",
    linkTypeExternalInfo: "<h2>Nav pārliecināts, ko likt lodziņā augstāk?<\/h2><ol>    <li>Atrast lapu tīmeklī, kuru vēlaties izveidot saiti.<\/li>    <li>Kopējiet web adresi no pārlūkprogrammas adrešu joslā un ielīmējiet to lodziņā augstāk.<\/li><\/ol>",
    linkTypeExternalLabel: "Lappusi citā vietnē",
    linkTypeExternalLocationLabel: "Atrašanās vieta:",
    linkTypeExternalLocationPlaceHolder: "Ievadiet URL",
    linkTypeExternalNewWindowHeader: "Jaunā logā",
    linkTypeExternalNewWindowLabel: "Atzīmējiet šo izvēles rūtiņu, lai saite atvērt jaunu pārlūka logu\/cilni.",
    linkTypeInternalHeader: "Saiti uz lapu šajā vietnē",
    linkTypeInternalInfo: "<h2>Nav pārliecināts, ko likt lodziņā augstāk?<\/h2><ol>    <li>Uz vietnes saites, lai atrastu lapu.<\/li>    <li>Kopējiet web adresi no pārlūkprogrammas adrešu joslā, izņemot \"{{domain}}\" un ielīmējiet to lodziņā augstāk.<\/li><\/ol>",
    linkTypeInternalLabel: "Lapu šajā vietnē",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Ievadiet URI",
    linkTypeInternalNewWindowHeader: "Jaunā logā",
    linkTypeInternalNewWindowLabel: "Atzīmējiet šo izvēles rūtiņu, lai saite atvērt jaunu pārlūka logu\/cilni.",
    listOrderedTitle: "Sakārtotu sarakstu",
    listUnorderedTitle: "Nenumurēts saraksts",
    logoTitle: "Uzziniet vairāk par Raptor WYSIWYG redaktors",
    loremIpsumTitle: "Ievietot lelles teksts testēšanai",
    navigateAway: "\nŠajā lapā ir nesaglabātas izmaiņas. \nJa naviģēsit prom no šīs lapas, jūs zaudēsiet nesaglabātās izmaiņas",
    pasteDialogCancelButton: "Atcelt",
    pasteDialogFormattedCleaned: "Formatēts &amp; jātīra",
    pasteDialogFormattedUnclean: "Formatēts nešķīsts",
    pasteDialogOKButton: "Iespraust",
    pasteDialogPlain: "Vienkārša teksta",
    pasteDialogSource: "Avota kods",
    pasteDialogTitle: "Ielīmēt",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Neizdevās izgūt pārskatījumus",
    revisionsApplyButtonDialogCancelButton: "Atcelt",
    revisionsApplyButtonDialogOKButton: "Atrite",
    revisionsApplyButtonDialogText: "Atrite apstiprinājums",
    revisionsApplyButtonDialogTitle: "Atrite apstiprinājums",
    revisionsApplyButtonText: "Atrite",
    revisionsApplyButtonTitle: "Atrite",
    revisionsApplyDialogContent: "Tas aizstās pašreizējo saturu atlasītajā pārskatīšanu.<br>Pašreizējais saturs tiks pievienots kā pārskatīšana, un būs redzama šī bloka saraksta pārskatīšanu.",
    revisionsButtonCurrent: "Pašreizējā",
    revisionsButtonViewDiffText: "Atšķirības",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Izveidots",
    revisionsDialogCancelButton: "Atcelt",
    revisionsDialogTitle: "Skata satura pārskatīšanu",
    revisionsDiffButtonDialogCancelButton: "Aizvērt",
    revisionsDiffButtonDialogTitle: "Skatīt atšķirības",
    revisionsDiffButtonText: "Skatīt atšķirības",
    revisionsDiffButtonTitle: "Skatīt atšķirības",
    revisionsLoading: "Pārskatīšana notiek ielāde...",
    revisionsNone: "Šim elementam nav pārskatījumus",
    revisionsPreviewButtonText: "Priekšskatījums",
    revisionsPreviewButtonTitle: "Priekšskatījums",
    revisionsText: "Labojumi",
    revisionsTextEmpty: "Nekādas izmaiņas",
    revisionsTitle: "",
    rfmClose: "Aizvērt",
    rfmContinue: "Turpināt",
    rfmDelete: "Dzēst",
    rfmDownload: "Lejupielādēt",
    rfmFileActions: "Darbības",
    rfmFileModificationTime: "Modificēt",
    rfmFileName: "vārds",
    rfmFileSize: "Lielums",
    rfmFileType: "Tips",
    rfmFilteredTotal: "{{start}} rāda izbeigt {{end}} {{filteredTotal}} failiem",
    rfmFirst: "Pirmais",
    rfmHeadingDirectories: "Katalogi",
    rfmHeadingSearch: "Meklēšanas",
    rfmHeadingTags: "Tagus",
    rfmHeadingUpload: "Augšupielādēt",
    rfmInsert: "Iespraust",
    rfmLast: "Pēdējais",
    rfmSearch: "Iet",
    rfmTagDocument: "Dokumentu",
    rfmTagImage: "Attēlu",
    rfmTotal: ", plūda {{total}}",
    rfmUpload: "Augšupielādēt",
    rfmUploadBrowse: "Pārlūkot",
    rfmUploadDrop: "Nomest failus šeit",
    rfmUploadFileRemove: "Noņemt",
    rfmUploadOr: "vai",
    rfmView: "Skats",
    saveJsonFail: "Neizdevās saglabāt saturu izdota {{failed}}",
    saveJsonSaved: "Veiksmīgi saglabāta {{saved}} satura izdota.",
    saveNotConfigured: "Saglabāt nav konfigurēts, vai tas ir atspējots.",
    saveRestFail: "Neizdevās saglabāt saturu izdota {{failed}}.",
    saveRestPartial: "Saglabāti {{saved}} no {{failed}} satura blokus.",
    saveRestSaved: "Veiksmīgi saglabāta {{saved}} satura izdota.",
    saveTitle: "Saglabāt saturu",
    snippetMenuTitle: "Fragmentus",
    specialCharactersArrows: "Bultas",
    specialCharactersDialogOKButton: "labi",
    specialCharactersDialogTitle: "Ievietotu speciālās rakstzīmes",
    specialCharactersGreekAlphabet: "Grieķu alfabēts",
    specialCharactersHelp: "Noklikšķiniet uz speciālās rakstzīmes, lai to pievienotu. Noklikšķiniet uz Labi, kad izdarīts, lai aizvērtu šo dialogu",
    specialCharactersMathematics: "Matemātika",
    specialCharactersSymbols: "Simboli",
    specialCharactersTitle: "Ievietotu speciālo rakstzīmi",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} rakstzīmes, kas pārsniedz ierobežojumus",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} rakstzīmju, pārējais",
    statisticsButtonCharacters: "{{characters}} rakstzīmes",
    statisticsDialogCharactersOverLimit: "{{characters}} rakstzīmes, {{charactersRemaining}} pārsniedz ieteicamo robežu",
    statisticsDialogCharactersRemaining: "{{characters}} rakstzīmes, {{charactersRemaining}} atlikušo",
    statisticsDialogNotTruncated: "Saturs nevar tikt apcirsti",
    statisticsDialogOKButton: "labi",
    statisticsDialogSentence: "{{sentences}} teikumu",
    statisticsDialogSentences: "{{sentences}} teikumus",
    statisticsDialogTitle: "Satura statistiku",
    statisticsDialogTruncated: "Saturu, kas satur vairāk nekā {{limit}} rakstzīmēm un var saīsināt",
    statisticsDialogWord: "{{words}} vārdu",
    statisticsDialogWords: "{{words}} vārdus",
    statisticsTitle: "Noklikšķiniet, lai skatītu statistiku",
    tableCreateTitle: "Izveidot tabulu",
    tableDeleteColumnTitle: "Dzēst tabulas kolonnas",
    tableDeleteRowTitle: "Dzēst tabulas rindas",
    tableInsertColumnTitle: "Ievietot tabulas kolonnu",
    tableInsertRowTitle: "Ievietot tabulas rindu",
    tableMergeCellsTitle: "Sapludināt tabulas šūnas",
    tableSplitCellsTitle: "Sadalīt tabulas šūnas",
    tagMenuTagAddress: "Adrese",
    tagMenuTagDiv: "DIV",
    tagMenuTagH1: "Virsraksts 1",
    tagMenuTagH2: "Virsraksts 2",
    tagMenuTagH3: "Virsraksts 3",
    tagMenuTagH4: "4. Pozīcijā",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Punkts",
    tagMenuTagPre: "Sākotnēji formatētas",
    tagMenuTitle: "Elementu stila mainīšana",
    tagTreeElementLink: "Atlasiet elementu {{element}}",
    tagTreeElementTitle: "Noklikšķiniet, lai atlasītu saturu no \"{{element}}\" elements",
    tagTreeRoot: "saknes",
    tagTreeRootLink: "Izvēlieties Rediģēt visu saturu",
    tagTreeRootTitle: "Noklikšķiniet, lai atlasītu visu labot saturu",
    textBlockQuoteTitle: "Bloka citāta",
    textBoldTitle: "Treknraksts",
    textItalicTitle: "Italic",
    textSizeDecreaseTitle: "Samazināt teksta lielumu",
    textSizeIncreaseTitle: "Palielināt teksta izmēru",
    textStrikeTitle: "Pārsvītrojums",
    textSubTitle: "Sub-skriptu",
    textSuperTitle: "Super-skriptu",
    textUnderlineTitle: "Pasvītrojums",
    unsavedEditWarningText: "Ir nesaglabātas izmaiņas šajā lapā",
    viewSourceDialogCancelButton: "Aizvērt",
    viewSourceDialogOKButton: "Lietojiet avota kodu",
    viewSourceDialogTitle: "Satura avota kods",
    viewSourceTitle: "Skatīt\/rediģēt avota kodu"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/lv.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ms.js
/**
 * @fileOverview Malay strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ms', 'Melayu', {
    alignCenterTitle: "Menjajarkan teks Pusat",
    alignJustifyTitle: "Menjajarkan teks justifikasi",
    alignLeftTitle: "Menjajarkan teks kiri",
    alignRightTitle: "Menjajarkan teks hak",
    cancelDialogCancelButton: "Terus mengedit",
    cancelDialogContent: "Adakah anda pasti anda mahu membatalkan menyunting? Semua perubahan akan hilang!",
    cancelDialogOKButton: "Membatalkan penyuntingan",
    cancelDialogTitle: "Membatalkan penyuntingan",
    cancelTitle: "Membatalkan penyuntingan",
    classMenuTitle: "Gaya picker",
    clearFormattingTitle: "Format yang jelas",
    clickButtonToEditText: "Edit",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatik",
    colorMenuBasicBlack: "Hitam",
    colorMenuBasicBlue: "Biru",
    colorMenuBasicGreen: "Hijau",
    colorMenuBasicGrey: "Kelabu",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Purple",
    colorMenuBasicRed: "Merah",
    colorMenuBasicTitle: "Menukar warna teks",
    colorMenuBasicWhite: "Putih",
    dockToElementTitle: "Keluar Dok\/dok editor untuk elemen",
    dockToScreenTitle: "Keluar Dok\/dok editor untuk skrin",
    embedDialogCancelButton: "Batal",
    embedDialogOKButton: "Menerapkan objek",
    embedDialogTabCode: "Embed kod",
    embedDialogTabCodeContent: "Paste kod embed anda dalam kawasan teks di bawah:",
    embedDialogTabPreview: "Pratonton",
    embedDialogTabPreviewContent: "Pratonton objek terbenam anda dipaparkan di bawah:",
    embedDialogTitle: "Menerapkan objek",
    embedTitle: "Menerapkan objek",
    errorUINoName: "UI \"{{ui}}\" tidak sah (mesti mempunyai sifat nama)",
    errorUINotObject: "UI \"{{ui}}\" tidak sah (mestilah objek)",
    errorUIOverride: "UI \"{{name}}\" telah berdaftar dan akan ditulis ganti",
    fileManagerDialogTitle: "Pengurus fail",
    fileManagerTitle: "Pengurus fail",
    floatLeftTitle: "Menyelaraskan imej di sebelah kiri",
    floatNoneTitle: "Alih Keluar imej menyelaraskan",
    floatRightTitle: "Menyelaraskan imej ke kanan",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Komik tanpa",
    fontFamilyMenuFontCourier: "Kurier yang baru",
    fontFamilyMenuFontDefault: "Fon lalai",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Kesan",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Masa baru Rom",
    fontFamilyMenuTitle: "Sila pilih teks anda",
    guidesTitle: "Menunjukkan panduan elemen",
    historyRedoTitle: "Buat semula",
    historyUndoTitle: "Buat asal",
    hrCreateTitle: "Sisipkan garisan lintang",
    imageResizeButtonDialogCancelButton: "Batal",
    imageResizeButtonDialogHeight: "Tinggi imej",
    imageResizeButtonDialogHeightPlaceHolder: "Ketinggian",
    imageResizeButtonDialogOKButton: "Saiz semula",
    imageResizeButtonDialogTitle: "Mengubah saiz imej",
    imageResizeButtonDialogWidth: "Lebar imej",
    imageResizeButtonDialogWidthPlaceHolder: "Lebar",
    imageResizeButtonText: "Mengubah saiz imej",
    insertFileDialogCancelButton: "Batal",
    insertFileDialogOKButton: "Masukkan fail",
    insertFileNameLabel: "Nama fail",
    insertFileNamePlaceHolder: "Nama fail...",
    insertFileTitle: "Masukkan fail",
    insertFileURLLabel: "URL fail",
    insertFileURLPlaceHolder: "URL fail...",
    languageMenuTitle: "Tukar Bahasa",
    linkCreateDialogCancelButton: "Batal",
    linkCreateDialogMenuHeader: "Pilih jenis pautan",
    linkCreateDialogOKButton: "Masukkan pautan",
    linkCreateDialogTitle: "Masukkan pautan",
    linkCreateTitle: "Masukkan pautan",
    linkRemoveTitle: "Mengalih keluar pautan",
    linkTypeDocumentHeader: "Pautan ke dokumen atau fail lain",
    linkTypeDocumentInfo: "<h2>Tidak pasti apa yang perlu dimasukkan ke dalam kotak di atas?<\/h2><ol>    <li>Memastikan fail yang telah dimuat naik ke laman web anda.<\/li>    <li>Membuka fail gambar dalam pelayar anda.<\/li>    <li>Copy URL fail dari bar alamat penyemak imbas anda dan paste ke dalam kotak di atas.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokumen atau fail lain",
    linkTypeDocumentLocationLabel: "Lokasi:",
    linkTypeDocumentLocationPlaceHolder: "Masukkan URL",
    linkTypeDocumentNewWindowHeader: "Tetingkap baru",
    linkTypeDocumentNewWindowLabel: "Semak kotak ini mempunyai fail yang dibuka di dalam tetingkap\/tab browser baru.",
    linkTypeEmailHeader: "Link ke alamat e-mel",
    linkTypeEmailLabel: "Alamat e-mel",
    linkTypeEmailSubjectLabel: "Subjek (pilihan):",
    linkTypeEmailSubjectPlaceHolder: "Masukkan subjek",
    linkTypeEmailToLabel: "E-mel:",
    linkTypeEmailToPlaceHolder: "Masukkan alamat e-mel",
    linkTypeExternalHeader: "Pautan ke halaman di laman web lain",
    linkTypeExternalInfo: "<h2>Tidak pasti apa yang perlu dimasukkan ke dalam kotak di atas?<\/h2><ol>    <li>Mencari laman web yang anda mahu pautkan ke.<\/li>    <li>Salin alamat web dari bar alamat penyemak imbas anda dan paste ke dalam kotak di atas.<\/li><\/ol>",
    linkTypeExternalLabel: "Laman di laman web lain",
    linkTypeExternalLocationLabel: "Lokasi:",
    linkTypeExternalLocationPlaceHolder: "Masukkan URL",
    linkTypeExternalNewWindowHeader: "Tetingkap baru",
    linkTypeExternalNewWindowLabel: "Semak kotak ini mempunyai link yang dibuka di dalam tetingkap\/tab browser baru.",
    linkTypeInternalHeader: "Pautan ke halaman di laman web ini",
    linkTypeInternalInfo: "<h2>Tidak pasti apa yang perlu dimasukkan ke dalam kotak di atas?<\/h2><ol>    <li>Mencari halaman pautan laman web ini.<\/li>    <li>Salin alamat web dari bar tidak termasuk \"{{domain}}\" alamat penyemak imbas anda dan paste ke dalam kotak di atas.<\/li><\/ol>",
    linkTypeInternalLabel: "Laman laman web ini",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Masukkan URI yang",
    linkTypeInternalNewWindowHeader: "Tetingkap baru",
    linkTypeInternalNewWindowLabel: "Semak kotak ini mempunyai link yang dibuka di dalam tetingkap\/tab browser baru.",
    listOrderedTitle: "Senarai disusun",
    listUnorderedTitle: "Senarai",
    logoTitle: "Ketahui lebih lanjut mengenai haiwan liar WYSIWYG Editor",
    loremIpsumTitle: "Memasukkan teks yang bodoh untuk ujian",
    navigateAway: "\nTidak ada yang disimpan perubahan pada Laman ini. \nJika anda meninggalkan halaman ini anda akan kehilangan perubahan anda tidak disimpan",
    pasteDialogCancelButton: "Batal",
    pasteDialogFormattedCleaned: "Diformat &amp; dibersihkan",
    pasteDialogFormattedUnclean: "Diformat kotor",
    pasteDialogOKButton: "Masukkan",
    pasteDialogPlain: "Teks biasa",
    pasteDialogSource: "Kod sumber",
    pasteDialogTitle: "Tampal",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Gagal mendapatkan semula semakan",
    revisionsApplyButtonDialogCancelButton: "Batal",
    revisionsApplyButtonDialogOKButton: "Gulung balik",
    revisionsApplyButtonDialogText: "Gulung balik pengesahan",
    revisionsApplyButtonDialogTitle: "Gulung balik pengesahan",
    revisionsApplyButtonText: "Gulung balik",
    revisionsApplyButtonTitle: "Gulung balik",
    revisionsApplyDialogContent: "Ini akan menggantikan kandungan semasa dengan semakan terpilih.<br>Kandungan semasa akan ditambah sebagai semakan, dan akan kelihatan dalam senarai semakan bagi blok ini.",
    revisionsButtonCurrent: "Semasa",
    revisionsButtonViewDiffText: "Perbezaan",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Dicipta",
    revisionsDialogCancelButton: "Batal",
    revisionsDialogTitle: "Semakan kandungan paparan",
    revisionsDiffButtonDialogCancelButton: "Tutup",
    revisionsDiffButtonDialogTitle: "Perbezaan pandangan",
    revisionsDiffButtonText: "Perbezaan pandangan",
    revisionsDiffButtonTitle: "Perbezaan pandangan",
    revisionsLoading: "Memuatkan semakan...",
    revisionsNone: "Tiada semakan bagi elemen ini",
    revisionsPreviewButtonText: "Pratonton",
    revisionsPreviewButtonTitle: "Pratonton",
    revisionsText: "Semakan",
    revisionsTextEmpty: "Tiada pindaan",
    revisionsTitle: "",
    rfmClose: "Tutup",
    rfmContinue: "Terus",
    rfmDelete: "Menghapuskan",
    rfmDownload: "Muat turun",
    rfmFileActions: "Tindakan-tindakan",
    rfmFileModificationTime: "Kali",
    rfmFileName: "Nama",
    rfmFileSize: "Saiz",
    rfmFileType: "Jenis",
    rfmFilteredTotal: "Yang menunjukkan {{start}} untuk {{end}} fail {{filteredTotal}}",
    rfmFirst: "Pertama",
    rfmHeadingDirectories: "Direktori",
    rfmHeadingSearch: "Cari",
    rfmHeadingTags: "Tag",
    rfmHeadingUpload: "Muat naik",
    rfmInsert: "Masukkan",
    rfmLast: "Terakhir",
    rfmSearch: "Pergi",
    rfmTagDocument: "Dokumen",
    rfmTagImage: "Imej",
    rfmTotal: ", ditapis daripada {{total}}",
    rfmUpload: "Muat naik",
    rfmUploadBrowse: "Semak seimbas",
    rfmUploadDrop: "Drop fail-fail di sini",
    rfmUploadFileRemove: "Alih Keluar",
    rfmUploadOr: "atau",
    rfmView: "Pandangan",
    saveJsonFail: "Gagal untuk menyelamatkan block(s) kandungan {{failed}}",
    saveJsonSaved: "Berjaya disimpan block(s) kandungan {{saved}}.",
    saveNotConfigured: "Simpan tidak dikonfigurasi, atau yang Kurang Upaya.",
    saveRestFail: "Gagal untuk menyelamatkan block(s) kandungan {{failed}}.",
    saveRestPartial: "Disimpan {{saved}} daripada blok kandungan {{failed}}.",
    saveRestSaved: "Berjaya disimpan block(s) kandungan {{saved}}.",
    saveTitle: "Menyimpan kandungan",
    snippetMenuTitle: "Coretan",
    specialCharactersArrows: "Anak panah",
    specialCharactersDialogOKButton: "ok",
    specialCharactersDialogTitle: "Masukkan aksara khas",
    specialCharactersGreekAlphabet: "Abjad Greek",
    specialCharactersHelp: "Klik aksara khas untuk menambahkannya. Klik \"OK\" apabila dilakukan untuk menutup dialog ini",
    specialCharactersMathematics: "Matematik",
    specialCharactersSymbols: "Simbol-simbol",
    specialCharactersTitle: "Masukkan aksara khas",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} aksara melebihi had",
    statisticsButtonCharacterRemaining: "watak-watak {{charactersRemaining}} yang tinggal",
    statisticsButtonCharacters: "watak-watak {{characters}}",
    statisticsDialogCharactersOverLimit: "{{characters}} aksara, {{charactersRemaining}} melebihi had yang disyorkan",
    statisticsDialogCharactersRemaining: "aksara {{characters}}, {{charactersRemaining}} baki",
    statisticsDialogNotTruncated: "Kandungan tidak boleh dipendekkan",
    statisticsDialogOKButton: "ok",
    statisticsDialogSentence: "hukuman {{sentences}}",
    statisticsDialogSentences: "ayat {{sentences}}",
    statisticsDialogTitle: "Statistik kandungan",
    statisticsDialogTruncated: "Kandungan yang mengandungi lebih daripada watak-watak {{limit}} dan mungkin dipendekkan",
    statisticsDialogWord: "perkataan {{words}}",
    statisticsDialogWords: "kata-kata {{words}}",
    statisticsTitle: "Klik untuk melihat statistik",
    tableCreateTitle: "Mencipta jadual",
    tableDeleteColumnTitle: "Hapuskan kolum Jadual",
    tableDeleteRowTitle: "Menghapuskan jadual row",
    tableInsertColumnTitle: "Masukkan Jadual Ruang",
    tableInsertRowTitle: "Masukkan Jadual row",
    tableMergeCellsTitle: "Menggabungkan sel-sel Jadual",
    tableSplitCellsTitle: "Sel-sel Jadual Split",
    tagMenuTagAddress: "Alamat",
    tagMenuTagDiv: "Bhg.",
    tagMenuTagH1: "Tajuk 1",
    tagMenuTagH2: "Tajuk 2",
    tagMenuTagH3: "Tajuk 3",
    tagMenuTagH4: "Tajuk 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Perenggan",
    tagMenuTagPre: "Terlebih dahulu diformat",
    tagMenuTitle: "Perubahan unsur gaya",
    tagTreeElementLink: "Pilih elemen {{element}}",
    tagTreeElementTitle: "Klik untuk memilih kandungan elemen \"{{element}}\"",
    tagTreeRoot: "akar",
    tagTreeRootLink: "Pilih semua kandungan yang boleh diedit",
    tagTreeRootTitle: "Klik untuk memilih semua kandungan yang boleh diedit",
    textBlockQuoteTitle: "Quote blok",
    textBoldTitle: "Tebal",
    textItalicTitle: "Huruf",
    textSizeDecreaseTitle: "Kurangkan saiz teks",
    textSizeIncreaseTitle: "Besarkan saiz teks",
    textStrikeTitle: "Menyerang melalui",
    textSubTitle: "Skrip sub",
    textSuperTitle: "Script Super",
    textUnderlineTitle: "Gariskan",
    unsavedEditWarningText: "Tidak ada yang disimpan perubahan pada Laman ini",
    viewSourceDialogCancelButton: "Tutup",
    viewSourceDialogOKButton: "Menggunakan kod sumber",
    viewSourceDialogTitle: "Kod kandungan sumber",
    viewSourceTitle: "Pemandangan\/edit kod sumber"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ms.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/mww.js
/**
 * @fileOverview Hmong Daw strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('mww', 'Hmoob Daw', {
    alignCenterTitle: "Dlhos ntawv chaw",
    alignJustifyTitle: "Dlhos ntawv nyeem hais kom ncaj ncees",
    alignLeftTitle: "Dlhos ntawv nyeem laug",
    alignRightTitle: "Dlhos tau phau ntawv txoj cai",
    cancelDialogCancelButton: "Tseem Editing",
    cancelDialogContent: "Koj puas paub hais tias koj xav rho editing? Txhua yam kev hloov yuav tsum poob lawm!",
    cancelDialogOKButton: "Ncua tseg Editing",
    cancelDialogTitle: "Ncua tseg Editing",
    cancelTitle: "Ncua tseg editing",
    classMenuTitle: "Style picker",
    clearFormattingTitle: "Luaj formatting",
    clickButtonToEditText: "Kho kom raug",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Tsis siv neeg",
    colorMenuBasicBlack: "Dub nciab",
    colorMenuBasicBlue: "Xia",
    colorMenuBasicGreen: "Ntsuab",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Txiv kab ntxwv",
    colorMenuBasicPurple: "Ntshav",
    colorMenuBasicRed: "Liab",
    colorMenuBasicTitle: "Hloov cov phau ntawv muaj xim",
    colorMenuBasicWhite: "Dawb",
    dockToElementTitle: "Ntsaws cov kab nrib\/undock editor yuav caij",
    dockToScreenTitle: "Ntsaws cov kab nrib\/undock editor yuav npo",
    embedDialogCancelButton: "Ncua tseg",
    embedDialogOKButton: "Embed kwv",
    embedDialogTabCode: "Embed Code",
    embedDialogTabCodeContent: "Paste koj qhov embed code hauv cov ntawv nyeem qhov nram qab no:",
    embedDialogTabPreview: "Saib ua ntej",
    embedDialogTabPreviewContent: "Tus saib ua ntej ntawm koj cov kwv embedded yog dlhau theem teev nram qab no:",
    embedDialogTitle: "Embed kwv",
    embedTitle: "Embed kwv",
    errorUINoName: "UI \"{{ui}}\" yog invalid (yuav tsum muaj ib lub npe khoom)",
    errorUINotObject: "UI \"{{ui}}\" yog invalid (yuav tsum tau ib lub nruas)",
    errorUIOverride: "UI \"{{name}}\" sau lawm twb tau npe, thiab yuav tsum overwritten",
    fileManagerDialogTitle: "Cov ntaub ntawv tus thawj tswj",
    fileManagerTitle: "Cov ntaub ntawv tus thawj tswj",
    floatLeftTitle: "Dlhos duab mus rau sab laug",
    floatNoneTitle: "Tshem cov duab dlhos",
    floatRightTitle: "Dlhos duab rau ntawm sab xis",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Comic tsis",
    fontFamilyMenuFontCourier: "Courier tshiab",
    fontFamilyMenuFontDefault: "Default Font",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Tej yam",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Lub sij hawm Roman tshiab",
    fontFamilyMenuTitle: "Xaiv cov koj font",
    guidesTitle: "Qhia tus ntawm cov caij",
    historyRedoTitle: "Redo",
    historyUndoTitle: "Undo",
    hrCreateTitle: "Ntxig txoj cai",
    imageResizeButtonDialogCancelButton: "Ncua tseg",
    imageResizeButtonDialogHeight: "Duab qhov siab",
    imageResizeButtonDialogHeightPlaceHolder: "Qhov siab",
    imageResizeButtonDialogOKButton: "Resize",
    imageResizeButtonDialogTitle: "Resize duab",
    imageResizeButtonDialogWidth: "Duab dav",
    imageResizeButtonDialogWidthPlaceHolder: "Dav",
    imageResizeButtonText: "Resize duab",
    insertFileDialogCancelButton: "Ncua tseg",
    insertFileDialogOKButton: "Ntxig tej ntaub ntawv",
    insertFileNameLabel: "Cov ntaub ntawv npe",
    insertFileNamePlaceHolder: "Tej ntaub ntawv lub npe...",
    insertFileTitle: "Ntxig tej ntaub ntawv",
    insertFileURLLabel: "Cov ntaub ntawv URL",
    insertFileURLPlaceHolder: "URL tej ntaub ntawv...",
    languageMenuTitle: "Hloov cov lus",
    linkCreateDialogCancelButton: "Ncua tseg",
    linkCreateDialogMenuHeader: "Xaiv ib qhov txuas yam",
    linkCreateDialogOKButton: "Ntxig Link",
    linkCreateDialogTitle: "Ntxig Link",
    linkCreateTitle: "Ntxig Link",
    linkRemoveTitle: "Tshem cov Link",
    linkTypeDocumentHeader: "Txuas mus rau ib daim ntawv los yog lwm yam ntaub ntawv",
    linkTypeDocumentInfo: "<h2>Tsis paub hais tias yuav muab tso rau hauv lub npov saum toj no li cas?<\/h2><ol>    <li>Xyuas cov ntaub ntawv twb tau uploaded rau koj lub website.<\/li>    <li>Qhib uploaded ntawv nyob rau hauv koj tus browser.<\/li>    <li>Luam cov ntaub ntawv URL ntawm koj tus browser chaw bar thiab paste rau hauv lub npov saum toj no.<\/li><\/ol>",
    linkTypeDocumentLabel: "Daim ntawv los yog lwm yam ntaub ntawv",
    linkTypeDocumentLocationLabel: "Qhov chaw nyob:",
    linkTypeDocumentLocationPlaceHolder: "Sau ib qhov URL",
    linkTypeDocumentNewWindowHeader: "Qhov rai uas tshiab",
    linkTypeDocumentNewWindowLabel: "Khij lub npov no muaj cov ntaub ntawv qhib rau ib tug tshiab browser qhov rai\/tab.",
    linkTypeEmailHeader: "Txuas mus rau tus email chaw nyob",
    linkTypeEmailLabel: "Email chaw nyob",
    linkTypeEmailSubjectLabel: "Kawm (optional):",
    linkTypeEmailSubjectPlaceHolder: "Sau ntawv",
    linkTypeEmailToLabel: "Email:",
    linkTypeEmailToPlaceHolder: "Sau email chaw nyob",
    linkTypeExternalHeader: "Txuas mus rau ib sab ntawm lwm lub website",
    linkTypeExternalInfo: "<h2>Tsis paub hais tias yuav muab tso rau hauv lub npov saum toj no li cas?<\/h2><ol>    <li>Nrhiav cov nplooj hauv web uas koj xav tau kev txuas mus rau.<\/li>    <li>Luam cov qhov Web site nyob ntawm koj tus browser chaw bar thiab paste rau hauv lub npov saum toj no.<\/li><\/ol>",
    linkTypeExternalLabel: "Nplooj ntawv nyob rau lwm lub website",
    linkTypeExternalLocationLabel: "Qhov chaw nyob:",
    linkTypeExternalLocationPlaceHolder: "Sau ib qhov URL",
    linkTypeExternalNewWindowHeader: "Qhov rai uas tshiab",
    linkTypeExternalNewWindowLabel: "Khij lub npov no yuav muaj qhov txuas qhib rau ib tug tshiab browser qhov rai\/tab.",
    linkTypeInternalHeader: "Txuas mus rau ib sab rau cov website no",
    linkTypeInternalInfo: "<h2>Tsis paub hais tias yuav muab tso rau hauv lub npov saum toj no li cas?<\/h2><ol>    <li>Nrhiav cov nplooj ntawv rau qhov chaw txuas mus.<\/li>    <li>Luam cov qhov Web site nyob ntawm qhov chaw nyob koj tus browser bar, excluding \"{{domain}}\" thiab paste rau hauv lub npov saum toj no.<\/li><\/ol>",
    linkTypeInternalLabel: "Nplooj ntawv rau qhov website",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Ntaus ib PAS",
    linkTypeInternalNewWindowHeader: "Qhov rai uas tshiab",
    linkTypeInternalNewWindowLabel: "Khij lub npov no yuav muaj qhov txuas qhib rau ib tug tshiab browser qhov rai\/tab.",
    listOrderedTitle: "Sau kom",
    listUnorderedTitle: "Unordered sau",
    logoTitle: "Kawm ntxiv txog tus Raptor WYSIWYG Editor",
    loremIpsumTitle: "Ntxig dummy ntawv rau qhov kev tshuaj ntsuam txog",
    navigateAway: "\nMuaj cov unsaved kev hloov rau ntawm nplooj ntawv no. \nYog koj tus next ntawm nplooj ntawv no koj yuav poob koj cov kev hloov unsaved",
    pasteDialogCancelButton: "Ncua tseg",
    pasteDialogFormattedCleaned: "Formatted &amp; ntxuav",
    pasteDialogFormattedUnclean: "Formatted tsis huv",
    pasteDialogOKButton: "Ntxig",
    pasteDialogPlain: "Cov ntawv nyeem lub tiaj",
    pasteDialogSource: "Qhov chaws",
    pasteDialogTitle: "Muab tshuaj",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Tejyam uas retrieve koos",
    revisionsApplyButtonDialogCancelButton: "Ncua tseg",
    revisionsApplyButtonDialogOKButton: "Rollback",
    revisionsApplyButtonDialogText: "Rollback kabke",
    revisionsApplyButtonDialogTitle: "Rollback kabke",
    revisionsApplyButtonText: "Rollback",
    revisionsApplyButtonTitle: "Rollback",
    revisionsApplyDialogContent: "Qhov no yuav hloov cov lus qhia tam sim no nrog rau qhov kho nqi lus xaiv.<br>Cov lus qhia tam sim no yuav muab ntxiv ua tus kho nqi lus, thiab yuav pom nyob hauv daim ntawv muab rau lub nkev no.",
    revisionsButtonCurrent: "Tam sim no",
    revisionsButtonViewDiffText: "Txawv",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Tsim",
    revisionsDialogCancelButton: "Ncua tseg",
    revisionsDialogTitle: "Saib cov koos",
    revisionsDiffButtonDialogCancelButton: "Kaw",
    revisionsDiffButtonDialogTitle: "Saib txawv",
    revisionsDiffButtonText: "Saib txawv",
    revisionsDiffButtonTitle: "Saib txawv",
    revisionsLoading: "Chaw thau khoom koos...",
    revisionsNone: "Tsis muab rau cov caij no",
    revisionsPreviewButtonText: "Saib ua ntej",
    revisionsPreviewButtonTitle: "Saib ua ntej",
    revisionsText: "Koos",
    revisionsTextEmpty: "Tsis muaj koos",
    revisionsTitle: "",
    rfmClose: "Kaw",
    rfmContinue: "Ntxiv mus",
    rfmDelete: "Rho tawm",
    rfmDownload: "Download tau",
    rfmFileActions: "Tej yam ua tau",
    rfmFileModificationTime: "Hloov",
    rfmFileName: "Lub npe",
    rfmFileSize: "Loj",
    rfmFileType: "Hom",
    rfmFilteredTotal: "Qhia {{start}} {{end}} ntawm cov ntaub ntawv {{filteredTotal}}",
    rfmFirst: "Ua ntej",
    rfmHeadingDirectories: "Wage",
    rfmHeadingSearch: "Kev nrhiav",
    rfmHeadingTags: "Cim npe",
    rfmHeadingUpload: "Upload",
    rfmInsert: "Ntxig",
    rfmLast: "Kav",
    rfmSearch: "Mus",
    rfmTagDocument: "Daim ntawv",
    rfmTagImage: "Duab",
    rfmTotal: ", filtered ntawm {{total}}",
    rfmUpload: "Upload",
    rfmUploadBrowse: "Xauj",
    rfmUploadDrop: "Xa cov ntaub ntawv ntawm no",
    rfmUploadFileRemove: "Tshem tawm",
    rfmUploadOr: "los sis",
    rfmView: "Saib",
    saveJsonFail: "Tejyam uas muaj tseg tau qha block(s) {{failed}}",
    saveJsonSaved: "Block(s) {{saved}} qha rua ntse.",
    saveNotConfigured: "Txuag tau tsis tau configured, los yog neeg xiam.",
    saveRestFail: "Ua tsis tau tejyam txuag cov block(s) {{failed}}.",
    saveRestPartial: "Rua {{saved}} tawm plaws blocks {{failed}}.",
    saveRestSaved: "Block(s) {{saved}} qha rua ntse.",
    saveTitle: "Tseg tau cov ntsiab lus",
    snippetMenuTitle: "Snippets",
    specialCharactersArrows: "Sub",
    specialCharactersDialogOKButton: "ua li",
    specialCharactersDialogTitle: "Ntxig cim tshwj xeeb",
    specialCharactersGreekAlphabet: "Greek niam ntawv",
    specialCharactersHelp: "Nyem ib cim tshwj xeeb rau nws ntxiv. Nyem qhov \"Ywm\" thaum ua kaw no dialog",
    specialCharactersMathematics: "Kev kawm txog zauv",
    specialCharactersSymbols: "Cim",
    specialCharactersTitle: "Ntxig ib tus cim tshwj xeeb",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} cim pem txwv",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} cim seem",
    statisticsButtonCharacters: "{{characters}} cim",
    statisticsDialogCharactersOverLimit: "{{characters}} cim, {{charactersRemaining}} ntau tshaj qhov pom zoo",
    statisticsDialogCharactersRemaining: "{{characters}} cim, {{charactersRemaining}} seem",
    statisticsDialogNotTruncated: "Cov ntawv yuav tsis raug truncated",
    statisticsDialogOKButton: "ua li",
    statisticsDialogSentence: "{{sentences}} kab lus",
    statisticsDialogSentences: "{{sentences}} ua ke",
    statisticsDialogTitle: "Cov txheeb cais",
    statisticsDialogTruncated: "Ntsiab lus ntawv muaj ntau dua {{limit}} cim thiab tej zaum yuav tau truncated",
    statisticsDialogWord: "{{words}} lo lus",
    statisticsDialogWords: "{{words}} lo lus",
    statisticsTitle: "Nyem qhov mus saib txheeb cais",
    tableCreateTitle: "Ua tau ib cov lus",
    tableDeleteColumnTitle: "Rho tawm rooj sab",
    tableDeleteRowTitle: "Rho tawm rooj leej",
    tableInsertColumnTitle: "Ntxig rooj sab",
    tableInsertRowTitle: "Ntxig rooj leej",
    tableMergeCellsTitle: "Merge cov lus hlwb",
    tableSplitCellsTitle: "Phua lub rooj hlwb",
    tagMenuTagAddress: "Chaw nyob",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Nqe 1",
    tagMenuTagH2: "Nqe 2",
    tagMenuTagH3: "Nqe lus hais txog 3",
    tagMenuTagH4: "Nqe 4",
    tagMenuTagNA: "TSIS TXUAM NROG",
    tagMenuTagP: "Pawg lus",
    tagMenuTagPre: "Tos formatted",
    tagMenuTitle: "Hloov cov caij style",
    tagTreeElementLink: "Xaiv {{element}} caij",
    tagTreeElementTitle: "Nyem qhov mus xaiv tus txheem ntawm lub \"{{element}}\" caij",
    tagTreeRoot: "hauv paus",
    tagTreeRootLink: "Xaiv cov ntsiab lus editable",
    tagTreeRootTitle: "Nyem qhov xaiv tag nrho cov ntawv editable",
    textBlockQuoteTitle: "Thaiv tsocai",
    textBoldTitle: "Ntawv tuab",
    textItalicTitle: "Ntawv qaij",
    textSizeDecreaseTitle: "Txo tau raws li cov ntawv nyeem",
    textSizeIncreaseTitle: "Ua kom raws li cov ntawv nyeem",
    textStrikeTitle: "Thos mus txog",
    textSubTitle: "Cov tsab ntawv ncua",
    textSuperTitle: "Super-tsab ntawv",
    textUnderlineTitle: "Kos kab hauv qab",
    unsavedEditWarningText: "Muaj cov unsaved kev hloov rau ntawm nplooj ntawv no",
    viewSourceDialogCancelButton: "Kaw",
    viewSourceDialogOKButton: "Siv qhov chaws",
    viewSourceDialogTitle: "Cov khawb hauv qhov chaws",
    viewSourceTitle: "Saib\/edit qhov chaws"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/mww.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/nl.js
/**
 * @fileOverview Dutch strings file.
 * @license http://www.raptor-editor.com/license
 *
 * @author Ruben Vincenten, rubenvincenten@gmail.com, https://github.com/rubenvincenten
 */
extendLocale('nl', 'Nederlands', {
    alignCenterTitle: "Centreren",
    alignJustifyTitle: "Uitlijnen aan beide kanten",
    alignLeftTitle: "Links uitlijnen",
    alignRightTitle: "Rechts Uitlijnen",
    cancelDialogCancelButton: "Sluiten",
    cancelDialogContent: "Weet u zeker dat u wilt stoppen met aanpassen? Alle aanpassingen zullen verloren gaan!",
    cancelDialogOKButton: false,
    cancelDialogTitle: "Cancel Editing",
    cancelTitle: "Cancel editing",
    classMenuTitle: "Stijl picker",
    clearFormattingTitle: "Verwijder opmaak",
    clickButtonToEditPluginButton: "Klik hier voor het beginnen met bewerken",
    clickButtonToEditText: "Bewerken",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatic",
    colorMenuBasicBlack: "Black",
    colorMenuBasicBlue: "Blue",
    colorMenuBasicGreen: "Green",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Purple",
    colorMenuBasicRed: "Red",
    colorMenuBasicTitle: "Change text color",
    colorMenuBasicWhite: "White",
    dockToElementTitle: "Dock editor to element",
    dockToScreenTitle: "Dock editor to screen",
    embedDialogCancelButton: "Annuleren",
    embedDialogOKButton: "Object insluiten",
    embedDialogTabCode: "Embed-Code",
    embedDialogTabCodeContent: "Plak uw embed-code in het tekstgebied hieronder:",
    embedDialogTabPreview: "Voorbeeld",
    embedDialogTabPreviewContent: "Hieronder wordt een voorbeeld van uw ingesloten object weergegeven:",
    embedDialogTitle: "Object insluiten",
    embedTitle: "Object insluiten",
    errorPluginNoName: "Plugin \"{{plugin}}\" is invalid (must have a name property)",
    errorPluginNotObject: "Plugin \"{{plugin}}\" is invalid (must be an object)",
    errorPluginOverride: "Plugin \"{{name}}\" has already been registered, and will be overwritten",
    errorUINoName: "UI \"{{ui}}\" is invalid (must have a name property)",
    errorUINotObject: "UI \"{{ui}}\" is invalid (must be an object)",
    errorUIOverride: "UI \"{{name}}\" has already been registered, and will be overwritten",
    fileManagerDialogTitle: "Bestandsbeheer",
    fileManagerTitle: "Bestandsbeheer",
    floatLeftTitle: "Tekst omsluiten rechts van afbeelding",
    floatNoneTitle: "Remove image align",
    floatRightTitle: "Tekst omsluiten links van afbeelding",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Comic zonder",
    fontFamilyMenuFontCourier: "Courier nieuwe",
    fontFamilyMenuFontDefault: "Standaardlettertype",
    fontFamilyMenuFontGeorgia: "Georgië",
    fontFamilyMenuFontImpact: "Effect",
    fontFamilyMenuFontPalatino: "Palts",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Kies uw lettertype",
    guidesTitle: "Rooster Tonen (Onderwatermodus)",
    historyRedoTitle: "Redo",
    historyUndoTitle: "Undo",
    hrCreateTitle: "Horizontale lijn invoegen",
    imageResizeButtonDialogCancelButton: "Annuleren",
    imageResizeButtonDialogHeight: "Afbeeldingshoogte",
    imageResizeButtonDialogHeightPlaceHolder: "Hoogte",
    imageResizeButtonDialogOKButton: "Vergroten\/verkleinen",
    imageResizeButtonDialogTitle: "Resize beeld",
    imageResizeButtonDialogWidth: "Breedte van afbeelding",
    imageResizeButtonDialogWidthPlaceHolder: "Breedte",
    imageResizeButtonText: "Resize beeld",
    insertFileDialogCancelButton: "Annuleren",
    insertFileDialogOKButton: "Bestand invoegen",
    insertFileNameLabel: "Bestandsnaam",
    insertFileNamePlaceHolder: "De naam van het bestand...",
    insertFileTitle: "Bestand invoegen",
    insertFileURLLabel: "Bestand URL",
    insertFileURLPlaceHolder: "Bestand URL...",
    languageMenuTitle: "Taal wijzigen",
    linkCreateDialogCancelButton: "Annuleren",
    linkCreateDialogMenuHeader: "Kies een koppelingstype",
    linkCreateDialogOKButton: "Koppeling invoegen",
    linkCreateDialogTitle: "Koppeling invoegen",
    linkCreateTitle: "Koppeling invoegen",
    linkDialogCancelButton: "Annuleren",
    linkDialogMenuHeader: "Kies het type link:",
    linkDialogOKButton: "Link Invoegen",
    linkDialogTitle: "Link Invoegen",
    linkRemoveTitle: "Koppeling verwijderen",
    linkTypeDocumentHeader: "Een koppeling naar een document of een ander bestand",
    linkTypeDocumentInfo: "<h2>Niet zeker wat te zetten in het vak hierboven?<\/h2><ol>    <li>Zorgen dat het bestand is geüpload naar uw website.<\/li>    <li>Open het ge-uploade bestand in uw browser.<\/li>    <li>Kopieer het bestand URL van adresbalk van uw browser en plak deze in bovenstaand vak.<\/li><\/ol>",
    linkTypeDocumentLabel: "Document of een ander bestand",
    linkTypeDocumentLocationLabel: "Locatie:",
    linkTypeDocumentLocationPlaceHolder: "Voer een URL",
    linkTypeDocumentNewWindowHeader: "Nieuw venster",
    linkTypeDocumentNewWindowLabel: "Schakel dit selectievakje in als u wilt dat het bestand opent in een nieuw browser venster\/een lusje.",
    linkTypeEmailHeader: "Link naar een emailadres",
    linkTypeEmailLabel: "E-mail adres",
    linkTypeEmailSubjectLabel: "Onderwerp (optioneel):",
    linkTypeEmailSubjectPlaceHolder: "Voeg het onderwerp in",
    linkTypeEmailToLabel: "E-mail:",
    linkTypeEmailToPlaceHolder: "Voeg het e-mail adres in",
    linkTypeExternalHeader: "Link to a page on another website",
    linkTypeExternalInfo: "<h2>Onzeker over wat er in het veld moet staan hierboven?<\/h2><ol>    <li>Vind de pagina op het internet waar u naartoe wilt linken.<\/li>    <li>Kopieër het internetadres uit de adresbalk van uw browser en plak het in het veld hierboven.<\/li><\/ol>",
    linkTypeExternalLabel: "Page on another website",
    linkTypeExternalLocationLabel: "Locatie",
    linkTypeExternalLocationPlaceHolder: "Voer een URL",
    linkTypeExternalNewWindowHeader: "Nieuw venster",
    linkTypeExternalNewWindowLabel: "Vink dit aan om de link te laten opnenen in een nieuw browser venster.",
    linkTypeInternalHeader: "Link to a page on this website",
    linkTypeInternalInfo: "<h2>Onzeker over wat er in het veld moet staan hierboven?<\/h2><ol>    <li>Vind de pagina op het internet waar u naartoe wilt linken.<\/li>    <li>Copy the web address from your browser's address bar, excluding \"{{domain}}\" and paste it into the box above.<\/li><\/ol>",
    linkTypeInternalLabel: "Page on this website",
    linkTypeInternalLocationLabel: "Locatie",
    linkTypeInternalLocationPlaceHolder: "Voer een URI",
    linkTypeInternalNewWindowHeader: "Nieuw venster",
    linkTypeInternalNewWindowLabel: "Vink dit aan om de link te laten opnenen in een nieuw browser venster.",
    listOrderedTitle: "Genummerde lijst",
    listUnorderedTitle: "Lijst Van Opsommingstekens",
    logoTitle: "Meer leren over Rapor WYSIWYG Editor",
    loremIpsumTitle: "Dummy tekst voor het testen van invoegen",
    navigateAway: "\nEr zijn opgeslagen wijzigingen op deze pagina. \nAls u deze pagina verlaat en verder navigeert verliest u uw niet-opgeslagen wijzigingen",
    pasteDialogCancelButton: "Annuleren",
    pasteDialogFormattedCleaned: "Opgemaakt &amp; gereinigd",
    pasteDialogFormattedUnclean: "Opgemaakt onrein",
    pasteDialogOKButton: "Invoegen",
    pasteDialogPlain: "Tekst zonder opmaak",
    pasteDialogSource: "Broncode",
    pasteDialogTitle: "Plakken",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Fout bij ophalen van revisies",
    revisionsApplyButtonDialogCancelButton: "Annuleren",
    revisionsApplyButtonDialogOKButton: "Terugdraaien",
    revisionsApplyButtonDialogText: "Terugdraaien bevestiging",
    revisionsApplyButtonDialogTitle: "Terugdraaien bevestiging",
    revisionsApplyButtonText: "Terugdraaien",
    revisionsApplyButtonTitle: "Terugdraaien",
    revisionsApplyDialogContent: "Dit zal de huidige inhoud vervangen door de geselecteerde revisie.<br>De huidige inhoud zal worden toegevoegd als een herziening, en zullen zichtbaar zijn in de lijst wijzigingen voor dit blok.",
    revisionsButtonCurrent: "Huidige",
    revisionsButtonViewDiffText: "Verschillen",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Gemaakt",
    revisionsDialogCancelButton: "Annuleren",
    revisionsDialogTitle: "Weergave inhoud revisies",
    revisionsDiffButtonDialogCancelButton: "Sluiten",
    revisionsDiffButtonDialogTitle: "Weergave verschillen",
    revisionsDiffButtonText: "Weergave verschillen",
    revisionsDiffButtonTitle: "Weergave verschillen",
    revisionsLoading: "Herzieningen bezig met laden...",
    revisionsNone: "Geen revisies van dit element",
    revisionsPreviewButtonText: "Voorbeeld",
    revisionsPreviewButtonTitle: "Voorbeeld",
    revisionsText: "Revisies",
    revisionsTextEmpty: "Geen revisies",
    revisionsTitle: "",
    rfmClose: "Sluiten",
    rfmContinue: "Blijven",
    rfmDelete: "Verwijderen",
    rfmDownload: "Downloaden",
    rfmFileActions: "Acties",
    rfmFileModificationTime: "Gewijzigd",
    rfmFileName: "Naam",
    rfmFileSize: "Grootte",
    rfmFileType: "Type",
    rfmFilteredTotal: "Weergegeven: {{start}} {{end}} {{filteredTotal}} bestanden",
    rfmFirst: "Eerste",
    rfmHeadingDirectories: "Mappen",
    rfmHeadingSearch: "Zoeken",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Upload",
    rfmInsert: "Invoegen",
    rfmLast: "Laatste",
    rfmSearch: "Gaan",
    rfmTagDocument: "Document",
    rfmTagImage: "Afbeelding",
    rfmTotal: ", gefilterd van {{total}}",
    rfmUpload: "Upload",
    rfmUploadBrowse: "Bladeren",
    rfmUploadDrop: "Bestanden hier neerzetten",
    rfmUploadFileRemove: "Verwijderen",
    rfmUploadOr: "of",
    rfmView: "Weergave",
    saveJsonFail: "{{failed}} inhoud scripttags opslaan mislukt",
    saveJsonSaved: "{{saved}} inhoud scripttags opgeslagen.",
    saveNotConfigured: "Opslaan is niet geconfigureerd, of is uitgeschakeld.",
    saveRestFail: "{{failed}} inhoud scripttags opslaan mislukt.",
    saveRestPartial: "{{saved}} uit {{failed}} blokken inhoud opgeslagen.",
    saveRestSaved: "{{saved}} inhoud scripttags opgeslagen.",
    saveTitle: "Save content",
    snippetMenuTitle: "Fragmenten",
    specialCharactersArrows: "Pijlen",
    specialCharactersDialogOKButton: "OK",
    specialCharactersDialogTitle: "Speciale tekens invoegen",
    specialCharactersGreekAlphabet: "Grieks alfabet",
    specialCharactersHelp: "Klik op een speciaal teken toe te voegen. Klik op \"OK\" als je klaar bent om dit dialoogvenster te sluiten",
    specialCharactersMathematics: "Wiskunde",
    specialCharactersSymbols: "Symbolen",
    specialCharactersTitle: "Een speciaal teken invoegen",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} karakters over het limiet",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} karakters over",
    statisticsButtonCharacters: "{{characters}} karakters",
    statisticsDialogCharactersOverLimit: "{{characters}} karakters, {{charactersRemaining}} over het aangeraden limiet",
    statisticsDialogCharactersRemaining: "{{characters}} karakters, {{charactersRemaining}} over",
    statisticsDialogNotTruncated: "Inhoud wordt niet ingekort",
    statisticsDialogOKButton: false,
    statisticsDialogSentence: "{{sentences}} sentence",
    statisticsDialogSentences: "{{sentences}} zinnen",
    statisticsDialogTitle: "Inhoud Statistieken",
    statisticsDialogTruncated: "Inhoud bevat meer dan {{limit}} tekens en kan worden ingekort",
    statisticsDialogWord: "{{words}} woord",
    statisticsDialogWords: "{{words}} woorden",
    statisticsTitle: "Click to view statistics",
    tableCreateTitle: "Create table",
    tableDeleteColumnTitle: "Delete table column",
    tableDeleteRowTitle: "Delete table row",
    tableInsertColumnTitle: "Insert table column",
    tableInsertRowTitle: "Insert table row",
    tableMergeCellsTitle: "Tabelcellen samenvoegen",
    tableSplitCellsTitle: "Tabelcellen splitsen",
    tagMenuTagAddress: "Adres",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Kopniveau&nbsp;1",
    tagMenuTagH2: "Kopniveau&nbsp;2",
    tagMenuTagH3: "Kopniveau&nbsp;23",
    tagMenuTagH4: "Rubriek 4",
    tagMenuTagNA: "n.v.t.",
    tagMenuTagP: "Alinea",
    tagMenuTagPre: "Voorgeformatteerd",
    tagMenuTitle: "Change element style",
    tagTreeElementLink: "Selecteer {{element}} element",
    tagTreeElementTitle: "Klik om de inhoud te selecteren van het \"{{element}}\" element",
    tagTreeRoot: false,
    tagTreeRootLink: "Alle aanpasbare inhoud selecteren",
    tagTreeRootTitle: "Klik om alle bewerkbare inhoud te selecteren",
    textBlockQuoteTitle: "Blokcitaat",
    textBoldTitle: "Vetgedrukt",
    textItalicTitle: "Schuingedrukt",
    textSizeDecreaseTitle: "Tekengrootte",
    textSizeIncreaseTitle: "Tekst vergroten",
    textStrikeTitle: "Doorstrepen",
    textSubTitle: "Subscript",
    textSuperTitle: "Superscript",
    textUnderlineTitle: "Onderstrepen",
    unsavedEditWarningText: "There are unsaved changes on this page",
    viewSourceDialogCancelButton: "Sluiten",
    viewSourceDialogOKButton: "Broncode toepassen code",
    viewSourceDialogTitle: "Content source code",
    viewSourceTitle: "Broncode Bekijken\/Bewerken code"
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/nl.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/no.js
/**
 * @fileOverview Norwegian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('no', 'Norsk', {
    alignCenterTitle: "Midtstill teksten",
    alignJustifyTitle: "Justere tekst rettferdiggjøre",
    alignLeftTitle: "Juster tekst til venstre",
    alignRightTitle: "Juster tekst til høyre",
    cancelDialogCancelButton: "Fortsett redigering",
    cancelDialogContent: "Er du sikker på at du vil avbryte redigeringen? Alle endringer vil gå tapt!",
    cancelDialogOKButton: "Avbryte redigeringen",
    cancelDialogTitle: "Avbryte redigeringen",
    cancelTitle: "Avbryte redigeringen",
    classMenuTitle: "Valg av stil",
    clearFormattingTitle: "Fjern formatering",
    clickButtonToEditText: "Rediger",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatisk",
    colorMenuBasicBlack: "Svart",
    colorMenuBasicBlue: "Blå",
    colorMenuBasicGreen: "Grønn",
    colorMenuBasicGrey: "Grå",
    colorMenuBasicOrange: "Oransje",
    colorMenuBasicPurple: "Lilla",
    colorMenuBasicRed: "Rød",
    colorMenuBasicTitle: "Endre tekstfarge",
    colorMenuBasicWhite: "Hvit",
    dockToElementTitle: "Merke\/oppheve forankringen redaktør element",
    dockToScreenTitle: "Merke\/oppheve forankringen redaktør skjermen",
    embedDialogCancelButton: "Avbryt",
    embedDialogOKButton: "Bygge inn objekt",
    embedDialogTabCode: "Embed-koden",
    embedDialogTabCodeContent: "Lim inn embed koden i tekstområdet under:",
    embedDialogTabPreview: "Forhåndsvisning",
    embedDialogTabPreviewContent: "En forhåndsvisning av innebygde objektet vises nedenfor:",
    embedDialogTitle: "Bygge inn objekt",
    embedTitle: "Bygge inn objekt",
    errorUINoName: "UI \"{{ui}}\" er ugyldig (må ha et name eiendom)",
    errorUINotObject: "UI \"{{ui}}\" er ugyldig (må være et objekt)",
    errorUIOverride: "UI \"{{name}}\" er allerede registrert og vil bli overskrevet",
    fileManagerDialogTitle: "Filbehandling",
    fileManagerTitle: "Filbehandling",
    floatLeftTitle: "Juster bildet til venstre",
    floatNoneTitle: "Fjerne bildet justeres",
    floatRightTitle: "Justere bildet til høyre",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Tegneserie uten",
    fontFamilyMenuFontCourier: "Courier nye",
    fontFamilyMenuFontDefault: "Standardskriften",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Innvirkning",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Ganger nye Roman",
    fontFamilyMenuTitle: "Velg skriften",
    guidesTitle: "Vis element guider",
    historyRedoTitle: "Gjør om",
    historyUndoTitle: "Angre",
    hrCreateTitle: "Sett inn vannrett linje",
    imageResizeButtonDialogCancelButton: "Avbryt",
    imageResizeButtonDialogHeight: "Bildehøyde",
    imageResizeButtonDialogHeightPlaceHolder: "Høyde",
    imageResizeButtonDialogOKButton: "Endre størrelse",
    imageResizeButtonDialogTitle: "Endre størrelsen på bildet",
    imageResizeButtonDialogWidth: "Bildebredde",
    imageResizeButtonDialogWidthPlaceHolder: "Bredde",
    imageResizeButtonText: "Endre størrelsen på bildet",
    insertFileDialogCancelButton: "Avbryt",
    insertFileDialogOKButton: "Sett inn fil",
    insertFileNameLabel: "Filnavn",
    insertFileNamePlaceHolder: "Filnavn...",
    insertFileTitle: "Sett inn fil",
    insertFileURLLabel: "Filen URL",
    insertFileURLPlaceHolder: "Filen URL...",
    languageMenuTitle: "Endre språk",
    linkCreateDialogCancelButton: "Avbryt",
    linkCreateDialogMenuHeader: "Velg koblingstype",
    linkCreateDialogOKButton: "Sett inn kobling",
    linkCreateDialogTitle: "Sett inn kobling",
    linkCreateTitle: "Sett inn kobling",
    linkRemoveTitle: "Fjerne kobling",
    linkTypeDocumentHeader: "Koble til et dokument eller en annen fil",
    linkTypeDocumentInfo: "<h2>Ikke sikker på hva du legger i boksen ovenfor?<\/h2><ol>    <li>Kontroller filen er lastet opp til ditt nettsted.<\/li>    <li>Åpne den opplastede filen i leseren.<\/li>    <li>Kopier filen URL fra adresselinjen i webleseren og lime den inn i boksen ovenfor.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokumenter eller andre filer",
    linkTypeDocumentLocationLabel: "Sted:",
    linkTypeDocumentLocationPlaceHolder: "Angi en URL",
    linkTypeDocumentNewWindowHeader: "Nytt vindu",
    linkTypeDocumentNewWindowLabel: "Merk av i denne boksen hvis filen åpnes i en ny kikker vindu\/fane.",
    linkTypeEmailHeader: "Koble til en e-postadresse",
    linkTypeEmailLabel: "E-postadresse",
    linkTypeEmailSubjectLabel: "Emne (valgfritt):",
    linkTypeEmailSubjectPlaceHolder: "Angi emnet",
    linkTypeEmailToLabel: "Epost:",
    linkTypeEmailToPlaceHolder: "Angi e-postadresse",
    linkTypeExternalHeader: "Kobling til en side på et annet nettsted",
    linkTypeExternalInfo: "<h2>Ikke sikker på hva du legger i boksen ovenfor?<\/h2><ol>    <li>Finn siden på nettet du vil koble til.<\/li>    <li>Kopier webadressen fra adresselinjen i webleseren og lim den inn i boksen ovenfor.<\/li><\/ol>",
    linkTypeExternalLabel: "Side på et annet nettsted",
    linkTypeExternalLocationLabel: "Sted:",
    linkTypeExternalLocationPlaceHolder: "Angi en URL",
    linkTypeExternalNewWindowHeader: "Nytt vindu",
    linkTypeExternalNewWindowLabel: "Merk av i denne boksen hvis du vil at linken åpnes i et nytt nettleservindu vindu\/tab.",
    linkTypeInternalHeader: "Kobling til en side på denne nettsiden",
    linkTypeInternalInfo: "<h2>Ikke sikker på hva du legger i boksen ovenfor?<\/h2><ol>    <li>Finn siden på denne områdekoblingen til.<\/li>    <li>Kopier webadressen fra webleserens adressefeltet, unntatt \"{{domain}}\" og lim den inn i boksen ovenfor.<\/li><\/ol>",
    linkTypeInternalLabel: "Siden på denne nettsiden",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Angi en URI",
    linkTypeInternalNewWindowHeader: "Nytt vindu",
    linkTypeInternalNewWindowLabel: "Merk av i denne boksen hvis du vil at linken åpnes i et nytt nettleservindu vindu\/tab.",
    listOrderedTitle: "Sortert liste",
    listUnorderedTitle: "Sorterte liste",
    logoTitle: "Lær mer om Raptor WYSIWYG-redigeringsprogrammet",
    loremIpsumTitle: "Sette inn dummy tekst for testing",
    navigateAway: "\nDet finnes ulagrede endringer på denne siden. \nHvis du navigerer bort fra denne siden vil du miste din ulagrede endringer",
    pasteDialogCancelButton: "Avbryt",
    pasteDialogFormattedCleaned: "Formatert og renset",
    pasteDialogFormattedUnclean: "Formatert uren",
    pasteDialogOKButton: "Sett inn",
    pasteDialogPlain: "Ren tekst",
    pasteDialogSource: "Kildekoden",
    pasteDialogTitle: "Lim inn",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Kan ikke hente revisjoner",
    revisionsApplyButtonDialogCancelButton: "Avbryt",
    revisionsApplyButtonDialogOKButton: "Tilbakeføring",
    revisionsApplyButtonDialogText: "Tilbakerulling bekreftelse",
    revisionsApplyButtonDialogTitle: "Tilbakerulling bekreftelse",
    revisionsApplyButtonText: "Tilbakeføring",
    revisionsApplyButtonTitle: "Tilbakeføring",
    revisionsApplyDialogContent: "Dette erstatter gjeldende innhold i den valgte revisjonen.<br>Gjeldende innhold vil bli lagt til som en revisjon, og vises i listen endringer for denne blokken.",
    revisionsButtonCurrent: "Gjeldende",
    revisionsButtonViewDiffText: "Forskjeller",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Opprettet",
    revisionsDialogCancelButton: "Avbryt",
    revisionsDialogTitle: "Vis innhold revisjoner",
    revisionsDiffButtonDialogCancelButton: "Lukk",
    revisionsDiffButtonDialogTitle: "Vis forskjeller",
    revisionsDiffButtonText: "Vis forskjeller",
    revisionsDiffButtonTitle: "Vis forskjeller",
    revisionsLoading: "Lasting endringer...",
    revisionsNone: "Ingen endringer i dette elementet",
    revisionsPreviewButtonText: "Forhåndsvisning",
    revisionsPreviewButtonTitle: "Forhåndsvisning",
    revisionsText: "Revisjoner",
    revisionsTextEmpty: "Ingen revisjoner",
    revisionsTitle: "",
    rfmClose: "Lukk",
    rfmContinue: "Fortsett",
    rfmDelete: "Slette",
    rfmDownload: "Last ned",
    rfmFileActions: "Handlinger",
    rfmFileModificationTime: "Endret",
    rfmFileName: "navn",
    rfmFileSize: "Størrelse",
    rfmFileType: "Type",
    rfmFilteredTotal: "Viser {{start}} {{end}} {{filteredTotal}} filer",
    rfmFirst: "Første",
    rfmHeadingDirectories: "Kataloger",
    rfmHeadingSearch: "Søk",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Laste opp",
    rfmInsert: "Sett inn",
    rfmLast: "Siste",
    rfmSearch: "Gå",
    rfmTagDocument: "Dokumentet",
    rfmTagImage: "Bilde",
    rfmTotal: ", filtrert fra {{total}}",
    rfmUpload: "Laste opp",
    rfmUploadBrowse: "Bla gjennom",
    rfmUploadDrop: "Slipp filer her",
    rfmUploadFileRemove: "Fjerne",
    rfmUploadOr: "eller",
    rfmView: "Vis",
    saveJsonFail: "Kan ikke lagre {{failed}} innhold block(s)",
    saveJsonSaved: "Lagret {{saved}} innhold block(s).",
    saveNotConfigured: "Lagre ikke er konfigurert eller er deaktivert.",
    saveRestFail: "Kan ikke lagre {{failed}} innhold block(s).",
    saveRestPartial: "Lagret {{saved}} av {{failed}} blokker.",
    saveRestSaved: "Lagret {{saved}} innhold block(s).",
    saveTitle: "Lagre innholdet",
    snippetMenuTitle: "Tekstutdrag",
    specialCharactersArrows: "Piler",
    specialCharactersDialogOKButton: "ok",
    specialCharactersDialogTitle: "Sette inn spesialtegn",
    specialCharactersGreekAlphabet: "Greske alfabetet",
    specialCharactersHelp: "Klikk Spesialtegn for å legge den. Klikk \"OK\" når du er ferdig for å lukke denne dialogboksen",
    specialCharactersMathematics: "Matematikk",
    specialCharactersSymbols: "Symboler",
    specialCharactersTitle: "Sette inn spesialtegn",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} tegn over grensen",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} tegn gjenstår",
    statisticsButtonCharacters: "{{characters}} tegn",
    statisticsDialogCharactersOverLimit: "{{characters}} tegn, {{charactersRemaining}} over anbefalte grensen",
    statisticsDialogCharactersRemaining: "{{characters}} tegn, {{charactersRemaining}} igjen",
    statisticsDialogNotTruncated: "Innhold vil ikke bli avkortet",
    statisticsDialogOKButton: "ok",
    statisticsDialogSentence: "{{sentences}} setning",
    statisticsDialogSentences: "{{sentences}} setninger",
    statisticsDialogTitle: "Innhold statistikk",
    statisticsDialogTruncated: "Innhold inneholder mer enn {{limit}} tegn og kan være forkortet",
    statisticsDialogWord: "{{words}} ord",
    statisticsDialogWords: "{{words}} ord",
    statisticsTitle: "Klikk for å vise statistikk",
    tableCreateTitle: "Opprett tabell",
    tableDeleteColumnTitle: "Slett kolonne",
    tableDeleteRowTitle: "Slette tabellrad",
    tableInsertColumnTitle: "Sett inn",
    tableInsertRowTitle: "Sett inn tabellrad",
    tableMergeCellsTitle: "Slå sammen tabellceller",
    tableSplitCellsTitle: "Dele tabellceller",
    tagMenuTagAddress: "Adresse",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Overskrift 1",
    tagMenuTagH2: "Overskrift 2",
    tagMenuTagH3: "Overskrift 3",
    tagMenuTagH4: "Overskrift 4",
    tagMenuTagNA: "I\/T",
    tagMenuTagP: "Avsnitt",
    tagMenuTagPre: "Pre-formatert",
    tagMenuTitle: "Endre element stil",
    tagTreeElementLink: "Velg {{element}} element",
    tagTreeElementTitle: "Merk innholdet i elementet \"{{element}}\"",
    tagTreeRoot: "rot",
    tagTreeRootLink: "Velg alle redigerbart innhold",
    tagTreeRootTitle: "Merk alle redigerbart innhold",
    textBlockQuoteTitle: "Sitatblokk",
    textBoldTitle: "Fet",
    textItalicTitle: "Kursiv",
    textSizeDecreaseTitle: "Reduser tekststørrelse",
    textSizeIncreaseTitle: "Øk tekststørrelse",
    textStrikeTitle: "Gjennomstreke",
    textSubTitle: "Senket skrift",
    textSuperTitle: "Super skript",
    textUnderlineTitle: "Understreking",
    unsavedEditWarningText: "Det finnes ulagrede endringer på denne siden",
    viewSourceDialogCancelButton: "Lukk",
    viewSourceDialogOKButton: "Bruke kildekoden",
    viewSourceDialogTitle: "Innhold kildekoden",
    viewSourceTitle: "Vise\/redigere kildekoden"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/no.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/pl.js
/**
 * @fileOverview Polish strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('pl', 'Polski', {
    alignCenterTitle: "Wyrównać tekst centrum",
    alignJustifyTitle: "Wyrównać tekst uzasadnienia",
    alignLeftTitle: "Wyrównaj tekst do lewej",
    alignRightTitle: "Wyrównaj tekst do prawej",
    cancelDialogCancelButton: "Kontynuuj edycję",
    cancelDialogContent: "Czy na pewno chcesz anulować edycję? Wszystkie zmiany zostaną utracone!",
    cancelDialogOKButton: "Anulowanie edycji",
    cancelDialogTitle: "Anulowanie edycji",
    cancelTitle: "Anulowanie edycji",
    classMenuTitle: "Selektor stylu",
    clearFormattingTitle: "Wyczyść formatowanie",
    clickButtonToEditText: "Edycja",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatyczne",
    colorMenuBasicBlack: "Czarny",
    colorMenuBasicBlue: "Niebieski",
    colorMenuBasicGreen: "Zielony",
    colorMenuBasicGrey: "Szary",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Fioletowy",
    colorMenuBasicRed: "Czerwony",
    colorMenuBasicTitle: "Zmienianie koloru tekstu",
    colorMenuBasicWhite: "Biały",
    dockToElementTitle: "Dok\/oddokować edytor do elementu",
    dockToScreenTitle: "Dok\/oddokować edytor do ekranu",
    embedDialogCancelButton: "Anuluj",
    embedDialogOKButton: "Osadzić obiekt",
    embedDialogTabCode: "Osadzić kod",
    embedDialogTabCodeContent: "Wklej kod HTML w polu tekstowym poniżej:",
    embedDialogTabPreview: "Podgląd",
    embedDialogTabPreviewContent: "Podgląd obiektu osadzonego jest wyświetlany poniżej:",
    embedDialogTitle: "Osadzić obiekt",
    embedTitle: "Osadzić obiekt",
    errorUINoName: "UI \"{{ui}}\" jest nieprawidłowy (musi mieć Właściwość name)",
    errorUINotObject: "UI \"{{ui}}\" jest nieprawidłowy (musi być obiektem)",
    errorUIOverride: "UI \"{{name}}\" została już zarejestrowana i zostaną zastąpione",
    fileManagerDialogTitle: "Menedżer plików",
    fileManagerTitle: "Menedżer plików",
    floatLeftTitle: "Wyrównanie obrazu w lewo",
    floatNoneTitle: "Usuń obraz wyrównać",
    floatRightTitle: "Wyrównanie obrazu w prawo",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Komiks bez",
    fontFamilyMenuFontCourier: "Nowy Kurier",
    fontFamilyMenuFontDefault: "Domyślna czcionka",
    fontFamilyMenuFontGeorgia: "Gruzja",
    fontFamilyMenuFontImpact: "Wpływ",
    fontFamilyMenuFontPalatino: "Palatyn",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Wybierz czcionki",
    guidesTitle: "Pokaż element przewodników",
    historyRedoTitle: "Wykonaj ponownie",
    historyUndoTitle: "Cofnij",
    hrCreateTitle: "Wstaw pozioma",
    imageResizeButtonDialogCancelButton: "Anuluj",
    imageResizeButtonDialogHeight: "Wysokość obrazu",
    imageResizeButtonDialogHeightPlaceHolder: "Wysokość",
    imageResizeButtonDialogOKButton: "Zmiana rozmiaru",
    imageResizeButtonDialogTitle: "Rozmiar obrazu",
    imageResizeButtonDialogWidth: "Szerokość obrazu",
    imageResizeButtonDialogWidthPlaceHolder: "Szerokość",
    imageResizeButtonText: "Rozmiar obrazu",
    insertFileDialogCancelButton: "Anuluj",
    insertFileDialogOKButton: "Wstaw plik",
    insertFileNameLabel: "Nazwa pliku",
    insertFileNamePlaceHolder: "Nazwa pliku...",
    insertFileTitle: "Wstaw plik",
    insertFileURLLabel: "Adres URL pliku",
    insertFileURLPlaceHolder: "Adres URL pliku...",
    languageMenuTitle: "Zmień język",
    linkCreateDialogCancelButton: "Anuluj",
    linkCreateDialogMenuHeader: "Wybierz typ łącza",
    linkCreateDialogOKButton: "Wstaw Link",
    linkCreateDialogTitle: "Wstaw Link",
    linkCreateTitle: "Wstaw Link",
    linkRemoveTitle: "Usuń Link",
    linkTypeDocumentHeader: "Link do dokumentu lub inny plik",
    linkTypeDocumentInfo: "<h2>Nie wiesz, co należy umieścić w polu powyżej?<\/h2><ol>    <li>Upewnij się, że plik został przesłany do Twojej witryny.<\/li>    <li>Otwórz plik przesłane w przeglądarce.<\/li>    <li>Skopiuj adres URL pliku z paska adresu przeglądarki i wklej go w polu powyżej.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokument lub inny plik",
    linkTypeDocumentLocationLabel: "Lokalizacja:",
    linkTypeDocumentLocationPlaceHolder: "Wprowadź adres URL",
    linkTypeDocumentNewWindowHeader: "Nowe okno",
    linkTypeDocumentNewWindowLabel: "Zaznacz to pole aby plik jest otwarty w przeglądarce nowe okno\/kartę.",
    linkTypeEmailHeader: "Link do adresu e-mail",
    linkTypeEmailLabel: "Adres e-mail",
    linkTypeEmailSubjectLabel: "Temat (opcjonalne):",
    linkTypeEmailSubjectPlaceHolder: "Wpisz temat",
    linkTypeEmailToLabel: "Adres e-mail:",
    linkTypeEmailToPlaceHolder: "Wpisz adres e-mail",
    linkTypeExternalHeader: "Link do strony na innej stronie internetowej",
    linkTypeExternalInfo: "<h2>Nie wiesz, co należy umieścić w polu powyżej?<\/h2><ol>    <li>Znajdź stronę sieci web, którą chcesz się połączyć.<\/li>    <li>Skopiuj adres internetowy z paska adresu przeglądarki i wklej go w polu powyżej.<\/li><\/ol>",
    linkTypeExternalLabel: "Strony na innej stronie internetowej",
    linkTypeExternalLocationLabel: "Lokalizacja:",
    linkTypeExternalLocationPlaceHolder: "Wprowadź adres URL",
    linkTypeExternalNewWindowHeader: "Nowe okno",
    linkTypeExternalNewWindowLabel: "Zaznacz to pole, aby otworzyć nowe okno przeglądarki\/karcie link.",
    linkTypeInternalHeader: "Link do strony na tej stronie",
    linkTypeInternalInfo: "<h2>Nie wiesz, co należy umieścić w polu powyżej?<\/h2><ol>    <li>Znajdź strony na tej stronie link do.<\/li>    <li>Skopiuj adres www z przeglądarki adres baru, z wyjątkiem \"{{domain}}\" i wklej go w polu powyżej.<\/li><\/ol>",
    linkTypeInternalLabel: "Na stronie tej witryny",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Podaj identyfikator URI",
    linkTypeInternalNewWindowHeader: "Nowe okno",
    linkTypeInternalNewWindowLabel: "Zaznacz to pole, aby otworzyć nowe okno przeglądarki\/karcie link.",
    listOrderedTitle: "Uporządkowana lista",
    listUnorderedTitle: "Lista nieuporządkowana",
    logoTitle: "Dowiedz się więcej o edytorze WYSIWYG Raptor",
    loremIpsumTitle: "Wstawianie tekstu manekina do testów",
    navigateAway: "\nNa tej stronie są niezapisane zmiany. \nJeśli można przejść od tej strony stracisz niezapisane zmiany",
    pasteDialogCancelButton: "Anuluj",
    pasteDialogFormattedCleaned: "Sformatowany i oczyszczone",
    pasteDialogFormattedUnclean: "Sformatowany nieczyste",
    pasteDialogOKButton: "Wstaw",
    pasteDialogPlain: "Zwykły tekst",
    pasteDialogSource: "Kod źródłowy",
    pasteDialogTitle: "Wklej",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Nie można pobrać wersje",
    revisionsApplyButtonDialogCancelButton: "Anuluj",
    revisionsApplyButtonDialogOKButton: "Wycofywanie",
    revisionsApplyButtonDialogText: "Potwierdzenie wycofania",
    revisionsApplyButtonDialogTitle: "Potwierdzenie wycofania",
    revisionsApplyButtonText: "Wycofywanie",
    revisionsApplyButtonTitle: "Wycofywanie",
    revisionsApplyDialogContent: "Spowoduje to zastąpienie aktualnej treści z wybranej wersji.<br>Zawartość bieżącego zostaną dodane jako zmianę i będzie widoczna na liście poprawki dla tego bloku.",
    revisionsButtonCurrent: "Prąd",
    revisionsButtonViewDiffText: "Różnice",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Stworzony",
    revisionsDialogCancelButton: "Anuluj",
    revisionsDialogTitle: "Zobacz treść poprawki",
    revisionsDiffButtonDialogCancelButton: "Zamknij",
    revisionsDiffButtonDialogTitle: "Zobacz różnice",
    revisionsDiffButtonText: "Zobacz różnice",
    revisionsDiffButtonTitle: "Zobacz różnice",
    revisionsLoading: "Ładowanie poprawki...",
    revisionsNone: "Nie korekt dla tego elementu",
    revisionsPreviewButtonText: "Podgląd",
    revisionsPreviewButtonTitle: "Podgląd",
    revisionsText: "Poprawki",
    revisionsTextEmpty: "Nie zmian",
    revisionsTitle: "",
    rfmClose: "Zamknij",
    rfmContinue: "W dalszym ciągu",
    rfmDelete: "Usuń",
    rfmDownload: "Pobierz za darmo",
    rfmFileActions: "Działania",
    rfmFileModificationTime: "Zmodyfikowany",
    rfmFileName: "Nazwa",
    rfmFileSize: "Rozmiar",
    rfmFileType: "Typ",
    rfmFilteredTotal: "Wyświetlone {{start}} {{end}} {{filteredTotal}} plików",
    rfmFirst: "Pierwszy",
    rfmHeadingDirectories: "Katalogi",
    rfmHeadingSearch: "Szukaj",
    rfmHeadingTags: "Tagi",
    rfmHeadingUpload: "Przesłać",
    rfmInsert: "Wstaw",
    rfmLast: "Ostatnia",
    rfmSearch: "Iść",
    rfmTagDocument: "Dokument",
    rfmTagImage: "Obraz",
    rfmTotal: ", filtrowane z {{total}}",
    rfmUpload: "Przesłać",
    rfmUploadBrowse: "Przeglądaj",
    rfmUploadDrop: "Usuwanie plików tutaj",
    rfmUploadFileRemove: "Usuń",
    rfmUploadOr: "lub",
    rfmView: "Widok",
    saveJsonFail: "Nie udało się uratować {{failed}} zawartość bloku",
    saveJsonSaved: "Zapisane {{saved}} zawartość bloku.",
    saveNotConfigured: "Zapisz nie został skonfigurowany, lub jest wyłączona.",
    saveRestFail: "Nie udało się uratować {{failed}} zawartość bloku.",
    saveRestPartial: "Zapisane {{saved}} {{failed}} bloki zawartości.",
    saveRestSaved: "Zapisane {{saved}} zawartość bloku.",
    saveTitle: "Zapisywanie zawartości",
    snippetMenuTitle: "Fragmenty",
    specialCharactersArrows: "Strzałki",
    specialCharactersDialogOKButton: "Ok",
    specialCharactersDialogTitle: "Wstawianie znaków specjalnych",
    specialCharactersGreekAlphabet: "Alfabet grecki",
    specialCharactersHelp: "Kliknij przycisk dodać znak specjalny. Kliknij przycisk \"OK\" po zakończeniu zamknij to okno",
    specialCharactersMathematics: "Matematyka",
    specialCharactersSymbols: "Symbole",
    specialCharactersTitle: "Wstawianie znaków specjalnych",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} znaków ponad limit",
    statisticsButtonCharacterRemaining: "pozostało znaków {{charactersRemaining}}",
    statisticsButtonCharacters: "{{characters}} znaków",
    statisticsDialogCharactersOverLimit: "znaki {{characters}}, {{charactersRemaining}} przekroczenie zalecanej",
    statisticsDialogCharactersRemaining: "{{characters}} pozostało, {{charactersRemaining}}",
    statisticsDialogNotTruncated: "Zawartości nie zostanie obcięty",
    statisticsDialogOKButton: "Ok",
    statisticsDialogSentence: "zdanie {{sentences}}",
    statisticsDialogSentences: "{{sentences}} zdań",
    statisticsDialogTitle: "Statystyki zawartości",
    statisticsDialogTruncated: "Zawartość zawiera więcej niż {{limit}} znaków i może zostać obcięta",
    statisticsDialogWord: "słowo {{words}}",
    statisticsDialogWords: "{{words}} słów",
    statisticsTitle: "Kliknij, aby wyświetlić statystyki",
    tableCreateTitle: "Tworzenie tabeli",
    tableDeleteColumnTitle: "Usuń kolumnę tabeli",
    tableDeleteRowTitle: "Usuwanie wiersza tabeli",
    tableInsertColumnTitle: "Wstaw kolumnę tabeli",
    tableInsertRowTitle: "Wstaw wiersz tabeli",
    tableMergeCellsTitle: "Scalanie komórek tabeli",
    tableSplitCellsTitle: "Podział komórek tabeli",
    tagMenuTagAddress: "Adres",
    tagMenuTagDiv: "DIV",
    tagMenuTagH1: "Nagłówek 1",
    tagMenuTagH2: "Nagłówek 2",
    tagMenuTagH3: "Pozycja 3",
    tagMenuTagH4: "Pozycja 4",
    tagMenuTagNA: "N\/D!",
    tagMenuTagP: "Ust.",
    tagMenuTagPre: "Wstępnie sformatowany",
    tagMenuTitle: "Zmienić styl",
    tagTreeElementLink: "Wybierz opcję {{element}}",
    tagTreeElementTitle: "Kliknij, aby zaznaczyć zawartość elementu \"{{element}}\"",
    tagTreeRoot: "korzeń",
    tagTreeRootLink: "Wybierz wszystkie edytowalna treść",
    tagTreeRootTitle: "Kliknij, aby zaznaczyć całą zawartość edycji",
    textBlockQuoteTitle: "Cytat blokowy",
    textBoldTitle: "Pogrubienie",
    textItalicTitle: "Kursywa",
    textSizeDecreaseTitle: "Zmniejsz rozmiar tekstu",
    textSizeIncreaseTitle: "Zwiększyć rozmiar tekstu",
    textStrikeTitle: "Strajku poprzez",
    textSubTitle: "Sub-skrypt",
    textSuperTitle: "Super skrypt",
    textUnderlineTitle: "Podkreślenie",
    unsavedEditWarningText: "Na tej stronie są niezapisane zmiany",
    viewSourceDialogCancelButton: "Zamknij",
    viewSourceDialogOKButton: "Stosuje się kod źródłowy",
    viewSourceDialogTitle: "Kod źródłowy zawartości",
    viewSourceTitle: "Wyświetl\/Edytuj kod źródłowy"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/pl.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/pt.js
/**
 * @fileOverview Portuguese strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('pt', 'Português', {
    alignCenterTitle: "Centralizar o texto",
    alignJustifyTitle: "Alinhar texto justificar",
    alignLeftTitle: "Alinhar texto à esquerda",
    alignRightTitle: "Alinhar a direita de texto",
    cancelDialogCancelButton: "Continuar edição",
    cancelDialogContent: "Tem certeza que deseja cancelar a edição? Todas as alterações serão perdidas!",
    cancelDialogOKButton: "Cancelar a edição",
    cancelDialogTitle: "Cancelar a edição",
    cancelTitle: "Cancelar a edição",
    classMenuTitle: "Seletor de estilo",
    clearFormattingTitle: "Limpar formatação",
    clickButtonToEditText: "Editar",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automático",
    colorMenuBasicBlack: "Preto",
    colorMenuBasicBlue: "Azul",
    colorMenuBasicGreen: "Verde",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Laranja",
    colorMenuBasicPurple: "Roxo",
    colorMenuBasicRed: "Vermelho",
    colorMenuBasicTitle: "Mudar a cor do texto",
    colorMenuBasicWhite: "Branco",
    dockToElementTitle: "Doca\/desencaixar o editor para o elemento",
    dockToScreenTitle: "Doca\/desencaixar editor de tela",
    embedDialogCancelButton: "Cancelar",
    embedDialogOKButton: "Inserir objeto",
    embedDialogTabCode: "Código embed",
    embedDialogTabCodeContent: "Cole o código embed para a área de texto abaixo:",
    embedDialogTabPreview: "Visualizar",
    embedDialogTabPreviewContent: "Uma prévia do seu objeto incorporado é exibida abaixo:",
    embedDialogTitle: "Inserir objeto",
    embedTitle: "Inserir objeto",
    errorUINoName: "UI \"{{ui}}\" é inválido (deve ter um propriedade de nome)",
    errorUINotObject: "UI \"{{ui}}\" é inválido (deve ser um objeto)",
    errorUIOverride: "UI \"{{name}}\" já foi registrado e será substituído",
    fileManagerDialogTitle: "Gerenciador de arquivos",
    fileManagerTitle: "Gerenciador de arquivos",
    floatLeftTitle: "Alinhe a imagem à esquerda",
    floatNoneTitle: "Remover imagem alinhar",
    floatRightTitle: "Alinhe a imagem à direita",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Quadrinhos sem",
    fontFamilyMenuFontCourier: "Courier novo",
    fontFamilyMenuFontDefault: "Fonte padrão",
    fontFamilyMenuFontGeorgia: "Geórgia",
    fontFamilyMenuFontImpact: "Impacto",
    fontFamilyMenuFontPalatino: "Palatino",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Escolha a sua fonte",
    guidesTitle: "Mostrar guias de elemento",
    historyRedoTitle: "Refazer",
    historyUndoTitle: "Desfazer",
    hrCreateTitle: "Inserir regra Horizontal",
    imageResizeButtonDialogCancelButton: "Cancelar",
    imageResizeButtonDialogHeight: "Altura da imagem",
    imageResizeButtonDialogHeightPlaceHolder: "Altura",
    imageResizeButtonDialogOKButton: "Redimensionar",
    imageResizeButtonDialogTitle: "Redimensionar imagem",
    imageResizeButtonDialogWidth: "Largura da imagem",
    imageResizeButtonDialogWidthPlaceHolder: "Largura",
    imageResizeButtonText: "Redimensionar imagem",
    insertFileDialogCancelButton: "Cancelar",
    insertFileDialogOKButton: "Inserir arquivo",
    insertFileNameLabel: "Nome do arquivo",
    insertFileNamePlaceHolder: "Nome do arquivo...",
    insertFileTitle: "Inserir arquivo",
    insertFileURLLabel: "URL do arquivo",
    insertFileURLPlaceHolder: "URL do arquivo...",
    languageMenuTitle: "Alterar Idioma",
    linkCreateDialogCancelButton: "Cancelar",
    linkCreateDialogMenuHeader: "Escolha um tipo de link",
    linkCreateDialogOKButton: "Inserir Link",
    linkCreateDialogTitle: "Inserir Link",
    linkCreateTitle: "Inserir Link",
    linkRemoveTitle: "Remover Link",
    linkTypeDocumentHeader: "Link para um documento ou outro arquivo.",
    linkTypeDocumentInfo: "<h2>Não sei o que colocar na caixa acima?<\/h2><ol>    <li>Garantir que o arquivo foi carregado para o seu site.<\/li>    <li>Abra o arquivo carregado em seu navegador.<\/li>    <li>Copie a URL do arquivo da barra de endereços do seu navegador e colá-lo na caixa acima.<\/li><\/ol>",
    linkTypeDocumentLabel: "Documento ou outro arquivo.",
    linkTypeDocumentLocationLabel: "Localização:",
    linkTypeDocumentLocationPlaceHolder: "Digite uma URL",
    linkTypeDocumentNewWindowHeader: "Nova janela",
    linkTypeDocumentNewWindowLabel: "Marque esta caixa para que o arquivo abrir em uma nova janela\/aba do navegador.",
    linkTypeEmailHeader: "Link para um endereço de e-mail",
    linkTypeEmailLabel: "Endereço de e-mail",
    linkTypeEmailSubjectLabel: "Assunto (opcional):",
    linkTypeEmailSubjectPlaceHolder: "Digite o assunto",
    linkTypeEmailToLabel: "Email:",
    linkTypeEmailToPlaceHolder: "Digite o endereço de e-mail",
    linkTypeExternalHeader: "Link para uma página em outro site",
    linkTypeExternalInfo: "<h2>Não sei o que colocar na caixa acima?<\/h2><ol>    <li>Encontre a página na web que você deseja se vincular.<\/li>    <li>Copie o endereço web da barra de endereços do seu navegador e colá-lo na caixa acima.<\/li><\/ol>",
    linkTypeExternalLabel: "Página em outro site",
    linkTypeExternalLocationLabel: "Localização:",
    linkTypeExternalLocationPlaceHolder: "Digite uma URL",
    linkTypeExternalNewWindowHeader: "Nova janela",
    linkTypeExternalNewWindowLabel: "Marque esta caixa para ter o link abrir em uma nova janela\/aba do navegador.",
    linkTypeInternalHeader: "Link para uma página neste Web site",
    linkTypeInternalInfo: "<h2>Não sei o que colocar na caixa acima?<\/h2><ol>    <li>Encontre a página neste link do site para.<\/li>    <li>Copiem o endereço web barra de endereço do seu navegador, excluindo \"{{domain}}\" e colá-lo na caixa acima.<\/li><\/ol>",
    linkTypeInternalLabel: "Página deste site",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Insira um URI",
    linkTypeInternalNewWindowHeader: "Nova janela",
    linkTypeInternalNewWindowLabel: "Marque esta caixa para ter o link abrir em uma nova janela\/aba do navegador.",
    listOrderedTitle: "Lista ordenada",
    listUnorderedTitle: "Lista não ordenada",
    logoTitle: "Saiba mais sobre o Editor WYSIWYG Raptor",
    loremIpsumTitle: "Inserir texto fictício para testes",
    navigateAway: "\nLá são alterações não salvas nesta página. \nSe você navegar longe nesta página, você perderá as alterações não salvas",
    pasteDialogCancelButton: "Cancelar",
    pasteDialogFormattedCleaned: "Formatado &amp; limpo",
    pasteDialogFormattedUnclean: "Formatado impuro",
    pasteDialogOKButton: "Inserir",
    pasteDialogPlain: "Texto sem formatação",
    pasteDialogSource: "Código-fonte",
    pasteDialogTitle: "Colar",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Falha ao recuperar as revisões",
    revisionsApplyButtonDialogCancelButton: "Cancelar",
    revisionsApplyButtonDialogOKButton: "Reversão",
    revisionsApplyButtonDialogText: "Confirmação de reversão",
    revisionsApplyButtonDialogTitle: "Confirmação de reversão",
    revisionsApplyButtonText: "Reversão",
    revisionsApplyButtonTitle: "Reversão",
    revisionsApplyDialogContent: "Isto irá substituir o conteúdo atual com a revisão selecionada.<br>O conteúdo será adicionado como uma revisão e será visível na lista de revisões para este bloco.",
    revisionsButtonCurrent: "Corrente",
    revisionsButtonViewDiffText: "Diferenças",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Criado",
    revisionsDialogCancelButton: "Cancelar",
    revisionsDialogTitle: "Exibir conteúdas revisões",
    revisionsDiffButtonDialogCancelButton: "Fechar",
    revisionsDiffButtonDialogTitle: "Diferenças de opinião",
    revisionsDiffButtonText: "Diferenças de opinião",
    revisionsDiffButtonTitle: "Diferenças de opinião",
    revisionsLoading: "Revisões de carregamento...",
    revisionsNone: "Não há revisões para este elemento",
    revisionsPreviewButtonText: "Visualizar",
    revisionsPreviewButtonTitle: "Visualizar",
    revisionsText: "Revisões",
    revisionsTextEmpty: "Não há revisões",
    revisionsTitle: "",
    rfmClose: "Fechar",
    rfmContinue: "Continuar",
    rfmDelete: "Excluir",
    rfmDownload: "Baixar",
    rfmFileActions: "Ações",
    rfmFileModificationTime: "Modificado",
    rfmFileName: "Nome",
    rfmFileSize: "Tamanho",
    rfmFileType: "Tipo",
    rfmFilteredTotal: "Mostrando {{start}} para {{end}} de {{filteredTotal}} arquivos",
    rfmFirst: "Primeiro",
    rfmHeadingDirectories: "Diretórios",
    rfmHeadingSearch: "Pesquisa",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Fazer upload",
    rfmInsert: "Inserir",
    rfmLast: "Última",
    rfmSearch: "Ir",
    rfmTagDocument: "Documento",
    rfmTagImage: "Imagem",
    rfmTotal: ", filtrado de {{total}}",
    rfmUpload: "Fazer upload",
    rfmUploadBrowse: "Browse",
    rfmUploadDrop: "Solte os arquivos aqui",
    rfmUploadFileRemove: "Remover",
    rfmUploadOr: "ou",
    rfmView: "Vista",
    saveJsonFail: "Falha ao salvar o bloco de conteúdo {{failed}} (s)",
    saveJsonSaved: "Salvo com sucesso {{saved}} blocos de conteúdo.",
    saveNotConfigured: "Salvar não foi configurado, ou está desabilitado.",
    saveRestFail: "Falha ao salvar o bloco de conteúdo {{failed}} (s).",
    saveRestPartial: "Salvou {{saved}} de {{failed}} blocos de conteúdo.",
    saveRestSaved: "Salvo com sucesso {{saved}} blocos de conteúdo.",
    saveTitle: "Salvar conteúdo",
    snippetMenuTitle: "Trechos",
    specialCharactersArrows: "Setas",
    specialCharactersDialogOKButton: "Razoável",
    specialCharactersDialogTitle: "Inserir caracteres especiais",
    specialCharactersGreekAlphabet: "Alfabeto grego",
    specialCharactersHelp: "Clique em um caractere especial para adicioná-lo. Clique em \"OK\" quando pronto para fechar esta caixa de diálogo",
    specialCharactersMathematics: "Matemática",
    specialCharactersSymbols: "Símbolos",
    specialCharactersTitle: "Inserir um caractere especial",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} caracteres sobre limite",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} caracteres restantes",
    statisticsButtonCharacters: "{{characters}} caracteres",
    statisticsDialogCharactersOverLimit: "caracteres {{characters}}, {{charactersRemaining}} acima do limite recomendado",
    statisticsDialogCharactersRemaining: "caracteres {{characters}}, {{charactersRemaining}} restantes",
    statisticsDialogNotTruncated: "Conteúdo não será truncado",
    statisticsDialogOKButton: "Razoável",
    statisticsDialogSentence: "frase de {{sentences}}",
    statisticsDialogSentences: "frases de {{sentences}}",
    statisticsDialogTitle: "Estatísticas de conteúdo",
    statisticsDialogTruncated: "Conteúdo contém mais de {{limit}} caracteres e pode ser truncado",
    statisticsDialogWord: "palavra de {{words}}",
    statisticsDialogWords: "palavras de {{words}}",
    statisticsTitle: "Clique para ver as estatísticas",
    tableCreateTitle: "Criar tabela",
    tableDeleteColumnTitle: "Excluir a coluna da tabela",
    tableDeleteRowTitle: "Excluir linhas da tabela",
    tableInsertColumnTitle: "Inserir coluna da tabela",
    tableInsertRowTitle: "Inserir uma linha de tabela",
    tableMergeCellsTitle: "Mesclar células de tabela",
    tableSplitCellsTitle: "Dividir células de tabela",
    tagMenuTagAddress: "Endereço",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Rubrica 1",
    tagMenuTagH2: "Rubrica 2",
    tagMenuTagH3: "Rubrica 3",
    tagMenuTagH4: "Rubrica 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "N.",
    tagMenuTagPre: "Pré-formatado",
    tagMenuTitle: "Mudar o estilo do elemento",
    tagTreeElementLink: "Selecione {{element}} elemento",
    tagTreeElementTitle: "Clique para selecionar o conteúdo do elemento \"{{element}}\"",
    tagTreeRoot: "raiz",
    tagTreeRootLink: "Selecione todo o conteúdo editável",
    tagTreeRootTitle: "Clique para selecionar todo o conteúdo editável",
    textBlockQuoteTitle: "Citação de bloco",
    textBoldTitle: "Bold (realce)",
    textItalicTitle: "Itálico",
    textSizeDecreaseTitle: "Diminuir tamanho do texto",
    textSizeIncreaseTitle: "Aumentar o tamanho do texto",
    textStrikeTitle: "Tachar",
    textSubTitle: "Script de sub",
    textSuperTitle: "Super script",
    textUnderlineTitle: "Sublinhado",
    unsavedEditWarningText: "Lá são alterações não salvas nesta página",
    viewSourceDialogCancelButton: "Fechar",
    viewSourceDialogOKButton: "Aplicar o código-fonte",
    viewSourceDialogTitle: "Código de fonte de conteúdo",
    viewSourceTitle: "Exibir\/editar código-fonte"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/pt.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ro.js
/**
 * @fileOverview Romanian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ro', 'Română', {
    alignCenterTitle: "Aliniaţi textul centru",
    alignJustifyTitle: "Aliniaţi textul justifica",
    alignLeftTitle: "Aliniere la stânga text",
    alignRightTitle: "Aliniere text la dreapta",
    cancelDialogCancelButton: "Continua editarea",
    cancelDialogContent: "Sigur revocați editarea? Toate modificările vor fi pierdute!",
    cancelDialogOKButton: "Revocați editarea",
    cancelDialogTitle: "Revocați editarea",
    cancelTitle: "Revocați editarea",
    classMenuTitle: "Selectorul de stil",
    clearFormattingTitle: "Clare de formatare",
    clickButtonToEditText: "Editare",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automată",
    colorMenuBasicBlack: "Negru",
    colorMenuBasicBlue: "Albastru",
    colorMenuBasicGreen: "Verde",
    colorMenuBasicGrey: "Gri",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Violet",
    colorMenuBasicRed: "Red",
    colorMenuBasicTitle: "Schimba culoarea textului",
    colorMenuBasicWhite: "Alb",
    dockToElementTitle: "Doc\/detaşaţi editor element",
    dockToScreenTitle: "Doc\/detaşaţi editor pentru a ecran",
    embedDialogCancelButton: "Revocare",
    embedDialogOKButton: "Încorporaţi obiectul",
    embedDialogTabCode: "Codul embed",
    embedDialogTabCodeContent: "Lipiţi codul de încorporare în zona de text de mai jos:",
    embedDialogTabPreview: "Previzualizare",
    embedDialogTabPreviewContent: "O previzualizare a obiectului încorporat este afişat mai jos:",
    embedDialogTitle: "Încorporaţi obiectul",
    embedTitle: "Încorporaţi obiectul",
    errorUINoName: "UI \"{{ui}}\" este nevalid (trebuie să aveţi un nume de proprietate)",
    errorUINotObject: "UI \"{{ui}}\" este nevalid (trebuie să fie un obiect)",
    errorUIOverride: "UI \"{{name}}\" a fost deja înregistrat, și va fi suprascris",
    fileManagerDialogTitle: "File Manager",
    fileManagerTitle: "File Manager",
    floatLeftTitle: "Aliniați imaginea la stânga",
    floatNoneTitle: "Elimina imaginea aliniaţi",
    floatRightTitle: "Aliniați imaginea din dreapta",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Benzi desenate fără",
    fontFamilyMenuFontCourier: "Noi de curierat",
    fontFamilyMenuFontDefault: "Fontul implicit",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Impactul",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Alegeţi dumneavoastră font",
    guidesTitle: "Ghiduri de element Arată",
    historyRedoTitle: "Refacere",
    historyUndoTitle: "Anulare",
    hrCreateTitle: "Inserare regulă orizontale",
    imageResizeButtonDialogCancelButton: "Revocare",
    imageResizeButtonDialogHeight: "Inaltime imagine",
    imageResizeButtonDialogHeightPlaceHolder: "",
    imageResizeButtonDialogOKButton: "Redimensiona",
    imageResizeButtonDialogTitle: "Redimensiona imaginea",
    imageResizeButtonDialogWidth: "Latime imagine",
    imageResizeButtonDialogWidthPlaceHolder: "Lăţime",
    imageResizeButtonText: "Redimensiona imaginea",
    insertFileDialogCancelButton: "Revocare",
    insertFileDialogOKButton: "Inserare fișier",
    insertFileNameLabel: "Nume de fişier",
    insertFileNamePlaceHolder: "Numele de fișier...",
    insertFileTitle: "Inserare fișier",
    insertFileURLLabel: "Fişier URL",
    insertFileURLPlaceHolder: "URL dosar...",
    languageMenuTitle: "Schimba limba",
    linkCreateDialogCancelButton: "Revocare",
    linkCreateDialogMenuHeader: "Alege un tip de legătură",
    linkCreateDialogOKButton: "Introduceţi link-ul",
    linkCreateDialogTitle: "Introduceţi link-ul",
    linkCreateTitle: "Introduceţi link-ul",
    linkRemoveTitle: "Elimina link-ul",
    linkTypeDocumentHeader: "Link la un document sau alt fişier",
    linkTypeDocumentInfo: "<h2>Nu sunt sigur ce să puneţi în caseta de mai sus?<\/h2><ol>    <li>Asigura fişierul a fost încărcat la site-ul dvs.<\/li>    <li>Deschideţi fişierul încărcat în browser-ul dumneavoastră.<\/li>    <li>Copiaţi fişierul pe URL-ul din bara de adrese a browser-ul şi lipiţi-l în caseta de mai sus.<\/li><\/ol>",
    linkTypeDocumentLabel: "Document sau alt fişier",
    linkTypeDocumentLocationLabel: "Locaţie:",
    linkTypeDocumentLocationPlaceHolder: "Introduceţi o adresă URL",
    linkTypeDocumentNewWindowHeader: "Fereastră nouă",
    linkTypeDocumentNewWindowLabel: "Bifați această casetă pentru a avea dosar deschis într-o nouă fereastră de browser\/tab.",
    linkTypeEmailHeader: "Se leagă o adresa de e-mail",
    linkTypeEmailLabel: "Adresa de e-mail",
    linkTypeEmailSubjectLabel: "Subiect (optional):",
    linkTypeEmailSubjectPlaceHolder: "Introduceţi subiectul",
    linkTypeEmailToLabel: "E-mail:",
    linkTypeEmailToPlaceHolder: "Introduceţi adresa de e-mail",
    linkTypeExternalHeader: "Link la o pagină de pe un alt site",
    linkTypeExternalInfo: "<h2>Nu sunt sigur ce să puneţi în caseta de mai sus?<\/h2><ol>    <li>Găsi pe pagina web pe care doriţi să se leagă.<\/li>    <li>Copiaţi adresa web din bara de adrese a browser-ul şi lipiţi-l în caseta de mai sus.<\/li><\/ol>",
    linkTypeExternalLabel: "Pagina de pe un alt site",
    linkTypeExternalLocationLabel: "Locaţie:",
    linkTypeExternalLocationPlaceHolder: "Introduceţi o adresă URL",
    linkTypeExternalNewWindowHeader: "Fereastră nouă",
    linkTypeExternalNewWindowLabel: "Bifați această casetă pentru a avea link-ul de deschidere înãuntru un nou maro fereastră\/tab.",
    linkTypeInternalHeader: "Link la o pagină de pe acest site",
    linkTypeInternalInfo: "<h2>Nu sunt sigur ce să puneţi în caseta de mai sus?<\/h2><ol>    <li>Găsi pagina de pe acest site de link-ul de la.<\/li>    <li>Copiaţi adresa web din browserul pe bara de adrese, cu excepția \"{{domain}}\" şi lipiţi-l în caseta de mai sus.<\/li><\/ol>",
    linkTypeInternalLabel: "Pagina de pe acest site",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Introduceţi un URI",
    linkTypeInternalNewWindowHeader: "Fereastră nouă",
    linkTypeInternalNewWindowLabel: "Bifați această casetă pentru a avea link-ul de deschidere înãuntru un nou maro fereastră\/tab.",
    listOrderedTitle: "Lista ordonata",
    listUnorderedTitle: "Listă neordonată",
    logoTitle: "Aflaţi mai multe despre Raptor WYSIWYG Editor",
    loremIpsumTitle: "Inseraţi dummy text pentru testarea",
    navigateAway: "\nSunt nesalvate modificări pe această pagină. \nDacă navigaţi la această pagină veți pierde modificările nesalvate",
    pasteDialogCancelButton: "Revocare",
    pasteDialogFormattedCleaned: "Formatat &amp; curăţate",
    pasteDialogFormattedUnclean: "Formatat necurate",
    pasteDialogOKButton: "Inserare",
    pasteDialogPlain: "Text simplu",
    pasteDialogSource: "Codul sursă",
    pasteDialogTitle: "Pastă",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "A reuşit să regăsească revizii",
    revisionsApplyButtonDialogCancelButton: "Revocare",
    revisionsApplyButtonDialogOKButton: "Derulare înapoi",
    revisionsApplyButtonDialogText: "Derulare înapoi confirmare",
    revisionsApplyButtonDialogTitle: "Derulare înapoi confirmare",
    revisionsApplyButtonText: "Derulare înapoi",
    revisionsApplyButtonTitle: "Derulare înapoi",
    revisionsApplyDialogContent: "Acest lucru va înlocui conținutul curent cu revizuirea selectate.<br>Conținutul curent va fi adăugat ca o revizuire, şi vor fi vizibile în lista de revizii pentru acest bloc.",
    revisionsButtonCurrent: "Curent",
    revisionsButtonViewDiffText: "Diferenţele",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Creat",
    revisionsDialogCancelButton: "Revocare",
    revisionsDialogTitle: "Vezi conţinut revizii",
    revisionsDiffButtonDialogCancelButton: "Închide",
    revisionsDiffButtonDialogTitle: "Vezi diferentele",
    revisionsDiffButtonText: "Vezi diferentele",
    revisionsDiffButtonTitle: "Vezi diferentele",
    revisionsLoading: "Încărcare revizii...",
    revisionsNone: "Nu revizuiri pentru acest element",
    revisionsPreviewButtonText: "Previzualizare",
    revisionsPreviewButtonTitle: "Previzualizare",
    revisionsText: "Revizii",
    revisionsTextEmpty: "Nu revizuiri",
    revisionsTitle: "",
    rfmClose: "Închide",
    rfmContinue: "Continua",
    rfmDelete: "Ştergeţi",
    rfmDownload: "Descarca",
    rfmFileActions: "Acţiunile",
    rfmFileModificationTime: "Modificat",
    rfmFileName: "nume",
    rfmFileSize: "Dimensiune",
    rfmFileType: "Tip",
    rfmFilteredTotal: "Prezentarea {{start}} la {{end}} {{filteredTotal}} fișiere",
    rfmFirst: "Prima",
    rfmHeadingDirectories: "Directoare",
    rfmHeadingSearch: "Căutare",
    rfmHeadingTags: "Tag-uri",
    rfmHeadingUpload: "Încărcaţi",
    rfmInsert: "Inserare",
    rfmLast: "Ultima",
    rfmSearch: "Du-te",
    rfmTagDocument: "Documentul",
    rfmTagImage: "Imagine",
    rfmTotal: ", filtrat din {{total}}",
    rfmUpload: "Încărcaţi",
    rfmUploadBrowse: "Răsfoire",
    rfmUploadDrop: "Fixaţi fişierele aici",
    rfmUploadFileRemove: "Elimina",
    rfmUploadOr: "sau",
    rfmView: "Vezi",
    saveJsonFail: "Nu a reuşit să salveze {{failed}} conţinut bloc (uri)",
    saveJsonSaved: "Salvat cu succes {{saved}} conţinut bloc (uri).",
    saveNotConfigured: "A salva nu a fost configurată, sau dezactivat.",
    saveRestFail: "Nu a reușit să salveze {{failed}} conţinut bloc (uri).",
    saveRestPartial: "Salvat {{saved}} din {{failed}} blocuri de conţinut.",
    saveRestSaved: "Salvat cu succes {{saved}} conţinut bloc (uri).",
    saveTitle: "Salvaţi conţinut",
    snippetMenuTitle: "Fragmentele",
    specialCharactersArrows: "Săgeţile",
    specialCharactersDialogOKButton: "ok",
    specialCharactersDialogTitle: "Inseraţi caractere speciale",
    specialCharactersGreekAlphabet: "Alfabetul grec",
    specialCharactersHelp: "Faceţi clic pe un caracter special pentru a o adăuga. Faceţi clic pe \"OK\" Când aţi terminat pentru a închide acest dialog",
    specialCharactersMathematics: "Matematică",
    specialCharactersSymbols: "Simboluri",
    specialCharactersTitle: "Inserarea unui caracter special",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} caractere peste limita",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} caractere rămase",
    statisticsButtonCharacters: "{{characters}} caractere",
    statisticsDialogCharactersOverLimit: "caractere {{characters}}, {{charactersRemaining}} peste limita recomandata",
    statisticsDialogCharactersRemaining: "caractere {{characters}}, {{charactersRemaining}} rămase",
    statisticsDialogNotTruncated: "Conţinut nu vor fi trunchiate",
    statisticsDialogOKButton: "ok",
    statisticsDialogSentence: "{{sentences}} teză",
    statisticsDialogSentences: "{{sentences}} propoziţii",
    statisticsDialogTitle: "Conţinut statistici",
    statisticsDialogTruncated: "Conţinutul conține mai mult de {{limit}} caractere şi pot fi trunchiate",
    statisticsDialogWord: "{{words}} de cuvinte",
    statisticsDialogWords: "{{words}} cuvinte",
    statisticsTitle: "Click pentru a vizualiza statistici",
    tableCreateTitle: "Creare tabel",
    tableDeleteColumnTitle: "Ștergeți tabelul coloană",
    tableDeleteRowTitle: "Ștergere rând de tabel",
    tableInsertColumnTitle: "Inserare coloană de tabel",
    tableInsertRowTitle: "Inserare rând de tabel",
    tableMergeCellsTitle: "Îmbinare celule tabel",
    tableSplitCellsTitle: "Scindare celule tabel",
    tagMenuTagAddress: "Adresa",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Rubrica 1",
    tagMenuTagH2: "Capitolul 2",
    tagMenuTagH3: "Rubrica 3",
    tagMenuTagH4: "Rubrica 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Alin",
    tagMenuTagPre: "Pre-formatat",
    tagMenuTitle: "Schimba stilul de element",
    tagTreeElementLink: "Selectaţi elementul {{element}}",
    tagTreeElementTitle: "Faceţi clic şi selectaţi conţinutul elementul \"{{element}}\"",
    tagTreeRoot: "rădăcină",
    tagTreeRootLink: "Selectaţi toate conţinut editabile",
    tagTreeRootTitle: "Faceţi clic pentru a selecta toate conţinut editabile",
    textBlockQuoteTitle: "Citat de bloc",
    textBoldTitle: "Bold",
    textItalicTitle: "Cursiv",
    textSizeDecreaseTitle: "Micșorare dimensiune text",
    textSizeIncreaseTitle: "Măriţi dimensiunea textului",
    textStrikeTitle: "Baraţi",
    textSubTitle: "Sub-script",
    textSuperTitle: "Super-script",
    textUnderlineTitle: "Subliniere",
    unsavedEditWarningText: "Acolo sunt nesalvate modificări pe această pagină",
    viewSourceDialogCancelButton: "Închide",
    viewSourceDialogOKButton: "Se aplică codul sursă",
    viewSourceDialogTitle: "Codul sursă de conținut",
    viewSourceTitle: "Vizualizare\/Editare codul sursă"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ro.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ru.js
/**
 * @fileOverview Russian strings file.
 * @author Ivan Gromov, summer.is.gone@gmail.com
 */
extendLocale('ru', 'Russian', {
    alignCenterTitle: "По центру",
    alignJustifyTitle: "По ширине",
    alignLeftTitle: "По левому краю",
    alignRightTitle: "По правому краю",
    cancelDialogCancelButton: "Продолжить редактирование",
    cancelDialogContent: "Вы уверены, что хотите завершить редактирование? Все изменения будут утеряны!",
    cancelDialogOKButton: "Завершить редактирование",
    cancelDialogTitle: "Завершить редактирование",
    cancelTitle: "Завершить редактирование",
    classMenuTitle: "Выбор стиля",
    clearFormattingTitle: "Очистить форматирование",
    clickButtonToEditPluginButton: "Нажмите для начала редактирования",
    clickButtonToEditText: "Редактировать",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Автоматически",
    colorMenuBasicBlack: "Черный",
    colorMenuBasicBlue: "Синий",
    colorMenuBasicGreen: "Зеленый",
    colorMenuBasicGrey: "Серый",
    colorMenuBasicOrange: "Оранжевый",
    colorMenuBasicPurple: "Лиловый",
    colorMenuBasicRed: "Красный",
    colorMenuBasicTitle: "Изменить цевет текста",
    colorMenuBasicWhite: "Белый",
    dockToElementTitle: "Прикрепить редактор к элементу",
    dockToScreenTitle: "Прикрепить редактор к документу",
    embedDialogCancelButton: "Отмена",
    embedDialogOKButton: "Встраиваемый объект",
    embedDialogTabCode: "Встраиваемый код",
    embedDialogTabCodeContent: "Вставьте код в поле ниже:",
    embedDialogTabPreview: "Предпросмотр",
    embedDialogTabPreviewContent: "Предпросмотр встраиваемого объекта:",
    embedDialogTitle: "Встраиваемый объект",
    embedTitle: "Встраиваемый объект",
    errorPluginNoName: "Модуль \"{{plugin}}\" содержит ошибку (поле свойство обязательное)",
    errorPluginNotObject: "Модуль \"{{plugin}}\" содержит ошибку (предполагается наличие объекта)",
    errorPluginOverride: "Модуль \"{{name}}\" уже был зарегистрирован и будет перезаписан",
    errorUINoName: "Интерфейс \"{{ui}}\" содержит ошибку (поле свойство обязательное)",
    errorUINotObject: "Интерфейс \"{{ui}}\" содержит ошибку (предполагается наличие объекта)",
    errorUIOverride: "Интерфейс \"{{name}}\" уже был зарегистрирован и будет перезаписан",
    fileManagerDialogTitle: "Файловый менеджер",
    fileManagerTitle: "Файловый менеджер",
    floatLeftTitle: "Выровнять изображение по левому краю",
    floatNoneTitle: "Отменить выравнивание изображения",
    floatRightTitle: "Выровнять изображение по правому краю",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Комикс без",
    fontFamilyMenuFontCourier: "Новый Курьер",
    fontFamilyMenuFontDefault: "Шрифт по умолчанию",
    fontFamilyMenuFontGeorgia: "Грузия",
    fontFamilyMenuFontImpact: "Влияние",
    fontFamilyMenuFontPalatino: "Палатин",
    fontFamilyMenuFontTimes: "Раз новый роман",
    fontFamilyMenuTitle: "Выбрать свой шрифт",
    guidesTitle: "Показать направляющие",
    historyRedoTitle: "Повторить действие",
    historyUndoTitle: "Отменить действие",
    hrCreateTitle: "Вставить горизонтальную линию",
    imageResizeButtonDialogCancelButton: "Отмена",
    imageResizeButtonDialogHeight: "Высота изображения",
    imageResizeButtonDialogHeightPlaceHolder: "Высота",
    imageResizeButtonDialogOKButton: "Изменить размер",
    imageResizeButtonDialogTitle: "Изменить размер изображения",
    imageResizeButtonDialogWidth: "Ширина изображения",
    imageResizeButtonDialogWidthPlaceHolder: "Ширина",
    imageResizeButtonText: "Изменить размер изображения",
    insertFileDialogCancelButton: "Отмена",
    insertFileDialogOKButton: "Вставить файл",
    insertFileNameLabel: "Имя файла",
    insertFileNamePlaceHolder: "Имя файла...",
    insertFileTitle: "Вставить файл",
    insertFileURLLabel: "URL-адрес файла",
    insertFileURLPlaceHolder: "URL-адрес файла...",
    languageMenuDE: "Немецкий",
    languageMenuEN: "Английский",
    languageMenuES: "Испанский",
    languageMenuFR: "Французский",
    languageMenuNL: "Голландский",
    languageMenuSV: "Шведский",
    languageMenuTitle: "Изменить язык",
    languageMenuZHCN: "Упрощенный китайский",
    linkCreateDialogCancelButton: "Отмена",
    linkCreateDialogMenuHeader: "Выбарите тип ссылки",
    linkCreateDialogOKButton: "Вставить ссылку",
    linkCreateDialogTitle: "Вставить ссылку",
    linkCreateTitle: "Вставить ссылку",
    linkRemoveTitle: "Удалить ссылку",
    linkTypeDocumentHeader: "Ссылка на документ или другой файл",
    linkTypeDocumentInfo: "<h2>Не знаете что ввести в это поле?<\/h2><ol>    <li>Удостоверьтесь, что файл был загружен на ваш сайт.<\/li>    <li>Откройте файл в браузере.<\/li>    <li>Скопируйте адрес из строки браузера в поле выше.<\/li><\/ol>",
    linkTypeDocumentLabel: "Документ или другой файл",
    linkTypeDocumentLocationLabel: "Адрес:",
    linkTypeDocumentLocationPlaceHolder: "Введите URL",
    linkTypeDocumentNewWindowHeader: "В новом окне",
    linkTypeDocumentNewWindowLabel: "Поставьте флажок, чтобы страница открылась в новой вкладке.",
    linkTypeEmailHeader: "Ссылка на адрес эл. почты",
    linkTypeEmailLabel: "Адрес эл. почты",
    linkTypeEmailSubjectLabel: "Тема (необязательно):",
    linkTypeEmailSubjectPlaceHolder: "Введите тему",
    linkTypeEmailToLabel: "Почта:",
    linkTypeEmailToPlaceHolder: "Введите адрес эл. почты",
    linkTypeExternalHeader: "Ссылка на страницу другого сайта",
    linkTypeExternalInfo: "<h2>Не знаете что ввести в это поле?<\/h2><ol>    <li>Найдите страницу, на которую вы хотите сделать ссылку<\/li>    <li>Скопируйте адрес из строки браузера и вставьте в поле выше<\/li><\/ol>",
    linkTypeExternalLabel: "Страница на другом сайте",
    linkTypeExternalLocationLabel: "Адрес:",
    linkTypeExternalLocationPlaceHolder: "Введите URL",
    linkTypeExternalNewWindowHeader: "В новом окне",
    linkTypeExternalNewWindowLabel: "Поставьте флажок, чтобы страница открылась в новой вкладке.",
    linkTypeInternalHeader: "Ссылка на страницу на этом сайте",
    linkTypeInternalInfo: "<h2>Не знаете что ввести в это поле?<\/h2><ol>    <li>Выберите страницу на сайте, на которую хотите сделать ссылку.<\/li>    <li>Скопируйте адрес из строки браузера, исключив \"{{domain}}\" и вставьте его в поле выше.<\/li><\/ol>",
    linkTypeInternalLabel: "Страница на этом сайте",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Введите URL",
    linkTypeInternalNewWindowHeader: "В новом окне",
    linkTypeInternalNewWindowLabel: "Поставьте флажок, чтобы страница открылась в новой вкладке.",
    listOrderedTitle: "Нумерованый список",
    listUnorderedTitle: "Ненумерованый список",
    logoTitle: "Узнать больше о редакторе Raptor",
    loremIpsumTitle: "Вставьте текст для тестирования",
    navigateAway: "\nНа странице несохраненные изменения. \nЕсли вы покинете страницу, изменения будут утеряны",
    pasteDialogCancelButton: "Отмена",
    pasteDialogFormattedCleaned: "Отформатировано и очищено",
    pasteDialogFormattedUnclean: "Отформатировано без очистки",
    pasteDialogOKButton: "Вставить",
    pasteDialogPlain: "Простой текст",
    pasteDialogSource: "Код",
    pasteDialogTitle: "Вставить",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Не удалось получить изменения",
    revisionsApplyButtonDialogCancelButton: "Отмена",
    revisionsApplyButtonDialogOKButton: "Откат",
    revisionsApplyButtonDialogText: "Подтверждение отката",
    revisionsApplyButtonDialogTitle: "Подтверждение отката",
    revisionsApplyButtonText: "Откат",
    revisionsApplyButtonTitle: "Откат",
    revisionsApplyDialogContent: "Это заменит текущее содержимое выбранной ревизии.<br>Текущее содержимое будет добавлен как исправление и будет виден в списке изменений для данного блока.",
    revisionsButtonCurrent: "Ток",
    revisionsButtonViewDiffText: "Различия",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Создан",
    revisionsDialogCancelButton: "Отмена",
    revisionsDialogTitle: "Просмотр содержимого изменения",
    revisionsDiffButtonDialogCancelButton: "Закрыть",
    revisionsDiffButtonDialogTitle: "Просмотр различий",
    revisionsDiffButtonText: "Просмотр различий",
    revisionsDiffButtonTitle: "Просмотр различий",
    revisionsLoading: "Загрузка изменений...",
    revisionsNone: "Никаких изменений для этого элемента",
    revisionsPreviewButtonText: "Предварительный просмотр",
    revisionsPreviewButtonTitle: "Предварительный просмотр",
    revisionsText: "Изменения",
    revisionsTextEmpty: "Без изменений",
    revisionsTitle: "",
    rfmClose: "Закрыть",
    rfmContinue: "Продолжить",
    rfmDelete: "Удалить",
    rfmDownload: "Скачать",
    rfmFileActions: "Действия",
    rfmFileModificationTime: "Изменение",
    rfmFileName: "Имя",
    rfmFileSize: "Размер",
    rfmFileType: "Тип",
    rfmFilteredTotal: "Показывать {{start}} {{end}} {{filteredTotal}} файлов",
    rfmFirst: "Первый",
    rfmHeadingDirectories: "Каталоги",
    rfmHeadingSearch: "Поиск",
    rfmHeadingTags: "Теги",
    rfmHeadingUpload: "Загрузить",
    rfmInsert: "Вставка",
    rfmLast: "Последний",
    rfmSearch: "Перейти",
    rfmTagDocument: "Документ",
    rfmTagImage: "Изображение",
    rfmTotal: ", отфильтровываются из {{total}}",
    rfmUpload: "Загрузить",
    rfmUploadBrowse: "Обзор",
    rfmUploadDrop: "Перетащите файлы сюда",
    rfmUploadFileRemove: "Удалить",
    rfmUploadOr: "или",
    rfmView: "Вид",
    saveJsonFail: "Не удалось сохранить {{failed}} блок (блоков).",
    saveJsonSaved: "Сохранено {{saved}} блоков текста.",
    saveNotConfigured: "Сохранить не настроена или отключена.",
    saveRestFail: "Не удалось сохранить {{failed}} блок (блоков).",
    saveRestPartial: "Сохранено {{saved}} из {{failed}} блоков текста.",
    saveRestSaved: "Сохранено {{saved}} блоков текста.",
    saveTitle: "Сохранить содержимое",
    snippetMenuTitle: "Модули",
    specialCharactersArrows: "Стрелки",
    specialCharactersDialogOKButton: "OK",
    specialCharactersDialogTitle: "Вставить специальные символы",
    specialCharactersGreekAlphabet: "Греческий алфавит",
    specialCharactersHelp: "Нажмите на спецсимвол чтобы добавить. Нажмите \"OK\" для закрытия диалога",
    specialCharactersMathematics: "Математика",
    specialCharactersSymbols: "Символы",
    specialCharactersTitle: "Вставить специальные символы",
    statisticsButtonCharacterOverLimit: "Символов больше ограничения: {{charactersRemaining}}",
    statisticsButtonCharacterRemaining: "Символов осталось: {{charactersRemaining}}",
    statisticsButtonCharacters: "{{characters}} символов",
    statisticsDialogCharactersOverLimit: "{{characters}} символов, свыше ограничения: {{charactersRemaining}}",
    statisticsDialogCharactersRemaining: "{{characters}} символов, до ограничения ещё {{charactersRemaining}}",
    statisticsDialogNotTruncated: "Текст не будет урезан",
    statisticsDialogOKButton: "Ок",
    statisticsDialogSentence: "{{sentences}} предложение",
    statisticsDialogSentences: "{{sentences}} предложений",
    statisticsDialogTitle: "Статистика содержимого",
    statisticsDialogTruncated: "Текст содержит более {{limit}} символов и может быть урезан",
    statisticsDialogWord: "{{words}} слово",
    statisticsDialogWords: "{{words}} слов",
    statisticsTitle: "Нажмите для просмотра статистики",
    tableCreateTitle: "Создать таблицу",
    tableDeleteColumnTitle: "Удалить колонку",
    tableDeleteRowTitle: "Удалить строку",
    tableInsertColumnTitle: "Вставить колонку",
    tableInsertRowTitle: "Вставить строку",
    tableMergeCellsTitle: "Объединить ячейки",
    tableSplitCellsTitle: "Разбить ячейки",
    tagMenuTagAddress: "Адрес",
    tagMenuTagDiv: "Блок",
    tagMenuTagH1: "Заголовок&nbsp;1",
    tagMenuTagH2: "Заголовок&nbsp;2",
    tagMenuTagH3: "Заголовок&nbsp;3",
    tagMenuTagH4: "Заголовок&nbsp;4",
    tagMenuTagNA: "Н\/Д",
    tagMenuTagP: "Параграф",
    tagMenuTagPre: "Форматированный",
    tagMenuTitle: "Изменить стиль элемента",
    tagTreeElementLink: "ВЫбрано {{element}} элементов",
    tagTreeElementTitle: "Нажмите чтобы выбрать содержимое элемента \"{{element}}\"",
    tagTreeRoot: "корень",
    tagTreeRootLink: "Выбрать всё",
    tagTreeRootTitle: "Нажмите чтобы выбрать всё",
    textBlockQuoteTitle: "Цитата",
    textBoldTitle: "Жирный",
    textItalicTitle: "Курсив",
    textSizeDecreaseTitle: "Уменьшить размер шрифта",
    textSizeIncreaseTitle: "Увеличить размер шрифта",
    textStrikeTitle: "Перечеркнутый",
    textSubTitle: "Нижний индекс",
    textSuperTitle: "Верхний индекс",
    textUnderlineTitle: "Подчеркнутый",
    unsavedEditWarningText: "На странице имеются несохраненные изменения",
    viewSourceDialogCancelButton: "Закрыть",
    viewSourceDialogOKButton: "Примеить код",
    viewSourceDialogTitle: "Исходный код содержимого",
    viewSourceTitle: "Посмотреть или изменить код"
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ru.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/sk.js
/**
 * @fileOverview Slovak strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('sk', 'slovenčina', {
    alignCenterTitle: "Zarovnať text na stred",
    alignJustifyTitle: "Zarovnanie textu odôvodnenie",
    alignLeftTitle: "Zarovnanie textu doľava",
    alignRightTitle: "Zarovnanie textu vpravo",
    cancelDialogCancelButton: "Pokračovať v úprave",
    cancelDialogContent: "Naozaj chcete zrušiť upravovanie? Všetky zmeny budú stratené!",
    cancelDialogOKButton: "Zrušiť úpravu",
    cancelDialogTitle: "Zrušiť úpravu",
    cancelTitle: "Zrušiť úpravu",
    classMenuTitle: "Výber štýlov",
    clearFormattingTitle: "Vymazať formátovanie",
    clickButtonToEditText: "Upraviť",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatické",
    colorMenuBasicBlack: "Čierna",
    colorMenuBasicBlue: "Modrá",
    colorMenuBasicGreen: "Zelená",
    colorMenuBasicGrey: "Sivá",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Fialová",
    colorMenuBasicRed: "Červená",
    colorMenuBasicTitle: "Zmena farby textu",
    colorMenuBasicWhite: "Biela",
    dockToElementTitle: "Z doku Dock\/editor prvok",
    dockToScreenTitle: "Vybratie z doku\/doku editor obrazovka",
    embedDialogCancelButton: "Zrušiť",
    embedDialogOKButton: "Vložiť objekt",
    embedDialogTabCode: "Vložiť kód",
    embedDialogTabCodeContent: "Vložiť vložiť kód do textovej oblasti nižšie:",
    embedDialogTabPreview: "Náhľad",
    embedDialogTabPreviewContent: "Náhľad vašich vložený objekt je zobrazená nižšie:",
    embedDialogTitle: "Vložiť objekt",
    embedTitle: "Vložiť objekt",
    errorUINoName: "UI \"{{ui}}\" je neplatný (musí mať vlastnosť name)",
    errorUINotObject: "UI \"{{ui}}\" je neplatný (musí byť objekt)",
    errorUIOverride: "UI \"{{name}}\" sa už zaregistroval a budú prepísané",
    fileManagerDialogTitle: "Správca súborov",
    fileManagerTitle: "Správca súborov",
    floatLeftTitle: "Zarovnať obraz na ľavej",
    floatNoneTitle: "Odstrániť obrázok zarovnať",
    floatRightTitle: "Zosúladiť obrázku vpravo",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Komické bez",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Predvolené písmo",
    fontFamilyMenuFontGeorgia: "Gruzínsko",
    fontFamilyMenuFontImpact: "Vplyv",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Krát New Roman",
    fontFamilyMenuTitle: "Vyberte vaše písmo",
    guidesTitle: "Ukázať prvok sprievodcov",
    historyRedoTitle: "Prerobiť",
    historyUndoTitle: "Vrátiť späť",
    hrCreateTitle: "Vložiť vodorovnú čiaru",
    imageResizeButtonDialogCancelButton: "Zrušiť",
    imageResizeButtonDialogHeight: "Výška obrázka",
    imageResizeButtonDialogHeightPlaceHolder: "Výška",
    imageResizeButtonDialogOKButton: "Zmena veľkosti",
    imageResizeButtonDialogTitle: "Veľkosť obrázka",
    imageResizeButtonDialogWidth: "Šírka obrázka",
    imageResizeButtonDialogWidthPlaceHolder: "Šírka",
    imageResizeButtonText: "Veľkosť obrázka",
    insertFileDialogCancelButton: "Zrušiť",
    insertFileDialogOKButton: "Vloženie súboru",
    insertFileNameLabel: "Názov súboru",
    insertFileNamePlaceHolder: "Názov súboru...",
    insertFileTitle: "Vloženie súboru",
    insertFileURLLabel: "Súbor URL",
    insertFileURLPlaceHolder: "Súbor URL...",
    languageMenuTitle: "Zmena jazyka",
    linkCreateDialogCancelButton: "Zrušiť",
    linkCreateDialogMenuHeader: "Vyberte typ prepojenia",
    linkCreateDialogOKButton: "Vložiť prepojenie",
    linkCreateDialogTitle: "Vložiť prepojenie",
    linkCreateTitle: "Vložiť prepojenie",
    linkRemoveTitle: "Odstrániť odkaz",
    linkTypeDocumentHeader: "Odkaz na dokument alebo iný súbor",
    linkTypeDocumentInfo: "<h2>Nie ste si istí čo dať do poľa vyššie?<\/h2><ol>    <li>Skontrolujte súbor bol nahraný na vašich webových stránkach.<\/li>    <li>Nahraný súbor otvoriť v prehľadávači.<\/li>    <li>Skopírujte adresu URL súboru z panela s adresou prehliadača a vložte ho do vyššie zobrazeného poľa.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokument alebo iný súbor",
    linkTypeDocumentLocationLabel: "Umiestnenie:",
    linkTypeDocumentLocationPlaceHolder: "Zadajte adresu URL",
    linkTypeDocumentNewWindowHeader: "Nové okno",
    linkTypeDocumentNewWindowLabel: "Začiarknutím tohto políčka sa súbor otvoriť v novom okne\/záložke.",
    linkTypeEmailHeader: "Odkaz na e-mailovú adresu",
    linkTypeEmailLabel: "E-mailovú adresu",
    linkTypeEmailSubjectLabel: "Predmet (voliteľné):",
    linkTypeEmailSubjectPlaceHolder: "Zadajte predmet",
    linkTypeEmailToLabel: "E-mail:",
    linkTypeEmailToPlaceHolder: "Zadajte e-mailovú adresu",
    linkTypeExternalHeader: "Odkaz na stránku na inom webe",
    linkTypeExternalInfo: "<h2>Nie ste si istí čo dať do poľa vyššie?<\/h2><ol>    <li>Nájsť stránky na webe chcete prepojiť.<\/li>    <li>Skopírujte webovú adresu z prehliadača do adresného riadku a vložte ho do vyššie zobrazeného poľa.<\/li><\/ol>",
    linkTypeExternalLabel: "Stránky na inú webovú stránku",
    linkTypeExternalLocationLabel: "Umiestnenie:",
    linkTypeExternalLocationPlaceHolder: "Zadajte adresu URL",
    linkTypeExternalNewWindowHeader: "Nové okno",
    linkTypeExternalNewWindowLabel: "Toto políčko prepojenie otvoriť v novom okne\/záložke.",
    linkTypeInternalHeader: "Odkaz na stránky na tejto webovej stránke",
    linkTypeInternalInfo: "<h2>Nie ste si istí čo dať do poľa vyššie?<\/h2><ol>    <li>Nájsť stránky na tejto stránke odkaz.<\/li>    <li>Skopírujte webovú adresu z prehliadača adresného riadku, s výnimkou \"{{domain}}\" a vložte ho do vyššie zobrazeného poľa.<\/li><\/ol>",
    linkTypeInternalLabel: "Stránky na tejto webovej stránke",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Zadajte identifikátor URI",
    linkTypeInternalNewWindowHeader: "Nové okno",
    linkTypeInternalNewWindowLabel: "Toto políčko prepojenie otvoriť v novom okne\/záložke.",
    listOrderedTitle: "Zoradený zoznam",
    listUnorderedTitle: "Nečíslovaný zoznam",
    logoTitle: "Ďalšie informácie o editore WYSIWYG Raptor",
    loremIpsumTitle: "Vložiť fiktívny text pre testovanie",
    navigateAway: "\nExistujú neuložené zmeny na tejto stránke. \nAk opustíte túto stránku stratíte neuložené zmeny",
    pasteDialogCancelButton: "Zrušiť",
    pasteDialogFormattedCleaned: "Formátovať &amp; vyčistiť",
    pasteDialogFormattedUnclean: "Nečistí naformátovaná",
    pasteDialogOKButton: "Vložiť",
    pasteDialogPlain: "Obyčajný Text",
    pasteDialogSource: "Zdrojový kód",
    pasteDialogTitle: "Pasta",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Nepodarilo sa načítať revízie",
    revisionsApplyButtonDialogCancelButton: "Zrušiť",
    revisionsApplyButtonDialogOKButton: "Vrátenie zmien",
    revisionsApplyButtonDialogText: "Potvrdenie vrátenia",
    revisionsApplyButtonDialogTitle: "Potvrdenie vrátenia",
    revisionsApplyButtonText: "Vrátenie zmien",
    revisionsApplyButtonTitle: "Vrátenie zmien",
    revisionsApplyDialogContent: "To nahradí súčasný obsah vybranej revízií.<br>Súčasný obsah budú pridané ako revíziu, a bude viditeľný v zozname revízie pre tento blok.",
    revisionsButtonCurrent: "Aktuálne",
    revisionsButtonViewDiffText: "Rozdiely",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Vytvoril",
    revisionsDialogCancelButton: "Zrušiť",
    revisionsDialogTitle: "Zobraziť obsah revízií",
    revisionsDiffButtonDialogCancelButton: "Zavrieť",
    revisionsDiffButtonDialogTitle: "Zobrazenie rozdielov",
    revisionsDiffButtonText: "Zobrazenie rozdielov",
    revisionsDiffButtonTitle: "Zobrazenie rozdielov",
    revisionsLoading: "Načítanie revízie...",
    revisionsNone: "Žiadne revízie pre tento prvok",
    revisionsPreviewButtonText: "Náhľad",
    revisionsPreviewButtonTitle: "Náhľad",
    revisionsText: "Revízie",
    revisionsTextEmpty: "Žiadne revízie",
    revisionsTitle: "",
    rfmClose: "Zavrieť",
    rfmContinue: "Pokračovať",
    rfmDelete: "Odstrániť",
    rfmDownload: "Na stiahnutie",
    rfmFileActions: "Akcie",
    rfmFileModificationTime: "Upravené",
    rfmFileName: "meno",
    rfmFileSize: "Veľkosť",
    rfmFileType: "Typ",
    rfmFilteredTotal: "Zobrazuje sa {{start}} {{end}} {{filteredTotal}} súborov",
    rfmFirst: "Prvý",
    rfmHeadingDirectories: "Adresáre",
    rfmHeadingSearch: "Hľadať",
    rfmHeadingTags: "Tagy",
    rfmHeadingUpload: "Nahrať",
    rfmInsert: "Vložiť",
    rfmLast: "Posledný",
    rfmSearch: "Ísť",
    rfmTagDocument: "Dokument",
    rfmTagImage: "Obrázok",
    rfmTotal: ", filtrované z {{total}}",
    rfmUpload: "Nahrať",
    rfmUploadBrowse: "Prehľadávať",
    rfmUploadDrop: "Presuňte súbory sem",
    rfmUploadFileRemove: "Odstrániť",
    rfmUploadOr: "alebo",
    rfmView: "Zobrazenie",
    saveJsonFail: "Nepodarilo sa uložiť {{failed}} obsahu tomto",
    saveJsonSaved: "Úspešne uložený {{saved}} tomto obsahu.",
    saveNotConfigured: "Uloženie nie je nakonfigurovaná alebo je vypnutá.",
    saveRestFail: "Nepodarilo sa uložiť {{failed}} tomto obsahu.",
    saveRestPartial: "Uložiť {{saved}} z {{failed}} obsah blokov.",
    saveRestSaved: "Úspešne uložený {{saved}} tomto obsahu.",
    saveTitle: "Uložiť obsah",
    snippetMenuTitle: "Úryvky",
    specialCharactersArrows: "Šípky",
    specialCharactersDialogOKButton: "ok",
    specialCharactersDialogTitle: "Vkladanie špeciálnych znakov",
    specialCharactersGreekAlphabet: "Grécka abeceda",
    specialCharactersHelp: "Kliknite na špeciálny znak pridať. Kliknutím na tlačidlo \"OK\" po dokončení Zavrite toto dialógové okno",
    specialCharactersMathematics: "Matematika",
    specialCharactersSymbols: "Symboly",
    specialCharactersTitle: "Vloženie špeciálneho znaku",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} znakov nad limit",
    statisticsButtonCharacterRemaining: "Počet zostávajúcich znakov {{charactersRemaining}}",
    statisticsButtonCharacters: "znaky {{characters}}",
    statisticsDialogCharactersOverLimit: "znaky {{characters}}, {{charactersRemaining}} prekročenie odporúčanej",
    statisticsDialogCharactersRemaining: "Počet {{characters}}, {{charactersRemaining}} zostávajúcich znakov",
    statisticsDialogNotTruncated: "Obsah bude nie skrátený",
    statisticsDialogOKButton: "ok",
    statisticsDialogSentence: "{{sentences}} veta",
    statisticsDialogSentences: "{{sentences}} viet.",
    statisticsDialogTitle: "Obsah štatistiky",
    statisticsDialogTruncated: "Obsah obsahuje viac ako {{limit}} znakov a môže byť skrátený",
    statisticsDialogWord: "{{words}} lá",
    statisticsDialogWords: "{{words}} slová",
    statisticsTitle: "Kliknite pre zobrazenie štatistiky",
    tableCreateTitle: "Vytvorenie tabuľky",
    tableDeleteColumnTitle: "Odstrániť stĺpec tabuľky",
    tableDeleteRowTitle: "Odstrániť riadok tabuľky",
    tableInsertColumnTitle: "Vložiť stĺpec tabuľky",
    tableInsertRowTitle: "Vložiť riadok tabuľky",
    tableMergeCellsTitle: "Zlúčiť bunky tabuľky",
    tableSplitCellsTitle: "Rozdeliť bunky tabuľky",
    tagMenuTagAddress: "Adresa",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Nadpis 1",
    tagMenuTagH2: "Nadpis 2",
    tagMenuTagH3: "Nadpis 3",
    tagMenuTagH4: "Nadpis 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Odseku",
    tagMenuTagPre: "Vopred naformátované",
    tagMenuTitle: "Zmena prvku štýlu",
    tagTreeElementLink: "Vybrať prvok {{element}}",
    tagTreeElementTitle: "Kliknutím vyberte obsah prvku \"{{element}}\"",
    tagTreeRoot: "koreň",
    tagTreeRootLink: "Vyberte všetky možné upravovať obsah",
    tagTreeRootTitle: "Kliknutím vyberte všetky možné upravovať obsah",
    textBlockQuoteTitle: "Blok citácie",
    textBoldTitle: "Tučné",
    textItalicTitle: "Kurzíva",
    textSizeDecreaseTitle: "Zmenšenie veľkosti textu",
    textSizeIncreaseTitle: "Zväčšiť veľkosť textu",
    textStrikeTitle: "Prečiarknutie",
    textSubTitle: "Sub-skript",
    textSuperTitle: "Super skript",
    textUnderlineTitle: "Podčiarknutie",
    unsavedEditWarningText: "Existujú neuložené zmeny na tejto stránke",
    viewSourceDialogCancelButton: "Zavrieť",
    viewSourceDialogOKButton: "Použiť zdrojový kód",
    viewSourceDialogTitle: "Kód zdroja obsahu",
    viewSourceTitle: "Zobraziť\/upraviť zdrojový kód"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/sk.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/sl.js
/**
 * @fileOverview Slovenian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('sl', 'slovenščina', {
    alignCenterTitle: "Poravnaj besedilo na sredino",
    alignJustifyTitle: "Besedilo poravnajte upravičujejo",
    alignLeftTitle: "Poravnaj besedilo levo",
    alignRightTitle: "Poravnaj besedilo na desno",
    cancelDialogCancelButton: "Nadaljuj urejanje",
    cancelDialogContent: "Ali ste prepričani, da želite preklicati urejanje? Vse spremembe bodo izgubljene!",
    cancelDialogOKButton: "Preklicati urejanje",
    cancelDialogTitle: "Preklicati urejanje",
    cancelTitle: "Preklicati urejanje",
    classMenuTitle: "Slog izbirnik",
    clearFormattingTitle: "Počisti oblikovanje",
    clickButtonToEditText: "Urejanje",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Avtomatski",
    colorMenuBasicBlack: "Black",
    colorMenuBasicBlue: "Modra",
    colorMenuBasicGreen: "Zelena",
    colorMenuBasicGrey: "Siva",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Vijolična",
    colorMenuBasicRed: "Rdeča",
    colorMenuBasicTitle: "Spreminjanje barve besedila",
    colorMenuBasicWhite: "Bela",
    dockToElementTitle: "Nabrežje\/razdružitev urednik za element",
    dockToScreenTitle: "Urednik zaslon nabrežje\/razdružitev",
    embedDialogCancelButton: "Prekliči",
    embedDialogOKButton: "Vdelati predmet",
    embedDialogTabCode: "Vlagati zbornik",
    embedDialogTabCodeContent: "Embed kodo prilepite v besedilno polje spodaj:",
    embedDialogTabPreview: "Predogled",
    embedDialogTabPreviewContent: "Predogled vdelanega predmeta je prikazano spodaj:",
    embedDialogTitle: "Vdelati predmet",
    embedTitle: "Vdelati predmet",
    errorUINoName: "UI \"{{ui}}\" ni veljaven (mora imeti lastnost name)",
    errorUINotObject: "UI \"{{ui}}\" ni veljaven (mora biti predmet)",
    errorUIOverride: "UI »{{name}} «je že registrirano, in ne bo prepisan",
    fileManagerDialogTitle: "File Manager",
    fileManagerTitle: "File Manager",
    floatLeftTitle: "Poravnaj sliko levo",
    floatNoneTitle: "Odstranite sliko poravnate",
    floatRightTitle: "Poravnaj sliko desno",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Strip, brez",
    fontFamilyMenuFontCourier: "Courier New",
    fontFamilyMenuFontDefault: "Privzeta pisava",
    fontFamilyMenuFontGeorgia: "Gruzija",
    fontFamilyMenuFontImpact: "Vpliv",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Krat nov rimski",
    fontFamilyMenuTitle: "Izberite vašo pisavo",
    guidesTitle: "Pokaži element vodniki",
    historyRedoTitle: "Uveljavi",
    historyUndoTitle: "Razveljavi",
    hrCreateTitle: "Vstavite vodoravno pravilo",
    imageResizeButtonDialogCancelButton: "Prekliči",
    imageResizeButtonDialogHeight: "Višina slike",
    imageResizeButtonDialogHeightPlaceHolder: "Višina",
    imageResizeButtonDialogOKButton: "Spremeni velikost",
    imageResizeButtonDialogTitle: "Velikost slike",
    imageResizeButtonDialogWidth: "Širina slike",
    imageResizeButtonDialogWidthPlaceHolder: "Širina",
    imageResizeButtonText: "Velikost slike",
    insertFileDialogCancelButton: "Prekliči",
    insertFileDialogOKButton: "Vstavljanje datoteke",
    insertFileNameLabel: "Ime datoteke",
    insertFileNamePlaceHolder: "Ime datoteke...",
    insertFileTitle: "Vstavljanje datoteke",
    insertFileURLLabel: "URL datoteke",
    insertFileURLPlaceHolder: "URL datoteke...",
    languageMenuTitle: "Menjava jezika",
    linkCreateDialogCancelButton: "Prekliči",
    linkCreateDialogMenuHeader: "Izberite vrsto povezave",
    linkCreateDialogOKButton: "Vstavi povezavo",
    linkCreateDialogTitle: "Vstavi povezavo",
    linkCreateTitle: "Vstavi povezavo",
    linkRemoveTitle: "Odstrani povezavo",
    linkTypeDocumentHeader: "Povezava do dokumenta ali druge datoteke",
    linkTypeDocumentInfo: "<h2>Ne vem, kaj naj v zgornje polje?<\/h2><ol>    <li>Zagotovitev datoteke je prenesena na vašo spletno stran.<\/li>    <li>Odprite naložena datoteka v vašem brskalniku.<\/li>    <li>Copy URL datoteke iz naslovno vrstico vašega brskalnika in ga prilepite v zgornje polje.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokument ali drugo datoteko",
    linkTypeDocumentLocationLabel: "Lokacija:",
    linkTypeDocumentLocationPlaceHolder: "Vnesite spletni naslov",
    linkTypeDocumentNewWindowHeader: "Novo okno",
    linkTypeDocumentNewWindowLabel: "Potrdite to polje, da imajo odprto v a nov obrv okno\/zanka.",
    linkTypeEmailHeader: "Povezava na e-poštni naslov",
    linkTypeEmailLabel: "E-poštni naslov",
    linkTypeEmailSubjectLabel: "Predmet (neobvezno):",
    linkTypeEmailSubjectPlaceHolder: "Vnesite predmet",
    linkTypeEmailToLabel: "E-pošta:",
    linkTypeEmailToPlaceHolder: "Nastopiti email ogovor",
    linkTypeExternalHeader: "Povezava do strani na drugo spletno stran",
    linkTypeExternalInfo: "<h2>Ne vem, kaj naj v zgornje polje?<\/h2><ol>    <li>Poišči stran na spletu, ki jih želite povezati.<\/li>    <li>Kopirajte spletni naslov iz naslovne vrstice brskalnika in ga prilepite v zgornje polje.<\/li><\/ol>",
    linkTypeExternalLabel: "Strani na drugo spletno stran",
    linkTypeExternalLocationLabel: "Lokacija:",
    linkTypeExternalLocationPlaceHolder: "Vnesite spletni naslov",
    linkTypeExternalNewWindowHeader: "Novo okno",
    linkTypeExternalNewWindowLabel: "Potrdite to polje, da povezava odpre novo okno\/zavihek.",
    linkTypeInternalHeader: "Povezava do strani na tej spletni strani",
    linkTypeInternalInfo: "<h2>Ne vem, kaj naj v zgornje polje?<\/h2><ol>    <li>Poišči stran v to povezavo mesta za.<\/li>    <li>Kopirajte spletni naslov s vaš obrv ogovor zasova, razen \"{{domain}}\" in ga prilepite v zgornje polje.<\/li><\/ol>",
    linkTypeInternalLabel: "Strani na tej spletni strani",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Vnesite URI",
    linkTypeInternalNewWindowHeader: "Novo okno",
    linkTypeInternalNewWindowLabel: "Potrdite to polje, da povezava odpre novo okno\/zavihek.",
    listOrderedTitle: "Urejen seznam",
    listUnorderedTitle: "Neurejen seznam",
    logoTitle: "Želite izvedeti več o Raptor WYSIWYG urednik",
    loremIpsumTitle: "Vstavite lutke besedilo za testiranje",
    navigateAway: "\nNa tej strani so neshranjene spremembe. \nČe vi zapustiti to stran, boste izgubili neshranjene spremembe",
    pasteDialogCancelButton: "Prekliči",
    pasteDialogFormattedCleaned: "Oblikovan &amp; očistiti",
    pasteDialogFormattedUnclean: "Oblikovano nečisto",
    pasteDialogOKButton: "Vstavite",
    pasteDialogPlain: "Golo besedilo",
    pasteDialogSource: "Izvorno kodo",
    pasteDialogTitle: "Paste",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Ni bilo mogoče pridobiti revizije",
    revisionsApplyButtonDialogCancelButton: "Prekliči",
    revisionsApplyButtonDialogOKButton: "Povrnitev prejšnjega stanja",
    revisionsApplyButtonDialogText: "Potrditev razveljavitve",
    revisionsApplyButtonDialogTitle: "Potrditev razveljavitve",
    revisionsApplyButtonText: "Povrnitev prejšnjega stanja",
    revisionsApplyButtonTitle: "Povrnitev prejšnjega stanja",
    revisionsApplyDialogContent: "Ta bo nadomestil sedanji vsebini z izbrano revizijo.<br>Trenutne vsebine bodo dodani kot revizije in bo viden na seznamu popravkov za ta blok.",
    revisionsButtonCurrent: "Tok",
    revisionsButtonViewDiffText: "Razlike",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Ustvaril",
    revisionsDialogCancelButton: "Prekliči",
    revisionsDialogTitle: "Ogled vsebine revizije",
    revisionsDiffButtonDialogCancelButton: "Zaprite",
    revisionsDiffButtonDialogTitle: "Pogled razlike",
    revisionsDiffButtonText: "Pogled razlike",
    revisionsDiffButtonTitle: "Pogled razlike",
    revisionsLoading: "Nalaganje revizije...",
    revisionsNone: "Ni popravkov za ta element",
    revisionsPreviewButtonText: "Predogled",
    revisionsPreviewButtonTitle: "Predogled",
    revisionsText: "Revizije",
    revisionsTextEmpty: "Ne revizije",
    revisionsTitle: "",
    rfmClose: "Zaprite",
    rfmContinue: "Še",
    rfmDelete: "Izbrisati",
    rfmDownload: "Download",
    rfmFileActions: "Dejanja",
    rfmFileModificationTime: "Spremenil",
    rfmFileName: "ime",
    rfmFileSize: "Velikost",
    rfmFileType: "Vrsta",
    rfmFilteredTotal: "Kazanje {{start}} zdelati {{end}} {{filteredTotal}} datotek",
    rfmFirst: "Prvi",
    rfmHeadingDirectories: "Imeniki",
    rfmHeadingSearch: "Išči",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Upload",
    rfmInsert: "Vstavite",
    rfmLast: "Nazadnje",
    rfmSearch: "Go",
    rfmTagDocument: "Dokument",
    rfmTagImage: "Podoba",
    rfmTotal: ", izločeni iz {{total}}",
    rfmUpload: "Upload",
    rfmUploadBrowse: "Prebrskaj",
    rfmUploadDrop: "Spustite datoteke tukaj",
    rfmUploadFileRemove: "Odstrani",
    rfmUploadOr: "ali",
    rfmView: "Pogled",
    saveJsonFail: "Shranite {{failed}} skupino(-e) vsebine ni uspelo",
    saveJsonSaved: "Uspešno shranjene vsebine skupino(-e) {{saved}}.",
    saveNotConfigured: "Shrani ni konfigurirana ali je onemogočen.",
    saveRestFail: "Shranite {{failed}} skupino(-e) vsebine ni uspelo.",
    saveRestPartial: "Shranjene {{saved}} od {{failed}} vsebine blokov.",
    saveRestSaved: "Uspešno shranjene vsebine skupino(-e) {{saved}}.",
    saveTitle: "Shranite vsebino",
    snippetMenuTitle: "Odrezki",
    specialCharactersArrows: "Puščice",
    specialCharactersDialogOKButton: "v redu",
    specialCharactersDialogTitle: "Vstavljanje posebnih znakov",
    specialCharactersGreekAlphabet: "Grška abeceda",
    specialCharactersHelp: "Kliknite poseben znak, da ga dodate. Kliknite \"OK\" Ko končate zapreti to pogovorno okno",
    specialCharactersMathematics: "Matematika",
    specialCharactersSymbols: "Simboli",
    specialCharactersTitle: "Vstavljanje posebnih znakov",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} znakov nad mejo",
    statisticsButtonCharacterRemaining: "Preostali znaki {{charactersRemaining}}",
    statisticsButtonCharacters: "{{characters}} znakov",
    statisticsDialogCharactersOverLimit: "{{characters}} znakov, {{charactersRemaining}} nad priporočeno mejo",
    statisticsDialogCharactersRemaining: "{{characters}}, {{charactersRemaining}} preostali znaki",
    statisticsDialogNotTruncated: "Vsebine ne prirezal",
    statisticsDialogOKButton: "v redu",
    statisticsDialogSentence: "{{sentences}} stavek",
    statisticsDialogSentences: "{{sentences}} kazni",
    statisticsDialogTitle: "Vsebine statistika",
    statisticsDialogTruncated: "Vsebine vsebuje več kot {{limit}} znakov in morda skrajšana",
    statisticsDialogWord: "beseda {{words}}",
    statisticsDialogWords: "{{words}} besede",
    statisticsTitle: "Kliknite za ogled statistike",
    tableCreateTitle: "Ustvarjanje tabele",
    tableDeleteColumnTitle: "Izbriši stolpec tabele",
    tableDeleteRowTitle: "Izbriši vrstice tabele",
    tableInsertColumnTitle: "Vstavite stolpec tabele",
    tableInsertRowTitle: "Vstavite vrstice tabele",
    tableMergeCellsTitle: "Spoji celice tabele",
    tableSplitCellsTitle: "Razdelitev celic tabele",
    tagMenuTagAddress: "Naslov",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Naslov 1",
    tagMenuTagH2: "Razdelek 2",
    tagMenuTagH3: "Naslov 3",
    tagMenuTagH4: "Naslov 4",
    tagMenuTagNA: "N \/",
    tagMenuTagP: "Odstavka",
    tagMenuTagPre: "Vnaprej oblikovano",
    tagMenuTitle: "Spreminjanje slog element",
    tagTreeElementLink: "Izberite element {{element}}",
    tagTreeElementTitle: "Kliknite, da izberete vsebino elementa \"{{element}}\"",
    tagTreeRoot: "koren",
    tagTreeRootLink: "Izberite vse mogoče urejati vsebine",
    tagTreeRootTitle: "Kliknite, če želite izbrati vse mogoče urejati vsebine",
    textBlockQuoteTitle: "Citat v bloku",
    textBoldTitle: "Krepko",
    textItalicTitle: "Ležeče",
    textSizeDecreaseTitle: "Pomanjšaj velikost besedila",
    textSizeIncreaseTitle: "Rast tekst velikost",
    textStrikeTitle: "Prečrtano",
    textSubTitle: "Sub-skripta",
    textSuperTitle: "Super-skripta",
    textUnderlineTitle: "Podčrtano",
    unsavedEditWarningText: "Obstajajo neshranjene spremembe na tej strani",
    viewSourceDialogCancelButton: "Zaprite",
    viewSourceDialogOKButton: "Uporablja izvorno kodo",
    viewSourceDialogTitle: "Vsebine izvorne kode",
    viewSourceTitle: "Ogled\/urejanje izvorne kode"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/sl.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/sv.js
/**
 * @fileOverview Swedish strings file.
 * @license http://www.raptor-editor.com/license
 *
 * @author Christoffer Bubach, asmhacker@gmail.com, http://www.bubach.net/
 */
extendLocale('sv', 'Svenska', {
    alignCenterTitle: "Centrerad",
    alignJustifyTitle: "Marginaljustera",
    alignLeftTitle: "Vänsterjustera",
    alignRightTitle: "Högerjustera",
    cancelDialogCancelButton: "Stäng",
    cancelDialogContent: "Är du säker på att du vill sluta redigera? Alla ändringar kommer förloras!",
    cancelDialogOKButton: "OK",
    cancelDialogTitle: "Cancel Editing",
    cancelTitle: "Cancel editing",
    classMenuTitle: "Stil picker",
    clearFormattingTitle: "Ta bort formatering",
    clickButtonToEditPluginButton: "Klicka här för att redigera",
    clickButtonToEditText: "Redigera",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Automatic",
    colorMenuBasicBlack: "Black",
    colorMenuBasicBlue: "Blue",
    colorMenuBasicGreen: "Green",
    colorMenuBasicGrey: "Grey",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Purple",
    colorMenuBasicRed: "Red",
    colorMenuBasicTitle: "Change text color",
    colorMenuBasicWhite: "White",
    dockToElementTitle: "Dock editor to element",
    dockToScreenTitle: "Dock editor to screen",
    embedDialogCancelButton: "Avbryt",
    embedDialogOKButton: "Bädda in objekt",
    embedDialogTabCode: "Bädda in kod",
    embedDialogTabCodeContent: "Klistra in embed-koden i textområdet nedan:",
    embedDialogTabPreview: "Förhandsgranskning",
    embedDialogTabPreviewContent: "En förhandsgranskning av dina inbäddat objekt visas nedan:",
    embedDialogTitle: "Bädda in objekt",
    embedTitle: "Bädda in objekt",
    errorPluginNoName: "Plugin \"{{plugin}}\" is invalid (must have a name property)",
    errorPluginNotObject: "Plugin \"{{plugin}}\" is invalid (must be an object)",
    errorPluginOverride: "Plugin \"{{name}}\" has already been registered, and will be overwritten",
    errorUINoName: "UI \"{{ui}}\" is invalid (must have a name property)",
    errorUINotObject: "UI \"{{ui}}\" is invalid (must be an object)",
    errorUIOverride: "UI \"{{name}}\" has already been registered, and will be overwritten",
    fileManagerDialogTitle: "File Manager",
    fileManagerTitle: "File Manager",
    floatLeftTitle: "Vänsterjustera bild",
    floatNoneTitle: "Remove image align",
    floatRightTitle: "Högerjustera bild",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Comic utan",
    fontFamilyMenuFontCourier: "Courier nya",
    fontFamilyMenuFontDefault: "Standardteckensnitt",
    fontFamilyMenuFontGeorgia: "Georgien",
    fontFamilyMenuFontImpact: "Inverkan",
    fontFamilyMenuFontPalatino: "Palatinen",
    fontFamilyMenuFontTimes: "Gånger nya Roman",
    fontFamilyMenuTitle: "Välj teckensnittets",
    guidesTitle: "Visa stödlinjer",
    historyRedoTitle: "Redo",
    historyUndoTitle: "Undo",
    hrCreateTitle: "Infoga vågräta linjen",
    imageResizeButtonDialogCancelButton: "Avbryt",
    imageResizeButtonDialogHeight: "Bildens höjd",
    imageResizeButtonDialogHeightPlaceHolder: "Höjd",
    imageResizeButtonDialogOKButton: "Ändra storlek på",
    imageResizeButtonDialogTitle: "Ändra storlek på bilden",
    imageResizeButtonDialogWidth: "Bildens bredd",
    imageResizeButtonDialogWidthPlaceHolder: "Bredd",
    imageResizeButtonText: "Ändra storlek på bilden",
    insertFileDialogCancelButton: "Avbryt",
    insertFileDialogOKButton: "Infoga fil",
    insertFileNameLabel: "Filnamn",
    insertFileNamePlaceHolder: "Filnamn...",
    insertFileTitle: "Infoga fil",
    insertFileURLLabel: "URL till fil",
    insertFileURLPlaceHolder: "URL till fil...",
    languageMenuTitle: "Ändra språk",
    linkCreateDialogCancelButton: "Avbryt",
    linkCreateDialogMenuHeader: "Välj en länk",
    linkCreateDialogOKButton: "Infoga länk",
    linkCreateDialogTitle: "Infoga länk",
    linkCreateTitle: "Infoga länk",
    linkDialogCancelButton: "Avbryt",
    linkDialogMenuHeader: "Välj en länktyp:",
    linkDialogOKButton: "Infoga länk",
    linkDialogTitle: "Infoga länk",
    linkRemoveTitle: "Ta bort länk",
    linkTypeDocumentHeader: "Länk till ett dokument eller annan fil",
    linkTypeDocumentInfo: "<h2>Inte säker på vad att sätta i rutan ovan?<\/h2><ol>    <li>Se till att filen har överförts till din webbplats.<\/li>    <li>Öppna den belastat upp arkivera i din webbläsare.<\/li>    <li>Kopiera filens URL från webbläsarens adressfält och klistra in den i rutan ovan.<\/li><\/ol>",
    linkTypeDocumentLabel: "Dokument eller annan fil",
    linkTypeDocumentLocationLabel: "Plats:",
    linkTypeDocumentLocationPlaceHolder: "Ange en URL",
    linkTypeDocumentNewWindowHeader: "Nytt fönster",
    linkTypeDocumentNewWindowLabel: "Markera den här kryssrutan om du vill ha filen öppnas i ett nytt fönster\/flik.",
    linkTypeEmailHeader: "Länka till en epost-adress",
    linkTypeEmailLabel: "Epost adress",
    linkTypeEmailSubjectLabel: "Ämne (frivilligt):",
    linkTypeEmailSubjectPlaceHolder: "Ange ämne",
    linkTypeEmailToLabel: "Epost:",
    linkTypeEmailToPlaceHolder: "Ange epost-adress",
    linkTypeExternalHeader: "Link to a page on another website",
    linkTypeExternalInfo: "<h2>Inte säker på vad som ska fyllas i?<\/h2><ol>    <li>Hitta sidan på webben som du vill länka till.<\/li>    <li>Kopiera webbadressen från webbläsarens adressfält och klistra in i fältet ovan.<\/li><\/ol>",
    linkTypeExternalLabel: "Page on another website",
    linkTypeExternalLocationLabel: "Plats",
    linkTypeExternalLocationPlaceHolder: "Ange en URL",
    linkTypeExternalNewWindowHeader: "Nytt fönster",
    linkTypeExternalNewWindowLabel: "Kryssa i denna box för att öppna länken i ett nytt fönster.",
    linkTypeInternalHeader: "Link to a page on this website",
    linkTypeInternalInfo: "<h2>Inte säker på vad som ska fyllas i?<\/h2><ol>    <li>Find the page on this site link to.<\/li>    <li>Copy the web address from your browser's address bar, excluding \"{{domain}}\" and paste it into the box above.<\/li><\/ol>",
    linkTypeInternalLabel: "Page on this website",
    linkTypeInternalLocationLabel: "Plats",
    linkTypeInternalLocationPlaceHolder: "Ange en URI",
    linkTypeInternalNewWindowHeader: "Nytt fönster",
    linkTypeInternalNewWindowLabel: "Kryssa i denna box för att öppna länken i ett nytt fönster.",
    listOrderedTitle: "Ordnad lista",
    listUnorderedTitle: "Oordnad lista",
    logoTitle: "Lär dig mer om Raptor WYSIWYG Editor",
    loremIpsumTitle: "Infoga dummy text för testning",
    navigateAway: "\nDet finns osparade ändringar på denna sida. \nOm du navigerar bort från denna sida kommer du förlora dina osparade ändringar",
    pasteDialogCancelButton: "Avbryt",
    pasteDialogFormattedCleaned: "Formaterade &amp; rengöras",
    pasteDialogFormattedUnclean: "Formaterade orena",
    pasteDialogOKButton: "Infoga",
    pasteDialogPlain: "Oformaterad Text",
    pasteDialogSource: "Källkoden",
    pasteDialogTitle: "Klistra in",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Det gick inte att hämta revideringar",
    revisionsApplyButtonDialogCancelButton: "Avbryt",
    revisionsApplyButtonDialogOKButton: "Ångring",
    revisionsApplyButtonDialogText: "Rollback bekräftelse",
    revisionsApplyButtonDialogTitle: "Rollback bekräftelse",
    revisionsApplyButtonText: "Ångring",
    revisionsApplyButtonTitle: "Ångring",
    revisionsApplyDialogContent: "Detta kommer att ersätta det aktuella innehållet med valda revideringen.<br>Aktuellt innehåll kommer att läggas som en revidering, och kommer att visas i listan revideringar för detta block.",
    revisionsButtonCurrent: "Nuvarande",
    revisionsButtonViewDiffText: "Skillnader",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Skapad",
    revisionsDialogCancelButton: "Avbryt",
    revisionsDialogTitle: "Visa innehåll revideringar",
    revisionsDiffButtonDialogCancelButton: "Stäng",
    revisionsDiffButtonDialogTitle: "Visa skillnader",
    revisionsDiffButtonText: "Visa skillnader",
    revisionsDiffButtonTitle: "Visa skillnader",
    revisionsLoading: "Laddar ändringar...",
    revisionsNone: "Inga revideringar för detta element",
    revisionsPreviewButtonText: "Förhandsgranskning",
    revisionsPreviewButtonTitle: "Förhandsgranskning",
    revisionsText: "Revideringar",
    revisionsTextEmpty: "Inga ändringar",
    revisionsTitle: "",
    rfmClose: "Stäng",
    rfmContinue: "Fortsätta",
    rfmDelete: "Ta bort",
    rfmDownload: "Hämta",
    rfmFileActions: "Åtgärder",
    rfmFileModificationTime: "Modifierade",
    rfmFileName: "Namn",
    rfmFileSize: "Storlek",
    rfmFileType: "Typ",
    rfmFilteredTotal: "{{start}} visar att {{end}} {{filteredTotal}} filer",
    rfmFirst: "Första",
    rfmHeadingDirectories: "Kataloger",
    rfmHeadingSearch: "Sök",
    rfmHeadingTags: "Taggar",
    rfmHeadingUpload: "Ladda upp",
    rfmInsert: "Infoga",
    rfmLast: "Senaste",
    rfmSearch: "Gå",
    rfmTagDocument: "Dokument",
    rfmTagImage: "Bild",
    rfmTotal: ", filtreras från {{total}}",
    rfmUpload: "Ladda upp",
    rfmUploadBrowse: "Bläddra",
    rfmUploadDrop: "Släpp filer här",
    rfmUploadFileRemove: "Ta bort",
    rfmUploadOr: "eller",
    rfmView: "Visa",
    saveJsonFail: "Det gick inte att spara {{failed}} innehåll (n)",
    saveJsonSaved: "Har sparats {{saved}} innehåll (n).",
    saveNotConfigured: "Spara inte har konfigurerats, eller är inaktiverad.",
    saveRestFail: "Det gick inte att spara {{failed}} innehåll (n).",
    saveRestPartial: "Sparade {{saved}} av {{failed}} innehåll.",
    saveRestSaved: "Har sparats {{saved}} innehåll (n).",
    saveTitle: "Save content",
    snippetMenuTitle: "Snuttar",
    specialCharactersArrows: "Pilar",
    specialCharactersDialogOKButton: "Okej",
    specialCharactersDialogTitle: "Infoga specialtecken",
    specialCharactersGreekAlphabet: "Grekiska alfabetet",
    specialCharactersHelp: "Klicka på ett specialtecken för att lägga till den. Klicka på \"OK\" när du är klar för att stänga dialogrutan",
    specialCharactersMathematics: "Matematik",
    specialCharactersSymbols: "Symboler",
    specialCharactersTitle: "Infoga ett specialtecken",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} bokstäver över gränsen",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} bokstäver återstår",
    statisticsButtonCharacters: "{{characters}} bokstäver",
    statisticsDialogCharactersOverLimit: "{{characters}} bokstäver, {{charactersRemaining}} över den rekommenderade gränsen",
    statisticsDialogCharactersRemaining: "{{characters}} bokstäver, {{charactersRemaining}} kvarstående",
    statisticsDialogNotTruncated: "Innehållet kommer inte att avkortas",
    statisticsDialogOKButton: "OK",
    statisticsDialogSentence: "{{sentences}} sentence",
    statisticsDialogSentences: "{{sentences}} meningar",
    statisticsDialogTitle: "Innehållsstatistik",
    statisticsDialogTruncated: "Innehållet omfattar mer än {{limit}} bokstäver och kan bli avkortat",
    statisticsDialogWord: "{{words}} ord",
    statisticsDialogWords: "{{words}} ord",
    statisticsTitle: "Klicka här för visa statistik",
    tableCreateTitle: "Create table",
    tableDeleteColumnTitle: "Delete table column",
    tableDeleteRowTitle: "Delete table row",
    tableInsertColumnTitle: "Insert table column",
    tableInsertRowTitle: "Insert table row",
    tableMergeCellsTitle: "Sammanfoga tabellceller",
    tableSplitCellsTitle: "Dela tabellceller",
    tagMenuTagAddress: "Adress",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Rubrik&nbsp;1",
    tagMenuTagH2: "Rubrik&nbsp;2",
    tagMenuTagH3: "Rubrik&nbsp;3",
    tagMenuTagH4: "Rubrik 4",
    tagMenuTagNA: "Ej tillgänglig",
    tagMenuTagP: "Paragraf",
    tagMenuTagPre: "Förformaterade",
    tagMenuTitle: "Change element style",
    tagTreeElementLink: "Markera {{element}} elementet",
    tagTreeElementTitle: "Klicka här för att markera \"{{element}}\" elementet",
    tagTreeRoot: "root",
    tagTreeRootLink: "Markera alla redigerbara områden",
    tagTreeRootTitle: "Klicka här för att markera allt redigerbart innehåll",
    textBlockQuoteTitle: "Citat",
    textBoldTitle: "Fet",
    textItalicTitle: "Kursiv",
    textSizeDecreaseTitle: "Förminska text",
    textSizeIncreaseTitle: "Öka textstorleken",
    textStrikeTitle: "Genomstryken",
    textSubTitle: "Nedsänkt",
    textSuperTitle: "Upphöjt",
    textUnderlineTitle: "Understryken",
    unsavedEditWarningText: "There are unsaved changes on this page",
    viewSourceDialogCancelButton: "Stäng",
    viewSourceDialogOKButton: "Apply source code",
    viewSourceDialogTitle: "Content source code",
    viewSourceTitle: "View\/edit source code"
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/sv.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/th.js
/**
 * @fileOverview Thai strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('th', 'ไทย', {
    alignCenterTitle: "จัดกึ่งกลางข้อความ",
    alignJustifyTitle: "จัดตำแหน่งข้อความชิดขอบ",
    alignLeftTitle: "จัดชิดซ้ายข้อความ",
    alignRightTitle: "จัดชิดขวาข้อความ",
    cancelDialogCancelButton: "ดำเนินการแก้ไขต่อไป",
    cancelDialogContent: "คุณต้องการยกเลิกการแก้ไขได้หรือไม่ การเปลี่ยนแปลงทั้งหมดจะหายไป",
    cancelDialogOKButton: "ยกเลิกการแก้ไข",
    cancelDialogTitle: "ยกเลิกการแก้ไข",
    cancelTitle: "ยกเลิกการแก้ไข",
    classMenuTitle: "เลือกลักษณะ",
    clearFormattingTitle: "ล้างการจัดรูปแบบ",
    clickButtonToEditText: "แก้ไข",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "อัตโนมัติ",
    colorMenuBasicBlack: "สีดำ",
    colorMenuBasicBlue: "บลู",
    colorMenuBasicGreen: "กรีน",
    colorMenuBasicGrey: "สีเทา",
    colorMenuBasicOrange: "สีส้ม",
    colorMenuBasicPurple: "สีม่วง",
    colorMenuBasicRed: "สีแดง",
    colorMenuBasicTitle: "เปลี่ยนสีข้อความ",
    colorMenuBasicWhite: "สีขาว",
    dockToElementTitle: "ท่าเรือ\/ชิดแก้ไของค์ประกอบ",
    dockToScreenTitle: "ท่าเรือ\/ชิดตัวแก้ไขหน้าจอ",
    embedDialogCancelButton: "ยกเลิก",
    embedDialogOKButton: "ฝังวัตถุ",
    embedDialogTabCode: "ฝังรหัส",
    embedDialogTabCodeContent: "วางโค้ดของคุณฝังในบริเวณข้อความด้านล่างนี้:",
    embedDialogTabPreview: "ดูตัวอย่าง",
    embedDialogTabPreviewContent: "ตัวอย่างของวัตถุที่ฝังตัวอยู่ด้านล่าง:",
    embedDialogTitle: "ฝังวัตถุ",
    embedTitle: "ฝังวัตถุ",
    errorUINoName: "UI \"{{ui}}\" ไม่ถูกต้อง (ต้องมีคุณสมบัติชื่อ)",
    errorUINotObject: "UI \"{{ui}}\" ไม่ถูกต้อง (ต้องเป็นวัตถุ)",
    errorUIOverride: "UI \"{{name}}\" รับลงทะเบียนแล้ว และจะถูกเขียนทับ",
    fileManagerDialogTitle: "ตัวจัดการแฟ้ม",
    fileManagerTitle: "ตัวจัดการแฟ้ม",
    floatLeftTitle: "จัดตำแหน่งรูปภาพไปทางซ้าย",
    floatNoneTitle: "เอาภาพการจัดตำแหน่ง",
    floatRightTitle: "จัดตำแหน่งรูปภาพทางด้านขวา",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "การ์ตูนไม่มี",
    fontFamilyMenuFontCourier: "พัสดุใหม่",
    fontFamilyMenuFontDefault: "แบบอักษรเริ่มต้น",
    fontFamilyMenuFontGeorgia: "จอร์เจีย",
    fontFamilyMenuFontImpact: "ผลกระทบต่อ",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "เวลาโรมันใหม่",
    fontFamilyMenuTitle: "เลือกแบบอักษรของคุณ",
    guidesTitle: "แสดงองค์ประกอบแผนที่",
    historyRedoTitle: "ทำซ้ำ",
    historyUndoTitle: "เลิกทำ",
    hrCreateTitle: "แทรกเส้นแนวนอน",
    imageResizeButtonDialogCancelButton: "ยกเลิก",
    imageResizeButtonDialogHeight: "ความสูงของรูป",
    imageResizeButtonDialogHeightPlaceHolder: "ความสูง",
    imageResizeButtonDialogOKButton: "การปรับขนาด",
    imageResizeButtonDialogTitle: "ปรับขนาดรูปภาพ",
    imageResizeButtonDialogWidth: "ความกว้างของรูป",
    imageResizeButtonDialogWidthPlaceHolder: "ความกว้าง",
    imageResizeButtonText: "ปรับขนาดรูปภาพ",
    insertFileDialogCancelButton: "ยกเลิก",
    insertFileDialogOKButton: "แทรกแฟ้ม",
    insertFileNameLabel: "ชื่อแฟ้ม",
    insertFileNamePlaceHolder: "ชื่อแฟ้ม...",
    insertFileTitle: "แทรกแฟ้ม",
    insertFileURLLabel: "URL ของแฟ้ม",
    insertFileURLPlaceHolder: "แฟ้ม URL ...",
    languageMenuTitle: "เปลี่ยนภาษา",
    linkCreateDialogCancelButton: "ยกเลิก",
    linkCreateDialogMenuHeader: "เลือกชนิดของลิงค์",
    linkCreateDialogOKButton: "แทรกการเชื่อมโยง",
    linkCreateDialogTitle: "แทรกการเชื่อมโยง",
    linkCreateTitle: "แทรกการเชื่อมโยง",
    linkRemoveTitle: "ลบลิงค์",
    linkTypeDocumentHeader: "เชื่อมโยงไปยังเอกสารหรือแฟ้มอื่น ๆ",
    linkTypeDocumentInfo: "<h2>ไม่แน่ใจที่จะใส่ลงในกล่องข้างต้น<\/h2><ol>    <li>ให้แน่ใจว่า แฟ้มได้ถูกอัปโหลดไปยังเว็บไซต์ของคุณ<\/li>    <li>เปิดแฟ้มอัปโหลดในเบราว์เซอร์ของคุณ<\/li>    <li>คัดลอก URL ของแฟ้มจากแถบอยู่ของเบราว์เซอร์ของคุณ และวางลงในช่องด้านบน<\/li><\/ol>",
    linkTypeDocumentLabel: "เอกสารหรือแฟ้มอื่น ๆ",
    linkTypeDocumentLocationLabel: "สถานที่ตั้ง:",
    linkTypeDocumentLocationPlaceHolder: "ใส่ URL",
    linkTypeDocumentNewWindowHeader: "หน้าต่างใหม่",
    linkTypeDocumentNewWindowLabel: "เลือกกล่องนี้จะมีแฟ้มที่เปิดในเบราว์เซอร์หน้าต่าง\/แท็บใหม่",
    linkTypeEmailHeader: "เชื่อมโยงไปยังที่อยู่อีเมล์",
    linkTypeEmailLabel: "ที่อยู่อีเมล์",
    linkTypeEmailSubjectLabel: "เรื่อง (เลือกได้):",
    linkTypeEmailSubjectPlaceHolder: "ป้อนชื่อเรื่อง",
    linkTypeEmailToLabel: "อีเมล:",
    linkTypeEmailToPlaceHolder: "ป้อนที่อยู่อีเมล์",
    linkTypeExternalHeader: "เชื่อมโยงไปยังหน้าเว็บไซต์อื่น",
    linkTypeExternalInfo: "<h2>ไม่แน่ใจที่จะใส่ลงในกล่องข้างต้น<\/h2><ol>    <li>ค้นหาหน้าเว็บที่คุณต้องการเชื่อมโยง<\/li>    <li>คัดลอกอยู่เว็บจากแถบที่อยู่ของเบราว์เซอร์ของคุณ และวางลงในช่องด้านบน<\/li><\/ol>",
    linkTypeExternalLabel: "หน้าบนเว็บไซต์อื่น",
    linkTypeExternalLocationLabel: "สถานที่ตั้ง:",
    linkTypeExternalLocationPlaceHolder: "ใส่ URL",
    linkTypeExternalNewWindowHeader: "หน้าต่างใหม่",
    linkTypeExternalNewWindowLabel: "เลือกกล่องนี้จะมีการเชื่อมโยงที่เปิดในเบราว์เซอร์หน้าต่าง\/แท็บใหม่",
    linkTypeInternalHeader: "เชื่อมโยงไปยังหน้าเว็บไซต์นี้",
    linkTypeInternalInfo: "<h2>ไม่แน่ใจที่จะใส่ลงในกล่องข้างต้น<\/h2><ol>    <li>พบหน้าเชื่อมโยงกับเว็บไซต์นี้<\/li>    <li>คัดลอกอยู่เว็บจากแถบ ยกเว้น \"{{domain}}\" ที่อยู่ในเบราว์เซอร์ของคุณ และวางลงในช่องด้านบน<\/li><\/ol>",
    linkTypeInternalLabel: "หน้าบนเว็บไซต์นี้",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "ระบุ URI",
    linkTypeInternalNewWindowHeader: "หน้าต่างใหม่",
    linkTypeInternalNewWindowLabel: "เลือกกล่องนี้จะมีการเชื่อมโยงที่เปิดในเบราว์เซอร์หน้าต่าง\/แท็บใหม่",
    listOrderedTitle: "รายการสั่งซื้อ",
    listUnorderedTitle: "โดยปกติ",
    logoTitle: "เรียนรู้เพิ่มเติมเกี่ยวกับ WYSIWYG Editor ของ Raptor",
    loremIpsumTitle: "แทรกข้อความกระพริบสำหรับการทดสอบ",
    navigateAway: "\nมีแปลงหน้านี้ไว้ \nถ้าคุณออกจากหน้านี้ คุณจะสูญเสียการเปลี่ยนแปลงของคุณไม่ได้บันทึก",
    pasteDialogCancelButton: "ยกเลิก",
    pasteDialogFormattedCleaned: "รูปแบบ และการทำความสะอาด",
    pasteDialogFormattedUnclean: "รูปเที่ยว",
    pasteDialogOKButton: "แทรก",
    pasteDialogPlain: "ข้อความล้วน",
    pasteDialogSource: "รหัสแหล่งที่มา",
    pasteDialogTitle: "วาง",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "ไม่สามารถเรียกใช้การปรับปรุง",
    revisionsApplyButtonDialogCancelButton: "ยกเลิก",
    revisionsApplyButtonDialogOKButton: "ย้อนกลับ",
    revisionsApplyButtonDialogTitle: "ย้อนกลับยืนยัน",
    revisionsApplyButtonText: "ย้อนกลับ",
    revisionsApplyButtonTitle: "ย้อนกลับ",
    revisionsApplyDialogContent: "นี้จะแทนเนื้อหาปัจจุบัน ด้วยการปรับปรุงที่เลือก<br>เนื้อหาปัจจุบันจะเพิ่มเป็นการปรับปรุง และจะปรากฏในรายการการปรับปรุงสำหรับบล็อกนี้",
    revisionsButtonCurrent: "ปัจจุบัน",
    revisionsButtonViewDiffText: "ความแตกต่าง",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "สร้าง",
    revisionsDialogCancelButton: "ยกเลิก",
    revisionsDialogTitle: "ดูการปรับปรุงเนื้อหา",
    revisionsDiffButtonDialogCancelButton: "ปิด",
    revisionsDiffButtonDialogTitle: "ดูความแตกต่าง",
    revisionsDiffButtonText: "ดูความแตกต่าง",
    revisionsDiffButtonTitle: "ดูความแตกต่าง",
    revisionsLoading: "โหลดปรับปรุง...",
    revisionsNone: "การปรับปรุงสำหรับองค์ประกอบนี้",
    revisionsPreviewButtonText: "ดูตัวอย่าง",
    revisionsPreviewButtonTitle: "ดูตัวอย่าง",
    revisionsText: "การปรับปรุง",
    revisionsTextEmpty: "ไม่ปรับปรุง",
    revisionsTitle: "",
    rfmClose: "ปิด",
    rfmContinue: "ดำเนินการต่อไป",
    rfmDelete: "ลบ",
    rfmDownload: "ดาวน์โหลด",
    rfmFileActions: "การดำเนินการ",
    rfmFileModificationTime: "การปรับเปลี่ยน",
    rfmFileName: "ชื่อ",
    rfmFileSize: "ขนาด",
    rfmFileType: "ชนิด",
    rfmFilteredTotal: "แสดง {{start}} {{end}} {{filteredTotal}} แฟ้ม",
    rfmFirst: "ครั้งแรก",
    rfmHeadingDirectories: "ไดเรกทอรี",
    rfmHeadingSearch: "ค้นหา",
    rfmHeadingTags: "แท็ก",
    rfmHeadingUpload: "อัปโหลด",
    rfmInsert: "แทรก",
    rfmLast: "ล่าสุด",
    rfmSearch: "ไป",
    rfmTagDocument: "เอกสาร",
    rfmTagImage: "รูปภาพ",
    rfmTotal: "กรองจาก {{total}}",
    rfmUpload: "อัปโหลด",
    rfmUploadBrowse: "เรียกดู",
    rfmUploadDrop: "วางไฟล์ที่นี่",
    rfmUploadFileRemove: "เอาออก",
    rfmUploadOr: "หรือ",
    rfmView: "ดู",
    saveJsonFail: "ไม่สามารถบันทึกเนื้อหา block(s) {{failed}}",
    saveJsonSaved: "บันทึกเนื้อหา block(s) {{saved}} เรียบร้อยแล้ว",
    saveNotConfigured: "บันทึกไม่ได้รับการกำหนดค่า หรือถูกปิดใช้งาน",
    saveRestFail: "ไม่สามารถบันทึกเนื้อหา block(s) {{failed}}",
    saveRestPartial: "บันทึก {{saved}} จากบล็อกเนื้อหาไม่ {{failed}}",
    saveRestSaved: "บันทึกเนื้อหา block(s) {{saved}} เรียบร้อยแล้ว",
    saveTitle: "บันทึกเนื้อหา",
    snippetMenuTitle: "โค้ด",
    specialCharactersArrows: "ลูกศร",
    specialCharactersDialogOKButton: "ตกลง, ได้",
    specialCharactersDialogTitle: "แทรกอักขระพิเศษ",
    specialCharactersGreekAlphabet: "อักษรกรีก",
    specialCharactersHelp: "คลิกเพื่อเพิ่มอักขระพิเศษ คลิก \"ตกลง\" เมื่อเสร็จสิ้นเพื่อปิดกล่องโต้ตอบนี้",
    specialCharactersMathematics: "คณิตศาสตร์",
    specialCharactersSymbols: "สัญลักษณ์",
    specialCharactersTitle: "แทรกอักขระพิเศษ",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} อักขระเกินกว่า",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} อักขระที่เหลือ",
    statisticsButtonCharacters: "อักขระ {{characters}}",
    statisticsDialogCharactersOverLimit: "{{characters}} อักขระ, {{charactersRemaining}} มากกว่าขีดจำกัดแนะนำ",
    statisticsDialogCharactersRemaining: "อักขระ {{characters}}, {{charactersRemaining}} ที่เหลือ",
    statisticsDialogNotTruncated: "เนื้อหาจะไม่ถูกตัด",
    statisticsDialogOKButton: "ตกลง, ได้",
    statisticsDialogSentence: "ประโยค {{sentences}}",
    statisticsDialogSentences: "ประโยค {{sentences}}",
    statisticsDialogTitle: "เนื้อหาสถิติ",
    statisticsDialogTruncated: "เนื้อหาประกอบด้วยมากกว่าตัว {{limit}} และอาจถูกตัดทอน",
    statisticsDialogWord: "{{words}} คำ",
    statisticsDialogWords: "{{words}} หา",
    statisticsTitle: "คลิกเพื่อดูสถิติ",
    tableCreateTitle: "สร้างตาราง",
    tableDeleteColumnTitle: "ลบคอลัมน์ในตาราง",
    tableDeleteRowTitle: "ลบแถวของตาราง",
    tableInsertColumnTitle: "แทรกคอลัมน์ตาราง",
    tableInsertRowTitle: "แทรกแถวตาราง",
    tableMergeCellsTitle: "ผสานเซลล์ตาราง",
    tableSplitCellsTitle: "แบ่งเซลล์",
    tagMenuTagAddress: "ที่อยู่",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "หัวเรื่อง 1",
    tagMenuTagH2: "หัวข้อ 2",
    tagMenuTagH3: "หัวข้อ 3",
    tagMenuTagH4: "หัวข้อ 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "ย่อหน้า",
    tagMenuTagPre: "จัดรูปแบบไว้ล่วงหน้า",
    tagMenuTitle: "เปลี่ยนลักษณะองค์ประกอบ",
    tagTreeElementLink: "เลือกองค์ประกอบ {{element}}",
    tagTreeElementTitle: "คลิกเพื่อเลือกเนื้อหาขององค์ประกอบ \"{{element}}\"",
    tagTreeRoot: "ราก",
    tagTreeRootLink: "เลือกเนื้อหาทั้งหมดสามารถแก้ไขได้",
    tagTreeRootTitle: "คลิกเพื่อเลือกเนื้อหาทั้งหมดสามารถแก้ไขได้",
    textBlockQuoteTitle: "บล็อกใบเสนอราคา",
    textBoldTitle: "ตัวหนา",
    textItalicTitle: "ตัวเอียง",
    textSizeDecreaseTitle: "ลดขนาดข้อความ",
    textSizeIncreaseTitle: "เพิ่มขนาดข้อความ",
    textStrikeTitle: "ตีผ่าน",
    textSubTitle: "สคริปต์ย่อย",
    textSuperTitle: "ซุปเปอร์สคริปต์",
    textUnderlineTitle: "ขีดเส้นใต้",
    unsavedEditWarningText: "มีแปลงที่หน้านี้",
    viewSourceDialogCancelButton: "ปิด",
    viewSourceDialogOKButton: "ใช้รหัสแหล่งที่มา",
    viewSourceDialogTitle: "รหัสแหล่งที่มาเนื้อหา",
    viewSourceTitle: "ดูหรือแก้ไขรหัสแหล่งที่มา"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/th.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/tr.js
/**
 * @fileOverview Turkish strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('tr', 'Türkçe', {
    alignCenterTitle: "Metin Hizala",
    alignJustifyTitle: "Metin hizalama haklı",
    alignLeftTitle: "Metni Sola Hizala",
    alignRightTitle: "Metni Sağa Hizala",
    cancelDialogCancelButton: "Düzenlemeye devam",
    cancelDialogContent: "Düzenlemeyi iptal etmek istediğinizden emin misiniz? Tüm değişiklikler kaybolacak.",
    cancelDialogOKButton: "Düzenlemeyi iptal et",
    cancelDialogTitle: "Düzenlemeyi iptal et",
    cancelTitle: "Düzenlemeyi iptal et",
    classMenuTitle: "Stil seçicisini",
    clearFormattingTitle: "Biçimlendirmeyi Temizle",
    clickButtonToEditText: "Düzenle",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Otomatik",
    colorMenuBasicBlack: "Siyah",
    colorMenuBasicBlue: "Mavi",
    colorMenuBasicGreen: "Yeşil",
    colorMenuBasicGrey: "Gri",
    colorMenuBasicOrange: "Turuncu",
    colorMenuBasicPurple: "Mor",
    colorMenuBasicRed: "Kırmızı",
    colorMenuBasicTitle: "Metin rengini değiştirme",
    colorMenuBasicWhite: "Beyaz",
    dockToElementTitle: "Rıhtım\/yuvadan editörü öğesi",
    dockToScreenTitle: "Dock yuvadan\/Editör ekranına",
    embedDialogCancelButton: "İptal",
    embedDialogOKButton: "Nesneyi katıştırma",
    embedDialogTabCode: "Embed kodu",
    embedDialogTabCodeContent: "Embed kodu ve metin alanına yapıştırın:",
    embedDialogTabPreview: "Önizleme",
    embedDialogTabPreviewContent: "Önizleme katıştırılmış nesnenin altında görüntülenir:",
    embedDialogTitle: "Nesneyi katıştırma",
    embedTitle: "Nesneyi katıştırma",
    errorUINoName: "UI \"{{ui}}\" geçersiz (name özelliği olması gerekir)",
    errorUINotObject: "UI \"{{ui}}\" geçersiz (bir nesne olması gerekir)",
    errorUIOverride: "UI \"{{name}}\" zaten kayıtlı ve üzerine yazılır.",
    fileManagerDialogTitle: "Dosya Yöneticisi",
    fileManagerTitle: "Dosya Yöneticisi",
    floatLeftTitle: "Resmi sola hizala",
    floatNoneTitle: "Resmi kaldırma hizalamak",
    floatRightTitle: "Resim sağa hizalama",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Çizgi olmadan",
    fontFamilyMenuFontCourier: "Kurye yeni",
    fontFamilyMenuFontDefault: "Varsayılan yazı tipi",
    fontFamilyMenuFontGeorgia: "Gürcistan",
    fontFamilyMenuFontImpact: "Etkisi",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Times New Roman",
    fontFamilyMenuTitle: "Yazı tipi seç",
    guidesTitle: "Öğe kılavuzları göster",
    historyRedoTitle: "Yinele",
    historyUndoTitle: "Geri alma",
    hrCreateTitle: "Yatay çizgi ekle",
    imageResizeButtonDialogCancelButton: "İptal",
    imageResizeButtonDialogHeight: "Resim yüksekliği",
    imageResizeButtonDialogHeightPlaceHolder: "Yükseklik",
    imageResizeButtonDialogOKButton: "Yeniden boyutlandırma",
    imageResizeButtonDialogTitle: "Resim yeniden boyutlandırma",
    imageResizeButtonDialogWidth: "Resim genişliği",
    imageResizeButtonDialogWidthPlaceHolder: "Genişlik",
    imageResizeButtonText: "Resim yeniden boyutlandırma",
    insertFileDialogCancelButton: "İptal",
    insertFileDialogOKButton: "Dosya Ekle",
    insertFileNameLabel: "Dosya adı",
    insertFileNamePlaceHolder: "Dosya adı...",
    insertFileTitle: "Dosya Ekle",
    insertFileURLLabel: "URL dosya",
    insertFileURLPlaceHolder: "URL dosya...",
    languageMenuTitle: "Dili Değiştir",
    linkCreateDialogCancelButton: "İptal",
    linkCreateDialogMenuHeader: "Bir bağlantı türü seçin",
    linkCreateDialogOKButton: "Bağlantı Ekle",
    linkCreateDialogTitle: "Bağlantı Ekle",
    linkCreateTitle: "Bağlantı Ekle",
    linkRemoveTitle: "Bağlantıyı Kaldır",
    linkTypeDocumentHeader: "Bir belge veya başka bir dosyaya bağlantı",
    linkTypeDocumentInfo: "<h2>Değil emin ne Yukarıdaki kutuya koymak?<\/h2><ol>    <li>Dosya, Web sitenize karşıya emin olun.<\/li>    <li>Karşıya yüklenen dosyayı tarayıcınızda açın.<\/li>    <li>Tarayıcınızın adres çubuğundan dosyasının URL'sini kopyalayın ve Yukarıdaki kutuya yapıştırın.<\/li><\/ol>",
    linkTypeDocumentLabel: "Belge veya diğer dosya",
    linkTypeDocumentLocationLabel: "Yer:",
    linkTypeDocumentLocationPlaceHolder: "Bir URL girin",
    linkTypeDocumentNewWindowHeader: "Yeni pencere",
    linkTypeDocumentNewWindowLabel: "Bir tarayıcı penceresi\/açık içinde yeni etiket dosya için bu kutuyu işaretleyin.",
    linkTypeEmailHeader: "Bir e-posta adresine bağlantı",
    linkTypeEmailLabel: "E-posta adresi",
    linkTypeEmailSubjectLabel: "Konu (isteğe bağlı):",
    linkTypeEmailSubjectPlaceHolder: "Konu girin",
    linkTypeEmailToLabel: "E-posta:",
    linkTypeEmailToPlaceHolder: "E-posta adresinizi girin",
    linkTypeExternalHeader: "Başka bir Web sayfasına bağlantı",
    linkTypeExternalInfo: "<h2>Değil emin ne Yukarıdaki kutuya koymak?<\/h2><ol>    <li>Bağlantı kurmak istediğiniz Web sayfası bulabilirsiniz.<\/li>    <li>Web adresi tarayıcınızın adres çubuğundan kopyalayın ve Yukarıdaki kutuya yapıştırın.<\/li><\/ol>",
    linkTypeExternalLabel: "Başka bir Web sayfasında",
    linkTypeExternalLocationLabel: "Yer:",
    linkTypeExternalLocationPlaceHolder: "Bir URL girin",
    linkTypeExternalNewWindowHeader: "Yeni pencere",
    linkTypeExternalNewWindowLabel: "Bir tarayıcı penceresi\/açık içinde yeni etiket bağlantı için bu kutuyu işaretleyin.",
    linkTypeInternalHeader: "Bu Web sayfasına bağlantı",
    linkTypeInternalInfo: "<h2>Değil emin ne Yukarıdaki kutuya koymak?<\/h2><ol>    <li>Sayfayı bu site bağlantısını bulun.<\/li>    <li>Tarayıcınızın adres çubuğu \"{{domain}}\" hariç olmak üzere web adresini kopyalayın ve Yukarıdaki kutuya yapıştırın.<\/li><\/ol>",
    linkTypeInternalLabel: "Bu Web sayfası",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "URL girin",
    linkTypeInternalNewWindowHeader: "Yeni pencere",
    linkTypeInternalNewWindowLabel: "Bir tarayıcı penceresi\/açık içinde yeni etiket bağlantı için bu kutuyu işaretleyin.",
    listOrderedTitle: "Sıralı liste",
    listUnorderedTitle: "Sırasız liste",
    logoTitle: "Raptor WYSIWYG Düzenleyicisi hakkında daha fazla bilgi edinin",
    loremIpsumTitle: "Test dummy metin ekleme",
    navigateAway: "\nBu sayfada kaydedilmemiş değişiklikler. \nBu sayfadan ayrılırsanız kaydedilmemiş değişiklikleriniz kaybolur.",
    pasteDialogCancelButton: "İptal",
    pasteDialogFormattedCleaned: "Biçimlendirilmiş &amp; temizlik",
    pasteDialogFormattedUnclean: "Pis biçimlendirilmiş",
    pasteDialogOKButton: "Ekle",
    pasteDialogPlain: "Düz metin",
    pasteDialogSource: "Kaynak kodu",
    pasteDialogTitle: "Yapıştır",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Revizyonlar alınamadı",
    revisionsApplyButtonDialogCancelButton: "İptal",
    revisionsApplyButtonDialogOKButton: "Geri alma",
    revisionsApplyButtonDialogText: "Geri alma onayı",
    revisionsApplyButtonDialogTitle: "Geri alma onayı",
    revisionsApplyButtonText: "Geri alma",
    revisionsApplyButtonTitle: "Geri alma",
    revisionsApplyDialogContent: "Bu seçilen revizyonu ile geçerli içeriğin yerini alır.<br>Geçerli içerik bir revizyon eklenir ve bu bloğun düzeltmeler listesinde görünecektir.",
    revisionsButtonCurrent: "Akım",
    revisionsButtonViewDiffText: "Farklılıklar",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Oluşturulan",
    revisionsDialogCancelButton: "İptal",
    revisionsDialogTitle: "Görünümü içerik düzeltme",
    revisionsDiffButtonDialogCancelButton: "Kapat",
    revisionsDiffButtonDialogTitle: "Görüş farklılıkları",
    revisionsDiffButtonText: "Görüş farklılıkları",
    revisionsDiffButtonTitle: "Görüş farklılıkları",
    revisionsLoading: "Revizyon yükleniyor...",
    revisionsNone: "Bu öğe hiçbir düzeltme",
    revisionsPreviewButtonText: "Önizleme",
    revisionsPreviewButtonTitle: "Önizleme",
    revisionsText: "Düzeltmeleri",
    revisionsTextEmpty: "Hiçbir düzeltme",
    revisionsTitle: "",
    rfmClose: "Kapat",
    rfmContinue: "Devam etmek",
    rfmDelete: "Sil",
    rfmDownload: "Download",
    rfmFileActions: "Eylemler",
    rfmFileModificationTime: "Değiştirilme tarihi",
    rfmFileName: "Adı",
    rfmFileSize: "Boyutu",
    rfmFileType: "Türü",
    rfmFilteredTotal: "{{start}} gösteren {{end}} {{filteredTotal}} dosya",
    rfmFirst: "İlk",
    rfmHeadingDirectories: "Dizinleri",
    rfmHeadingSearch: "Arama",
    rfmHeadingTags: "Etiketler",
    rfmHeadingUpload: "Karşıya yükleme",
    rfmInsert: "Ekle",
    rfmLast: "Son",
    rfmSearch: "Git",
    rfmTagDocument: "Belge",
    rfmTagImage: "Görüntü",
    rfmTotal: ", {{total}} filtre",
    rfmUpload: "Karşıya yükleme",
    rfmUploadBrowse: "Gözat",
    rfmUploadDrop: "Dosyaları buraya bırakın",
    rfmUploadFileRemove: "Kaldır",
    rfmUploadOr: "ya da",
    rfmView: "Görünüm",
    saveJsonFail: "{{failed}} içerik block(s) kaydedilemedi",
    saveJsonSaved: "{{saved}} içerik block(s) ba├╛ar├╜yla kaydedildi.",
    saveNotConfigured: "Kaydet, yapılandırılmamış veya devre dışı bırakılır.",
    saveRestFail: "{{failed}} içerik block(s) kaydedilemedi.",
    saveRestPartial: "{{saved}} {{failed}} içerik blokları dışında kurtardı.",
    saveRestSaved: "{{saved}} içerik block(s) ba├╛ar├╜yla kaydedildi.",
    saveTitle: "İçerik kaydetmek",
    snippetMenuTitle: "Parçacıkları",
    specialCharactersArrows: "Oklar",
    specialCharactersDialogOKButton: "Tamam",
    specialCharactersDialogTitle: "Özel karakterler eklemek",
    specialCharactersGreekAlphabet: "Yunan Alfabesi",
    specialCharactersHelp: "Özel bir karakter eklemek için tıklatın. Bu iletişim kutusunu kapatmak için ne zaman bitmiş tıkırtı \"OK\"",
    specialCharactersMathematics: "Matematik",
    specialCharactersSymbols: "Sembolleri",
    specialCharactersTitle: "Özel bir karakter ekleme",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} karakter sınırı üzerinde",
    statisticsButtonCharacterRemaining: "kalan {{charactersRemaining}} karakter sayısı",
    statisticsButtonCharacters: "{{characters}} karakterleri",
    statisticsDialogCharactersOverLimit: "{{characters}} karakterleri, {{charactersRemaining}} üzerinde önerilen limit",
    statisticsDialogCharactersRemaining: "{{characters}} kalan karakter sayısı, {{charactersRemaining}}",
    statisticsDialogNotTruncated: "İçerik kesilecek değil",
    statisticsDialogOKButton: "Tamam",
    statisticsDialogSentence: "{{sentences}} cümle",
    statisticsDialogSentences: "{{sentences}} cümleler",
    statisticsDialogTitle: "İçerik istatistikleri",
    statisticsDialogTruncated: "İçerik {{limit}} karakterden fazlasını içeren ve kesilebilir",
    statisticsDialogWord: "{{words}} kelime",
    statisticsDialogWords: "{{words}} sözcükleri",
    statisticsTitle: "İstatistiklerini görüntülemek için tıklatın",
    tableCreateTitle: "Tablo oluşturma",
    tableDeleteColumnTitle: "Tablo sütun sil",
    tableDeleteRowTitle: "Tablo satır Sil",
    tableInsertColumnTitle: "Tablo sütunu Ekle",
    tableInsertRowTitle: "Tablo satırı ekle",
    tableMergeCellsTitle: "Tabloda hücreleri birleştirme",
    tableSplitCellsTitle: "Tablo hücrelerini bölme",
    tagMenuTagAddress: "Adres",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Başlık 1",
    tagMenuTagH2: "Başlık 2",
    tagMenuTagH3: "Başlık 3",
    tagMenuTagH4: "Başlık 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Paragraf",
    tagMenuTagPre: "Önceden biçimlendirilmiş",
    tagMenuTitle: "Öğe stili değiştirme",
    tagTreeElementLink: "{{element}} Öğesi öğesini seçin",
    tagTreeElementTitle: "\"{{element}} Öğesi\" öğesinin içeriği seçmek için tıklatın",
    tagTreeRoot: "kök",
    tagTreeRootLink: "Tüm düzenlenebilir içeriğini seçin",
    tagTreeRootTitle: "Tüm düzenlenebilir içerik seçmek için tıklatın",
    textBlockQuoteTitle: "Blok alıntı",
    textBoldTitle: "Kalın",
    textItalicTitle: "İtalik",
    textSizeDecreaseTitle: "Metin boyutunu azalt",
    textSizeIncreaseTitle: "Metin boyutunu Artır",
    textStrikeTitle: "Üstü Çizgili",
    textSubTitle: "Alt komut dosyası",
    textSuperTitle: "Süper script",
    textUnderlineTitle: "Alt çizgi",
    unsavedEditWarningText: "Bu sayfada kaydedilmemiş değişiklikler",
    viewSourceDialogCancelButton: "Kapat",
    viewSourceDialogOKButton: "Kaynak kodu uygulamak",
    viewSourceDialogTitle: "İçerik kaynak kodu",
    viewSourceTitle: "Görünüm\/kaynak kodunu düzenle"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/tr.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/uk.js
/**
 * @fileOverview Ukrainian strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('uk', 'українська', {
    alignCenterTitle: "Вирівняти текст по центру",
    alignJustifyTitle: "Вирівняти текст виправдати",
    alignLeftTitle: "Вирівняти текст зліва",
    alignRightTitle: "Вирівняти текст справа",
    cancelDialogCancelButton: "Продовжити редагування",
    cancelDialogContent: "Ви дійсно бажаєте скасувати змінення? Всі зміни буде втрачено!",
    cancelDialogOKButton: "Відмінити редагування",
    cancelDialogTitle: "Відмінити редагування",
    cancelTitle: "Відмінити редагування",
    classMenuTitle: "Стиль палітра",
    clearFormattingTitle: "Зняти форматування",
    clickButtonToEditText: "Редагувати",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Автоматичні",
    colorMenuBasicBlack: "Чорний",
    colorMenuBasicBlue: "Синій",
    colorMenuBasicGreen: "Грін",
    colorMenuBasicGrey: "Ґрей",
    colorMenuBasicOrange: "Помаранчевий",
    colorMenuBasicPurple: "Пурпурний колір",
    colorMenuBasicRed: "Червоний",
    colorMenuBasicTitle: "Зміна кольору тексту",
    colorMenuBasicWhite: "Білий",
    dockToElementTitle: "Док-станція\/Відстикувати редактору елемент",
    dockToScreenTitle: "Док-станція\/Відстикувати редактор екран",
    embedDialogCancelButton: "\"Скасувати\"",
    embedDialogOKButton: "Вбудувати об'єкт",
    embedDialogTabCode: "Код вставлення",
    embedDialogTabCodeContent: "Вставити вставляти код у текстовій області знизу:",
    embedDialogTabPreview: "Попередній перегляд",
    embedDialogTabPreviewContent: "Попередній перегляд впровадженого об'єкта відображаються нижче:",
    embedDialogTitle: "Вбудувати об'єкт",
    embedTitle: "Вбудувати об'єкт",
    errorUINoName: "UI \"{{ui}}\" є неприпустимим (повинен мати ім'я властивості)",
    errorUINotObject: "UI \"{{ui}}\" є неприпустимим (повинні бути об'єктом)",
    errorUIOverride: "UI \"{{name}}\" уже зареєстровано і буде перезаписаний",
    fileManagerDialogTitle: "Файловий менеджер",
    fileManagerTitle: "Файловий менеджер",
    floatLeftTitle: "Вирівнювання зображення ліворуч",
    floatNoneTitle: "Видалити зображення Вирівняти",
    floatRightTitle: "Вирівнювання зображення праворуч",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Комічного без",
    fontFamilyMenuFontCourier: "Кур'єр нові",
    fontFamilyMenuFontDefault: "Шрифт за промовчанням",
    fontFamilyMenuFontGeorgia: "Грузія",
    fontFamilyMenuFontImpact: "Вплив",
    fontFamilyMenuFontPalatino: "Палатін",
    fontFamilyMenuFontTimes: "Нові римських часів",
    fontFamilyMenuTitle: "Оберіть розмір шрифту",
    guidesTitle: "Відображати елемент вказівки",
    historyRedoTitle: "Повторити",
    historyUndoTitle: "Скасувати",
    hrCreateTitle: "Вставлення горизонтальної правило",
    imageResizeButtonDialogCancelButton: "\"Скасувати\"",
    imageResizeButtonDialogHeight: "Висота зображення",
    imageResizeButtonDialogHeightPlaceHolder: "Висота",
    imageResizeButtonDialogOKButton: "Змінити розмір",
    imageResizeButtonDialogTitle: "Зміна розміру зображення",
    imageResizeButtonDialogWidth: "Ширина зображення",
    imageResizeButtonDialogWidthPlaceHolder: "Ширина",
    imageResizeButtonText: "Зміна розміру зображення",
    insertFileDialogCancelButton: "\"Скасувати\"",
    insertFileDialogOKButton: "Вставити файл",
    insertFileNameLabel: "Ім'я файлу",
    insertFileNamePlaceHolder: "Ім'я файлу...",
    insertFileTitle: "Вставити файл",
    insertFileURLLabel: "URL-адреса файлу",
    insertFileURLPlaceHolder: "URL-адреса файлу...",
    languageMenuTitle: "Змінити мову",
    linkCreateDialogCancelButton: "\"Скасувати\"",
    linkCreateDialogMenuHeader: "Виберіть тип посилання",
    linkCreateDialogOKButton: "Вставити посилання",
    linkCreateDialogTitle: "Вставити посилання",
    linkCreateTitle: "Вставити посилання",
    linkRemoveTitle: "Видалити посилання",
    linkTypeDocumentHeader: "Посилання на документ або інший файл",
    linkTypeDocumentInfo: "<h2>Не впевнений, що покласти в розташованому вище полі?<\/h2><ol>    <li>Переконайтеся, що файл був завантажений на ваш сайт.<\/li>    <li>Відкрити завантажений файл у веб-переглядачі.<\/li>    <li>Скопіювати його URL-адресу з рядку вашого браузера і вставте його в розташованому вище полі.<\/li><\/ol>",
    linkTypeDocumentLabel: "Документ або інший файл",
    linkTypeDocumentLocationLabel: "Розташування:",
    linkTypeDocumentLocationPlaceHolder: "Введіть URL-адресу",
    linkTypeDocumentNewWindowHeader: "Нове вікно",
    linkTypeDocumentNewWindowLabel: "Позначте цей пункт, щоб мати файл відкрити в новому вікні\/вкладці браузера.",
    linkTypeEmailHeader: "Посилання на адресу електронної пошти",
    linkTypeEmailLabel: "Адреса електронної пошти",
    linkTypeEmailSubjectLabel: "Тема (необов'язково):",
    linkTypeEmailSubjectPlaceHolder: "Введіть тему",
    linkTypeEmailToLabel: "Електронна пошта:",
    linkTypeEmailToPlaceHolder: "Введіть адресу електронної пошти",
    linkTypeExternalHeader: "Посилання на сторінку на інший веб-сайт",
    linkTypeExternalInfo: "<h2>Не впевнений, що покласти в розташованому вище полі?<\/h2><ol>    <li>Знайти сторінки в Інтернеті, вам потрібно зв'язати.<\/li>    <li>Скопіювати веб-адресу з рядку адреси вашого браузера і вставте його в розташованому вище полі.<\/li><\/ol>",
    linkTypeExternalLabel: "Сторінка на інший веб-сайт",
    linkTypeExternalLocationLabel: "Розташування:",
    linkTypeExternalLocationPlaceHolder: "Введіть URL-адресу",
    linkTypeExternalNewWindowHeader: "Нове вікно",
    linkTypeExternalNewWindowLabel: "Позначте цей пункт, щоб посилання відкрити в новому вікні\/вкладці браузера.",
    linkTypeInternalHeader: "Посилання на сторінку на цьому сайті",
    linkTypeInternalInfo: "<h2>Не впевнений, що покласти в розташованому вище полі?<\/h2><ol>    <li>Цей сайт посилання, щоб знайти сторінки.<\/li>    <li>Скопіювати веб-адресу зі свого веб-переглядача адресного рядка, за винятком \"{{domain}}\" і вставте його в розташованому вище полі.<\/li><\/ol>",
    linkTypeInternalLabel: "Сторінок на цьому сайті",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Введіть URI",
    linkTypeInternalNewWindowHeader: "Нове вікно",
    linkTypeInternalNewWindowLabel: "Позначте цей пункт, щоб посилання відкрити в новому вікні\/вкладці браузера.",
    listOrderedTitle: "Впорядкований список",
    listUnorderedTitle: "Неупорядкований список",
    logoTitle: "Дізнайтеся більше про Raptor WYSIWYG редактор",
    loremIpsumTitle: "Додати манекен тексту для тестування",
    navigateAway: "\nНа цій сторінці є незбережені зміни. \nЯкщо залишити цю сторінку незбережені зміни буде втрачено",
    pasteDialogCancelButton: "\"Скасувати\"",
    pasteDialogFormattedCleaned: "Формат &amp; чистити",
    pasteDialogFormattedUnclean: "Відформатовані нечистого",
    pasteDialogOKButton: "Вставте",
    pasteDialogPlain: "Звичайний текст",
    pasteDialogSource: "Вихідний код",
    pasteDialogTitle: "Пасти",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Не вдалося отримати зміни",
    revisionsApplyButtonDialogCancelButton: "\"Скасувати\"",
    revisionsApplyButtonDialogOKButton: "Відкат",
    revisionsApplyButtonDialogText: "Підтвердження скасування установки",
    revisionsApplyButtonDialogTitle: "Підтвердження скасування установки",
    revisionsApplyButtonText: "Відкат",
    revisionsApplyButtonTitle: "Відкат",
    revisionsApplyDialogContent: "Це буде замінити поточний вміст виділеного редакція.<br>Поточний зміст буде додано як виправлену версію і буде показано у списку доопрацювання цей блок.",
    revisionsButtonCurrent: "Струм",
    revisionsButtonViewDiffText: "Відмінності",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Створений",
    revisionsDialogCancelButton: "\"Скасувати\"",
    revisionsDialogTitle: "Перегляд вмісту зміни",
    revisionsDiffButtonDialogCancelButton: "Закрити",
    revisionsDiffButtonDialogTitle: "Перегляд відмінності",
    revisionsDiffButtonText: "Перегляд відмінності",
    revisionsDiffButtonTitle: "Перегляд відмінності",
    revisionsLoading: "Завантаження виправлення...",
    revisionsNone: "Немає виправлення для цього елемента.",
    revisionsPreviewButtonText: "Попередній перегляд",
    revisionsPreviewButtonTitle: "Попередній перегляд",
    revisionsText: "Доопрацювання",
    revisionsTextEmpty: "Не змін",
    revisionsTitle: "",
    rfmClose: "Закрити",
    rfmContinue: "Продовжити",
    rfmDelete: "Видалити",
    rfmDownload: "Завантажити",
    rfmFileActions: "Дії",
    rfmFileModificationTime: "Змінено",
    rfmFileName: "Ім’я",
    rfmFileSize: "Розмір",
    rfmFileType: "Тип",
    rfmFilteredTotal: "Показ {{start}} {{end}} {{filteredTotal}} файлів",
    rfmFirst: "Перший",
    rfmHeadingDirectories: "Каталоги",
    rfmHeadingSearch: "Пошук",
    rfmHeadingTags: "Мітки",
    rfmHeadingUpload: "Завантажити",
    rfmInsert: "Вставте",
    rfmLast: "Останнє",
    rfmSearch: "Піти",
    rfmTagDocument: "Документ",
    rfmTagImage: "Зображення",
    rfmTotal: ", фільтрується від {{total}}",
    rfmUpload: "Завантажити",
    rfmUploadBrowse: "Огляд",
    rfmUploadDrop: "Перетягніть файли сюди",
    rfmUploadFileRemove: "Видалити",
    rfmUploadOr: "або",
    rfmView: "Подання",
    saveJsonFail: "Не вдалося зберегти {{failed}} вмісту block(s)",
    saveJsonSaved: "Успішно збережено {{saved}} вмісту block(s).",
    saveNotConfigured: "Зберегти не настроєно, або вимкнуто.",
    saveRestFail: "Не вдалося зберегти {{failed}} вмісту block(s).",
    saveRestPartial: "Збережені {{saved}} з {{failed}} вмісту блоків.",
    saveRestSaved: "Успішно збережено {{saved}} вмісту block(s).",
    saveTitle: "Зберегти вміст",
    snippetMenuTitle: "Фрагменти",
    specialCharactersArrows: "Стрілки",
    specialCharactersDialogOKButton: "Гаразд",
    specialCharactersDialogTitle: "Вставлення спеціальних символів",
    specialCharactersGreekAlphabet: "Грецька абетка",
    specialCharactersHelp: "Натисніть кнопку спеціальний символ, щоб додати його. Натисніть кнопку \"OK\" по завершенні закрити це діалогове вікно",
    specialCharactersMathematics: "Математики",
    specialCharactersSymbols: "Символи",
    specialCharactersTitle: "Вставити спеціальний символ",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} символів за обмеження",
    statisticsButtonCharacterRemaining: "залишилося знаків {{charactersRemaining}}",
    statisticsButtonCharacters: "{{characters}} символів",
    statisticsDialogCharactersOverLimit: "{{characters}} символів, {{charactersRemaining}} над рекомендованою межею",
    statisticsDialogCharactersRemaining: "{{characters}}, {{charactersRemaining}} лишилося знаків",
    statisticsDialogNotTruncated: "Вміст не буде скорочено",
    statisticsDialogOKButton: "Гаразд",
    statisticsDialogSentence: "{{sentences}} речення",
    statisticsDialogSentences: "{{sentences}} речень",
    statisticsDialogTitle: "Зміст статистика",
    statisticsDialogTruncated: "Зміст містить більше символів {{limit}} і може бути скорочено",
    statisticsDialogWord: "{{words}} слово",
    statisticsDialogWords: "{{words}} слів",
    statisticsTitle: "Натисніть, щоб подивитися статистику",
    tableCreateTitle: "Створення таблиці",
    tableDeleteColumnTitle: "Видалити стовпці таблиці",
    tableDeleteRowTitle: "Видалити рядок таблиці",
    tableInsertColumnTitle: "Вставити стовпець таблиці",
    tableInsertRowTitle: "Вставити рядок таблиці",
    tableMergeCellsTitle: "Об'єднування декількох клітинок таблиці",
    tableSplitCellsTitle: "Розділити клітинки таблиці",
    tagMenuTagAddress: "Адреса",
    tagMenuTagDiv: "DIV",
    tagMenuTagH1: "Заголовок 1",
    tagMenuTagH2: "Заголовок 2",
    tagMenuTagH3: "Заголовок 3",
    tagMenuTagH4: "Заголовок 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Абзац",
    tagMenuTagPre: "Попередньо відформатований",
    tagMenuTitle: "Змінити стиль елемента",
    tagTreeElementLink: "Виберіть елемент {{element}}",
    tagTreeElementTitle: "Натисніть, щоб виділити вміст елемента «{{element}}»",
    tagTreeRoot: "корінь",
    tagTreeRootLink: "Виділіть весь вміст для редагування",
    tagTreeRootTitle: "Натисніть, щоб вибрати весь вміст для редагування",
    textBlockQuoteTitle: "Блок (цитата)",
    textBoldTitle: "Жирним шрифтом",
    textItalicTitle: "Курсив",
    textSizeDecreaseTitle: "Зменшити розмір тексту",
    textSizeIncreaseTitle: "Збільшити розмір тексту",
    textStrikeTitle: "Перекреслити",
    textSubTitle: "Суб сценарій",
    textSuperTitle: "Супер-сценарій",
    textUnderlineTitle: "Підкреслення",
    unsavedEditWarningText: "Виявлено незбереженні зміни на цій сторінці",
    viewSourceDialogCancelButton: "Закрити",
    viewSourceDialogOKButton: "Застосувати вихідний код",
    viewSourceDialogTitle: "Код джерела вмісту",
    viewSourceTitle: "Перегляд або змінення вихідного коду"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/uk.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ur.js
/**
 * @fileOverview Urdu strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('ur', 'اردو', {
    alignCenterTitle: "متن کو بمرکز سیدھ کریں",
    alignJustifyTitle: "متن سیدھ کریں سطربند کریں",
    alignLeftTitle: "متن بائیں سیدھ کریں",
    alignRightTitle: "متن دائیں سیدھ میں لائیں",
    cancelDialogCancelButton: "تدوین کاری جاری رکھیں",
    cancelDialogContent: "اثبات کریں کہ آپ تدوین کرنے کے لیے منسوخ کرنا چاہتے ہیں؟ تمام تبدیلیاں ضائع ہو جائیں گے!",
    cancelDialogOKButton: "تدوین منسوخ کریں",
    cancelDialogTitle: "تدوین منسوخ کریں",
    cancelTitle: "تدوین منسوخ کریں",
    classMenuTitle: "طرز چنندہ",
    clearFormattingTitle: "وضع کاری صاف کریں",
    clickButtonToEditText: "تدوین کریں",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "خود کار",
    colorMenuBasicBlack: "سیاہ",
    colorMenuBasicBlue: "بلیو",
    colorMenuBasicGreen: "سبز",
    colorMenuBasicGrey: "گرے",
    colorMenuBasicOrange: "نارنگی",
    colorMenuBasicPurple: "جامنی",
    colorMenuBasicRed: "سرخ",
    colorMenuBasicTitle: "متن کا رنگ تبدیل کریں",
    colorMenuBasicWhite: "سفيد",
    dockToElementTitle: "ڈوک ناکنار\/عنصر کے لیے تدوین کار",
    dockToScreenTitle: "ڈوک\/ناکنار سکرین کے لیے تدوین کار",
    embedDialogCancelButton: "منسوخ کریں",
    embedDialogOKButton: "آبجیکٹ شامل کریں",
    embedDialogTabCode: "کوڈ شامل کریں",
    embedDialogTabCodeContent: "آپ آبجیکٹ کوڈ متن علاقہ میں نیچے چسپاں کر دیں:",
    embedDialogTabPreview: "پیش منظر",
    embedDialogTabPreviewContent: "آپ شامل آبجیکٹ کے پیش منظر کے نیچے دکھایا جاتا ہے:",
    embedDialogTitle: "آبجیکٹ شامل کریں",
    embedTitle: "آبجیکٹ شامل کریں",
    errorUINoName: "UI \"{{ui}}\" ناجائز ہے (ایک نام خاصیت ہونا ضروری ہے)",
    errorUINotObject: "UI \"{{ui}}\" ناجائز ہے (ایک آبجیکٹ ہونی چاہیے)",
    errorUIOverride: "UI \"{{name}}\" پہلے سے ہی اندراج کیا جا چکا ہے، اور تحریر کیا جائے گا",
    fileManagerDialogTitle: "فائل مینیجر",
    fileManagerTitle: "فائل مینیجر",
    floatLeftTitle: "تصویر کے بائیں طرف سیدھ میں لائیں",
    floatNoneTitle: "تصویر ہٹائیں سیدھ میں لائیں",
    floatRightTitle: "دائیں طرف سیدھ میں لائیں",
    fontFamilyMenuFontArial: "ایریئل",
    fontFamilyMenuFontComicSans: "بغیر میں کامک",
    fontFamilyMenuFontCourier: "Courier نیا",
    fontFamilyMenuFontDefault: "طے شدہ فانٹ",
    fontFamilyMenuFontGeorgia: "جورجيا",
    fontFamilyMenuFontImpact: "اثر",
    fontFamilyMenuFontPalatino: "پالاٹانا",
    fontFamilyMenuFontTimes: "ٹائمز نیو رومن",
    fontFamilyMenuTitle: "آپ فانٹ کا انتخاب کریں",
    guidesTitle: "عنصر رہنما نمایش کریں",
    historyRedoTitle: "اعادہ کریں",
    historyUndoTitle: "کالعدم کریں",
    hrCreateTitle: "افقی رول ڈالیں",
    imageResizeButtonDialogCancelButton: "منسوخ کریں",
    imageResizeButtonDialogHeight: "نقش اونچائی",
    imageResizeButtonDialogHeightPlaceHolder: "اونچائی",
    imageResizeButtonDialogOKButton: "نیا سائز کریں",
    imageResizeButtonDialogTitle: "تصویر کا نیا سائز کریں",
    imageResizeButtonDialogWidth: "نقش چوڑائی",
    imageResizeButtonDialogWidthPlaceHolder: "چوڑائی",
    imageResizeButtonText: "تصویر کا نیا سائز کریں",
    insertFileDialogCancelButton: "منسوخ کریں",
    insertFileDialogOKButton: "مسل داخل کریں",
    insertFileNameLabel: "نام مسل",
    insertFileNamePlaceHolder: "نام مسل...",
    insertFileTitle: "مسل داخل کریں",
    insertFileURLLabel: "مسل URL",
    insertFileURLPlaceHolder: "URL مسل...",
    languageMenuTitle: "زبان تبدیل کریں",
    linkCreateDialogCancelButton: "منسوخ کریں",
    linkCreateDialogMenuHeader: "لنک کی ایک قسم کا انتخاب کریں",
    linkCreateDialogOKButton: "ربط داخل کریں",
    linkCreateDialogTitle: "ربط داخل کریں",
    linkCreateTitle: "ربط داخل کریں",
    linkRemoveTitle: "ربط ہٹائیں",
    linkTypeDocumentHeader: "ایک دستاویز یا دیگر مسل سے ربط کریں",
    linkTypeDocumentInfo: "<h2>نہیں یقین ہے کہ مذکورہ بالا خانہ میں رکھ کر کیا؟<\/h2><ol>    <li>اس بات کو یقینی بنانے کے لئے آپ کی ویب سائٹ مسل اپ لوڈ کیا گیا ہے ۔<\/li>    <li>اپ لوڈ مسل آپ کے براؤزر میں کھولیں ۔<\/li>    <li>مسل کا یو آر ایل آپ کے براؤزر کی پتہ بار سے نقل کریں اور اسے مذکورہ بالا خانہ میں پیسٹ کریں ۔<\/li><\/ol>",
    linkTypeDocumentLabel: "دستاویز یا دیگر مسل",
    linkTypeDocumentLocationLabel: "محل وقوع:",
    linkTypeDocumentLocationPlaceHolder: "URL داخل کریں",
    linkTypeDocumentNewWindowHeader: "نیا دریچہ",
    linkTypeDocumentNewWindowLabel: "ایک نئی براؤزر ونڈو\/ٹیب میں کھولیں مسل کو اس خانہ پڑتال کریں ۔",
    linkTypeEmailHeader: "ایک ای میل ایڈریس سے ربط کریں",
    linkTypeEmailLabel: "ای میل ایڈریس",
    linkTypeEmailSubjectLabel: "موضوع (اختیاری):",
    linkTypeEmailSubjectPlaceHolder: "موضوع داخل کریں",
    linkTypeEmailToLabel: "ای میل ایڈریس:",
    linkTypeEmailToPlaceHolder: "ای میل ایڈریس درج کریں",
    linkTypeExternalHeader: "ایک اور ویب سائٹ پر ایک صفحہ سے ربط کریں",
    linkTypeExternalInfo: "<h2>نہیں یقین ہے کہ مذکورہ بالا خانہ میں رکھ کر کیا؟<\/h2><ol>    <li>صفحہ پر ربط کے لیے حسب خواہش ویب تلاش.<\/li>    <li>ویب پتا آپ کے براؤزر کی پتہ بار سے نقل کریں اور اسے مذکورہ بالا خانہ میں پیسٹ کریں ۔<\/li><\/ol>",
    linkTypeExternalLabel: "ایک اور ویب سائٹ پر صفحہ",
    linkTypeExternalLocationLabel: "محل وقوع:",
    linkTypeExternalLocationPlaceHolder: "URL داخل کریں",
    linkTypeExternalNewWindowHeader: "نیا دریچہ",
    linkTypeExternalNewWindowLabel: "ایک نئی براؤزر ونڈو\/ٹیب میں کھولیں ربط کے لئے اس خانہ پڑتال کریں ۔",
    linkTypeInternalHeader: "اس ویب سائٹ پر ایک صفحہ سے ربط کریں",
    linkTypeInternalInfo: "<h2>نہیں یقین ہے کہ مذکورہ بالا خانہ میں رکھ کر کیا؟<\/h2><ol>    <li>صفحہ کے لیے یہ سائٹ لنک پر ملے ہیں ۔<\/li>    <li>ویب پتا بار، \"{{domain}}\" کو چھوڑ کر آپ کے براؤزر کی پتہ سے نقل کریں اور اسے مذکورہ بالا خانہ میں پیسٹ کریں ۔<\/li><\/ol>",
    linkTypeInternalLabel: "اس ویب سائٹ پر صفحہ",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "ایک URI داخل کریں",
    linkTypeInternalNewWindowHeader: "نیا دریچہ",
    linkTypeInternalNewWindowLabel: "ایک نئی براؤزر ونڈو\/ٹیب میں کھولیں ربط کے لئے اس خانہ پڑتال کریں ۔",
    listOrderedTitle: "حکم دیا فہرست",
    listUnorderedTitle: "انوردراد کی فہرست",
    logoTitle: "ریپٹر جو دیکھا وہ پایا ایڈیٹر کے بارے میں مزید معلومات حاصل کریں",
    loremIpsumTitle: "جانچ کے لئے کٹھ پُتلی متن داخل کریں",
    navigateAway: "\nوہاں تبدیلیاں اس صفحہ پر غیر محفوظ ہیں ۔ \nاگر آپ اس صفحہ کی گشت آپ اپنی محفوظ شدہ تبدیلیاں کھودیں گے",
    pasteDialogCancelButton: "منسوخ کریں",
    pasteDialogFormattedCleaned: "وضع کاری &amp; صاف کر",
    pasteDialogFormattedUnclean: "ناپاک وضع شدہ",
    pasteDialogOKButton: "داخل کریں",
    pasteDialogPlain: "سادہ متن",
    pasteDialogSource: "سورس کوڈ",
    pasteDialogTitle: "جوڑیں",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "نظرثانی کی بازیافت کرنے میں ناکام رہے",
    revisionsApplyButtonDialogCancelButton: "منسوخ کریں",
    revisionsApplyButtonDialogOKButton: "رول بیک",
    revisionsApplyButtonDialogText: "رول بیک کی تصدیق",
    revisionsApplyButtonDialogTitle: "رول بیک کی تصدیق",
    revisionsApplyButtonText: "رول بیک",
    revisionsApplyButtonTitle: "رول بیک",
    revisionsApplyDialogContent: "یہ حالیہ مشمول منتخب نظرِثانی کے بعد بدل دے گا ۔<br>حالیہ مشمول ایک نظرِ ثانی کے طور پر شامل ہو جائیں گے، اور نظرثانی کی فہرست میں اس بلاک کے لیے مرئی ہو گا ۔",
    revisionsButtonCurrent: "موجودہ",
    revisionsButtonViewDiffText: "اختلافات",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "بنائی",
    revisionsDialogCancelButton: "منسوخ کریں",
    revisionsDialogTitle: "منظر مشمولات نظرثانی",
    revisionsDiffButtonDialogCancelButton: "بند کریں",
    revisionsDiffButtonDialogTitle: "منظر اختلافات",
    revisionsDiffButtonText: "منظر اختلافات",
    revisionsDiffButtonTitle: "منظر اختلافات",
    revisionsLoading: "نظرثانی لوڈ کر رہا ہے...",
    revisionsNone: "یہ عنصر کے لئے کوئی نظرثانی",
    revisionsPreviewButtonText: "پیش منظر",
    revisionsPreviewButtonTitle: "پیش منظر",
    revisionsText: "نظرثانی",
    revisionsTextEmpty: "کوئی نظرثانی",
    revisionsTitle: "",
    rfmClose: "بند کریں",
    rfmContinue: "جاری رکھیں",
    rfmDelete: "حذف کریں",
    rfmDownload: "ڈاؤن لوڈ، اتارنا",
    rfmFileActions: "اعمال",
    rfmFileModificationTime: "ترمیم",
    rfmFileName: "نام",
    rfmFileSize: "سائز",
    rfmFileType: "قسم",
    rfmFilteredTotal: "{{start}} دکھاتے {{end}} {{filteredTotal}} مسلیں",
    rfmFirst: "سب سے پہلے",
    rfmHeadingDirectories: "ڈائریکٹریاں",
    rfmHeadingSearch: "تلاش کریں",
    rfmHeadingTags: "ٹیگز",
    rfmHeadingUpload: "اپ لوڈ کریں",
    rfmInsert: "داخل کریں",
    rfmLast: "آخری",
    rfmSearch: "جانا",
    rfmTagDocument: "دستاویز",
    rfmTagImage: "نقش",
    rfmTotal: "، {{total}} فلٹر کیا جائے گا",
    rfmUpload: "اپ لوڈ کریں",
    rfmUploadBrowse: "براؤز کریں",
    rfmUploadDrop: "مسلوں کو یہاں چھوڑیں",
    rfmUploadFileRemove: "ہٹانا",
    rfmUploadOr: "یا",
    rfmView: "منظر",
    saveJsonFail: "{{failed}} مواد block(s) محفوظ کرنے میں ناکام",
    saveJsonSaved: "{{saved}} مواد block(s) کامیابی سے محفوظ کرلی ہے ۔",
    saveNotConfigured: "محفوظ تشکیل نہیں دیا گیا، یا نااہل ہے ۔",
    saveRestFail: "{{failed}} مواد block(s) محفوظ کرنے میں ناکام ہے ۔",
    saveRestPartial: "{{saved}} مشمول بلاک سے {{failed}} محفوظ نہیں ۔",
    saveRestSaved: "{{saved}} مواد block(s) کامیابی سے محفوظ کرلی ہے ۔",
    saveTitle: "مشمول محفوظ کریں",
    snippetMenuTitle: "سنیٹ کریں",
    specialCharactersArrows: "تیر",
    specialCharactersDialogOKButton: "ٹھيک ہے",
    specialCharactersDialogTitle: "خاص کریکٹر داخل کریں",
    specialCharactersGreekAlphabet: "یونانی حروف تہجی",
    specialCharactersHelp: "یہ اضافہ کرنے کے لیے ایک خاص کریکٹر پر کلک کریں ۔ \"یہ مکالمہ بند کرنے کے لیے ٹھیک سے کیا کب ہے\" پر کلک کریں",
    specialCharactersMathematics: "ریاضی",
    specialCharactersSymbols: "علامات",
    specialCharactersTitle: "ایک خاص کریکٹر داخل کریں",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} کریکٹر کی حد کو پار",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} کے حروف باقی",
    statisticsButtonCharacters: "{{characters}} کریکٹر",
    statisticsDialogCharactersOverLimit: "{{characters}} کریکٹر، {{charactersRemaining}} سفارش کردہ حد کو پار",
    statisticsDialogCharactersRemaining: "باقی {{characters}} کریکٹر، {{charactersRemaining}}",
    statisticsDialogNotTruncated: "مشمول نہیں مقطوع ہو جائے گی",
    statisticsDialogOKButton: "ٹھيک ہے",
    statisticsDialogSentence: "{{sentences}} کی سزا",
    statisticsDialogSentences: "{{sentences}} کی سزائیں",
    statisticsDialogTitle: "مشمول کے اعداد و شمار",
    statisticsDialogTruncated: "مشمول سے زائد {{limit}} کریکٹر کا حامل ہے اور مقطوع ہو سکتا ہے",
    statisticsDialogWord: "{{words}} کے کلام",
    statisticsDialogWords: "{{words}} کے الفاظ",
    statisticsTitle: "اعداد و شمار دیکھنے کے لیے کلک کریں",
    tableCreateTitle: "جدول بنائیں",
    tableDeleteColumnTitle: "جدول کالم حذف کریں",
    tableDeleteRowTitle: "جدول صف حذف کریں",
    tableInsertColumnTitle: "جدول کالم داخل کریں",
    tableInsertRowTitle: "جدول صف داخل کریں",
    tableMergeCellsTitle: "جدول سیلوں کو ضم کریں",
    tableSplitCellsTitle: "جدول سیلوں کو الگ کریں",
    tagMenuTagAddress: "پتا",
    tagMenuTagDiv: "دو",
    tagMenuTagH1: "سرخی 1",
    tagMenuTagH2: "سرخی 2",
    tagMenuTagH3: "سرخی 3",
    tagMenuTagH4: "سرخی 4",
    tagMenuTagNA: "لاگو نہیں",
    tagMenuTagP: "پیرا گراف",
    tagMenuTagPre: "پہلے سے وضع شدہ",
    tagMenuTitle: "عنصر طرز تبدیل کریں",
    tagTreeElementLink: "{{element}} عنصر منتخب کریں",
    tagTreeElementTitle: "\"{{element}}\" عنصر کے مشمولات کو منتخب کرنے کے لیے کلک کریں",
    tagTreeRoot: "اساس",
    tagTreeRootLink: "ہر ایک قابل تدوین مواد کو منتخب کریں",
    tagTreeRootTitle: "ہر ایک قابل تدوین مواد کو منتخب کرنے کے لیے کلک کریں",
    textBlockQuoteTitle: "بلاک اقتباس",
    textBoldTitle: "نڈر",
    textItalicTitle: "اٹالک",
    textSizeDecreaseTitle: "متن کا سائز گھٹائیں",
    textSizeIncreaseTitle: "متن کا سائز بڑھائیں",
    textStrikeTitle: "کے ذریعے ہڑتال",
    textSubTitle: "ذیلی نوشتہ",
    textSuperTitle: "اعلی ترین نوشتہ",
    textUnderlineTitle: "خط کشیدہ",
    unsavedEditWarningText: "وہاں تبدیلیاں اس صفحہ پر غیر محفوظ ہیں",
    viewSourceDialogCancelButton: "بند کریں",
    viewSourceDialogOKButton: "سورس کوڈ لگائیں",
    viewSourceDialogTitle: "مشمول سورس کوڈ",
    viewSourceTitle: "ماخذ ضابطہ منظر\/تدوین کریں"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/ur.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/vi.js
/**
 * @fileOverview Vietnamese strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('vi', 'Việt Nam', {
    alignCenterTitle: "Căn chỉnh văn bản Trung tâm",
    alignJustifyTitle: "Căn chỉnh văn bản biện minh cho",
    alignLeftTitle: "Căn chỉnh văn bản trái",
    alignRightTitle: "Căn chỉnh văn bản quyền",
    cancelDialogCancelButton: "Tiếp tục chỉnh sửa",
    cancelDialogContent: "Bạn có chắc bạn muốn hủy bỏ chỉnh sửa không? Mọi thay đổi sẽ bị mất!",
    cancelDialogOKButton: "Hủy bỏ chỉnh sửa",
    cancelDialogTitle: "Hủy bỏ chỉnh sửa",
    cancelTitle: "Hủy bỏ chỉnh sửa",
    classMenuTitle: "Chọn phong cách",
    clearFormattingTitle: "Xoá định dạng",
    clickButtonToEditText: "Chỉnh sửa",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "Tự động",
    colorMenuBasicBlack: "Đen",
    colorMenuBasicBlue: "Màu xanh",
    colorMenuBasicGreen: "Màu xanh lá cây",
    colorMenuBasicGrey: "Xám",
    colorMenuBasicOrange: "Orange",
    colorMenuBasicPurple: "Màu tím",
    colorMenuBasicRed: "Red",
    colorMenuBasicTitle: "Thay đổi màu văn bản",
    colorMenuBasicWhite: "Trắng",
    dockToElementTitle: "Dock\/tháo trình soạn thảo để nguyên tố",
    dockToScreenTitle: "Dock\/tháo trình soạn thảo để màn hình",
    embedDialogCancelButton: "Hủy bỏ",
    embedDialogOKButton: "Nhúng đối tượng",
    embedDialogTabCode: "Mã nhúng",
    embedDialogTabCodeContent: "Dán mã nhúng vào vùng văn bản dưới đây:",
    embedDialogTabPreview: "Xem trước",
    embedDialogTabPreviewContent: "Một bản xem trước của đối tượng nhúng của bạn sẽ được hiển thị dưới đây:",
    embedDialogTitle: "Nhúng đối tượng",
    embedTitle: "Nhúng đối tượng",
    errorUINoName: "Giao diện người dùng \"{{ui}}\" là không hợp lệ (phải có một tài sản tên)",
    errorUINotObject: "Giao diện người dùng \"{{ui}}\" là không hợp lệ (phải là một đối tượng)",
    errorUIOverride: "Giao diện người dùng \"{{name}}\" đã được đăng ký, và sẽ được ghi đè",
    fileManagerDialogTitle: "Quản lý tập tin",
    fileManagerTitle: "Quản lý tập tin",
    floatLeftTitle: "Sắp xếp các hình ảnh bên trái",
    floatNoneTitle: "Loại bỏ hình ảnh sắp xếp",
    floatRightTitle: "Sắp xếp các hình ảnh ở bên phải",
    fontFamilyMenuFontArial: "Arial",
    fontFamilyMenuFontComicSans: "Các truyện tranh mà không có",
    fontFamilyMenuFontCourier: "Chuyển phát nhanh mới",
    fontFamilyMenuFontDefault: "Phông chữ mặc định",
    fontFamilyMenuFontGeorgia: "Georgia",
    fontFamilyMenuFontImpact: "Tác động",
    fontFamilyMenuFontPalatino: "Palatine",
    fontFamilyMenuFontTimes: "Thời gian mới La Mã",
    fontFamilyMenuTitle: "Chọn phông chữ của bạn",
    guidesTitle: "Hiển thị phần tử hướng dẫn",
    historyRedoTitle: "Làm lại",
    historyUndoTitle: "Hoàn tác",
    hrCreateTitle: "Chèn ngang quy tắc",
    imageResizeButtonDialogCancelButton: "Hủy bỏ",
    imageResizeButtonDialogHeight: "Chiều cao hình ảnh",
    imageResizeButtonDialogHeightPlaceHolder: "Chiều cao",
    imageResizeButtonDialogOKButton: "Thay đổi kích cỡ",
    imageResizeButtonDialogTitle: "Thay đổi kích cỡ hình ảnh",
    imageResizeButtonDialogWidth: "Chiều rộng hình ảnh",
    imageResizeButtonDialogWidthPlaceHolder: "Chiều rộng",
    imageResizeButtonText: "Thay đổi kích cỡ hình ảnh",
    insertFileDialogCancelButton: "Hủy bỏ",
    insertFileDialogOKButton: "Chèn tệp",
    insertFileNameLabel: "Tên tập tin",
    insertFileNamePlaceHolder: "Tên tập tin...",
    insertFileTitle: "Chèn tệp",
    insertFileURLLabel: "Tập tin",
    insertFileURLPlaceHolder: "Tập tin URL...",
    languageMenuTitle: "Thay đổi ngôn ngữ",
    linkCreateDialogCancelButton: "Hủy bỏ",
    linkCreateDialogMenuHeader: "Chọn một loại liên kết",
    linkCreateDialogOKButton: "Chèn liên kết",
    linkCreateDialogTitle: "Chèn liên kết",
    linkCreateTitle: "Chèn liên kết",
    linkRemoveTitle: "Loại bỏ liên kết",
    linkTypeDocumentHeader: "Liên kết với một tài liệu hoặc tập tin khác",
    linkTypeDocumentInfo: "<h2>Không chắc chắn những gì để đặt trong các hộp ở trên?<\/h2><ol>    <li>Đảm bảo các tập tin đã được tải lên trang web của bạn.<\/li>    <li>Mở tập tin được tải lên trong trình duyệt của bạn.<\/li>    <li>Sao chép tập tin từ thanh địa chỉ của trình duyệt và dán nó vào hộp ở trên.<\/li><\/ol>",
    linkTypeDocumentLabel: "Tài liệu hoặc tập tin khác",
    linkTypeDocumentLocationLabel: "Địa điểm:",
    linkTypeDocumentLocationPlaceHolder: "Nhập một URL",
    linkTypeDocumentNewWindowHeader: "Cửa sổ mới",
    linkTypeDocumentNewWindowLabel: "Đánh dấu ô này có tập tin mở trong một cửa sổ trình duyệt mới\/tab.",
    linkTypeEmailHeader: "Liên kết với một địa chỉ email",
    linkTypeEmailLabel: "Địa chỉ email",
    linkTypeEmailSubjectLabel: "Tiêu đề (tùy chọn):",
    linkTypeEmailSubjectPlaceHolder: "Nhập Chủ đề",
    linkTypeEmailToLabel: "Thư điện tử:",
    linkTypeEmailToPlaceHolder: "Nhập địa chỉ email",
    linkTypeExternalHeader: "Liên kết đến một trang trên trang web khác",
    linkTypeExternalInfo: "<h2>Không chắc chắn những gì để đặt trong các hộp ở trên?<\/h2><ol>    <li>Tìm thấy trang trên các trang web mà bạn muốn liên kết đến.<\/li>    <li>Sao chép địa chỉ web từ thanh địa chỉ của trình duyệt và dán nó vào hộp ở trên.<\/li><\/ol>",
    linkTypeExternalLabel: "Trang trên trang web khác",
    linkTypeExternalLocationLabel: "Địa điểm:",
    linkTypeExternalLocationPlaceHolder: "Nhập một URL",
    linkTypeExternalNewWindowHeader: "Cửa sổ mới",
    linkTypeExternalNewWindowLabel: "Đánh dấu ô này có liên kết mở trong một cửa sổ trình duyệt mới\/tab.",
    linkTypeInternalHeader: "Liên kết đến một trang trên trang web này",
    linkTypeInternalInfo: "<h2>Không chắc chắn những gì để đặt trong các hộp ở trên?<\/h2><ol>    <li>Tìm thấy trang này liên kết trang web để.<\/li>    <li>Sao chép địa chỉ web từ trình duyệt của bạn địa chỉ bar, không bao gồm \"{{domain}}\" và dán nó vào hộp ở trên.<\/li><\/ol>",
    linkTypeInternalLabel: "Trang trên trang web này",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "Nhập một URI",
    linkTypeInternalNewWindowHeader: "Cửa sổ mới",
    linkTypeInternalNewWindowLabel: "Đánh dấu ô này có liên kết mở trong một cửa sổ trình duyệt mới\/tab.",
    listOrderedTitle: "Danh sách đặt hàng",
    listUnorderedTitle: "Danh sách có thứ tự",
    logoTitle: "Tìm hiểu thêm về trình soạn thảo WYSIWYG Raptor",
    loremIpsumTitle: "Chèn văn bản giả để thử nghiệm",
    navigateAway: "\nCó được lưu thay đổi trên Trang này. \nNếu bạn rời khỏi trang này bạn sẽ mất các thay đổi chưa được lưu",
    pasteDialogCancelButton: "Hủy bỏ",
    pasteDialogFormattedCleaned: "Định dạng &amp; làm sạch",
    pasteDialogFormattedUnclean: "Định dạng ô uế",
    pasteDialogOKButton: "Chèn",
    pasteDialogPlain: "Văn bản thuần",
    pasteDialogSource: "Mã nguồn",
    pasteDialogTitle: "Dán",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "Không thể lấy sửa đổi lại",
    revisionsApplyButtonDialogCancelButton: "Hủy bỏ",
    revisionsApplyButtonDialogOKButton: "Quay ngược lại",
    revisionsApplyButtonDialogText: "Quay ngược lại xác nhận",
    revisionsApplyButtonDialogTitle: "Quay ngược lại xác nhận",
    revisionsApplyButtonText: "Quay ngược lại",
    revisionsApplyButtonTitle: "Quay ngược lại",
    revisionsApplyDialogContent: "Điều này sẽ thay thế nội dung hiện tại với phiên bản đã chọn.<br>Nội dung hiện tại sẽ được thêm vào như là một phiên bản, và sẽ được hiển thị trong danh sách sửa đổi cho khối này.",
    revisionsButtonCurrent: "Hiện tại",
    revisionsButtonViewDiffText: "Sự khác biệt",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "Tạo",
    revisionsDialogCancelButton: "Hủy bỏ",
    revisionsDialogTitle: "Xem Sửa đổi nội dung",
    revisionsDiffButtonDialogCancelButton: "Đóng",
    revisionsDiffButtonDialogTitle: "Xem sự khác biệt",
    revisionsDiffButtonText: "Xem sự khác biệt",
    revisionsDiffButtonTitle: "Xem sự khác biệt",
    revisionsLoading: "Tải phiên bản...",
    revisionsNone: "Không có sửa đổi cho nguyên tố này",
    revisionsPreviewButtonText: "Xem trước",
    revisionsPreviewButtonTitle: "Xem trước",
    revisionsText: "Sửa đổi",
    revisionsTextEmpty: "Không có sửa đổi",
    revisionsTitle: "",
    rfmClose: "Đóng",
    rfmContinue: "Tiếp tục",
    rfmDelete: "Xóa",
    rfmDownload: "Tải về",
    rfmFileActions: "Hành động",
    rfmFileModificationTime: "Sửa đổi lần",
    rfmFileName: "Tên",
    rfmFileSize: "Kích thước",
    rfmFileType: "Loại",
    rfmFilteredTotal: "Đang hiện {{start}} kết {{end}} {{filteredTotal}} tập tin",
    rfmFirst: "Đầu tiên",
    rfmHeadingDirectories: "Thư mục",
    rfmHeadingSearch: "Tìm",
    rfmHeadingTags: "Tags",
    rfmHeadingUpload: "Tải lên",
    rfmInsert: "Chèn",
    rfmLast: "Kéo",
    rfmSearch: "Đi",
    rfmTagDocument: "Tài liệu",
    rfmTagImage: "Hình ảnh",
    rfmTotal: ", lọc từ {{total}}",
    rfmUpload: "Tải lên",
    rfmUploadBrowse: "Trình duyệt",
    rfmUploadDrop: "Thả tập tin ở đây",
    rfmUploadFileRemove: "Loại bỏ",
    rfmUploadOr: "hoặc",
    rfmView: "Xem",
    saveJsonFail: "Không lưu nội dung block(s) {{failed}}",
    saveJsonSaved: "Thành công lưu {{saved}} nội dung block(s).",
    saveNotConfigured: "Lưu đã không được cấu hình, hoặc bị vô hiệu hóa.",
    saveRestFail: "Không lưu nội dung {{failed}} block(s).",
    saveRestPartial: "Lưu {{saved}} ra khỏi khối nội dung {{failed}}.",
    saveRestSaved: "Thành công lưu {{saved}} nội dung block(s).",
    saveTitle: "Lưu nội dung",
    snippetMenuTitle: "Đoạn",
    specialCharactersArrows: "Mũi tên",
    specialCharactersDialogOKButton: "Ok",
    specialCharactersDialogTitle: "Chèn ký tự đặc biệt",
    specialCharactersGreekAlphabet: "Bảng chữ cái Hy Lạp",
    specialCharactersHelp: "Nhấp vào một ký tự đặc biệt để thêm nó. Nhấp \"OK\" khi thực hiện để đóng hộp thoại này",
    specialCharactersMathematics: "Toán học",
    specialCharactersSymbols: "Biểu tượng",
    specialCharactersTitle: "Nhập một ký tự đặc biệt",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} ký tự vượt quá giới hạn",
    statisticsButtonCharacterRemaining: "{{charactersRemaining}} ký tự còn lại",
    statisticsButtonCharacters: "{{characters}} ký tự",
    statisticsDialogCharactersOverLimit: "{{characters}} vật, {{charactersRemaining}} vượt quá giới hạn đề nghị",
    statisticsDialogCharactersRemaining: "nhân vật {{characters}}, {{charactersRemaining}} còn lại",
    statisticsDialogNotTruncated: "Nội dung sẽ không được cắt ngắn",
    statisticsDialogOKButton: "Ok",
    statisticsDialogSentence: "{{sentences}} câu",
    statisticsDialogSentences: "{{sentences}} câu",
    statisticsDialogTitle: "Số liệu thống kê nội dung",
    statisticsDialogTruncated: "Nội dung có chứa nhiều hơn {{limit}} nhân vật và có thể được cắt ngắn",
    statisticsDialogWord: "{{words}} từ",
    statisticsDialogWords: "{{words}} từ",
    statisticsTitle: "Nhấn vào đây để xem số liệu thống kê",
    tableCreateTitle: "Tạo bảng",
    tableDeleteColumnTitle: "Xóa bảng cột",
    tableDeleteRowTitle: "Xóa các hàng của bảng",
    tableInsertColumnTitle: "Chèn bảng cột",
    tableInsertRowTitle: "Chèn hàng của bảng",
    tableMergeCellsTitle: "Hợp nhất các tế bào bảng",
    tableSplitCellsTitle: "Phân chia tế bào bảng",
    tagMenuTagAddress: "Địa chỉ",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "Nhóm 1",
    tagMenuTagH2: "Nhóm 2",
    tagMenuTagH3: "Nhóm 3",
    tagMenuTagH4: "Nhóm 4",
    tagMenuTagNA: "N\/A",
    tagMenuTagP: "Đoạn",
    tagMenuTagPre: "Trước định dạng",
    tagMenuTitle: "Thay đổi phong cách yếu tố",
    tagTreeElementLink: "Chọn phần tử {{element}}",
    tagTreeElementTitle: "Nhấn vào đây để chọn các nội dung của các yếu tố \"{{element}}\"",
    tagTreeRoot: "gốc",
    tagTreeRootLink: "Chọn tất cả nội dung có thể chỉnh sửa",
    tagTreeRootTitle: "Bấm vào để chọn tất cả nội dung có thể chỉnh sửa",
    textBlockQuoteTitle: "Khối trích dẫn",
    textBoldTitle: "Đậm",
    textItalicTitle: "Nghiêng",
    textSizeDecreaseTitle: "Giảm cỡ chữ",
    textSizeIncreaseTitle: "Tăng cỡ chữ",
    textStrikeTitle: "Tấn công thông qua",
    textSubTitle: "Kịch bản phụ",
    textSuperTitle: "Siêu kịch bản",
    textUnderlineTitle: "Gạch dưới",
    unsavedEditWarningText: "Có được lưu thay đổi trên Trang này",
    viewSourceDialogCancelButton: "Đóng",
    viewSourceDialogOKButton: "Áp dụng mã nguồn",
    viewSourceDialogTitle: "Nội dung nguồn mã",
    viewSourceTitle: "Xem\/chỉnh sửa mã nguồn"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/vi.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/zh-CHS.js
/**
 * @fileOverview Chinese (Simplified) strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('zh-CHS', '中文 (简体)', {
    alignCenterTitle: "文本居中对齐",
    alignJustifyTitle: "对齐文本的理由",
    alignLeftTitle: "使文本左对齐",
    alignRightTitle: "右对齐文本",
    cancelDialogCancelButton: "继续编辑",
    cancelDialogContent: "确实要取消编辑吗?所有更改将都会丢失!",
    cancelDialogOKButton: "取消编辑",
    cancelDialogTitle: "取消编辑",
    cancelTitle: "取消编辑",
    classMenuTitle: "样式选择器",
    clearFormattingTitle: "清除格式",
    clickButtonToEditText: "编辑",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "自动",
    colorMenuBasicBlack: "黑色",
    colorMenuBasicBlue: "蓝色",
    colorMenuBasicGreen: "绿色",
    colorMenuBasicGrey: "灰色",
    colorMenuBasicOrange: "橙色",
    colorMenuBasicPurple: "紫色",
    colorMenuBasicRed: "红色",
    colorMenuBasicTitle: "更改文本颜色",
    colorMenuBasicWhite: "白色",
    dockToElementTitle: "坞站\/取消停靠到元素编辑器",
    dockToScreenTitle: "坞站\/取消停靠到屏幕编辑器",
    embedDialogCancelButton: "取消",
    embedDialogOKButton: "嵌入的对象",
    embedDialogTabCode: "嵌入代码",
    embedDialogTabCodeContent: "将您嵌入代码粘贴到下面的文本区域：",
    embedDialogTabPreview: "预览",
    embedDialogTabPreviewContent: "嵌入对象的预览将显示如下：",
    embedDialogTitle: "嵌入的对象",
    embedTitle: "嵌入的对象",
    errorUINoName: "UI\"{{ui}}\"是无效的 （必须有一个名称属性）",
    errorUINotObject: "UI\"{{ui}}\"是无效的 （必须是一个对象)",
    errorUIOverride: "UI\"{{name}}\"已被注册，并将被覆盖",
    fileManagerDialogTitle: "文件管理器",
    fileManagerTitle: "文件管理器",
    floatLeftTitle: "对齐图像向左",
    floatNoneTitle: "删除图像对齐",
    floatRightTitle: "对齐图像向右",
    fontFamilyMenuFontArial: "宋体",
    fontFamilyMenuFontComicSans: "没有漫画",
    fontFamilyMenuFontCourier: "新宋体",
    fontFamilyMenuFontDefault: "默认字体",
    fontFamilyMenuFontGeorgia: "格鲁吉亚",
    fontFamilyMenuFontImpact: "影响",
    fontFamilyMenuFontPalatino: "帕拉蒂尼",
    fontFamilyMenuFontTimes: "倍新罗马",
    fontFamilyMenuTitle: "选择您的字体",
    guidesTitle: "显示元素参考线",
    historyRedoTitle: "重做",
    historyUndoTitle: "撤消",
    hrCreateTitle: "插入水平线规则",
    imageResizeButtonDialogCancelButton: "取消",
    imageResizeButtonDialogHeight: "图像高度",
    imageResizeButtonDialogHeightPlaceHolder: "高度",
    imageResizeButtonDialogOKButton: "调整大小",
    imageResizeButtonDialogTitle: "调整图像的大小",
    imageResizeButtonDialogWidth: "图像宽度",
    imageResizeButtonDialogWidthPlaceHolder: "宽度",
    imageResizeButtonText: "调整图像的大小",
    insertFileDialogCancelButton: "取消",
    insertFileDialogOKButton: "插入文件",
    insertFileNameLabel: "文件名称",
    insertFileNamePlaceHolder: "文件名称...",
    insertFileTitle: "插入文件",
    insertFileURLLabel: "文件的 URL",
    insertFileURLPlaceHolder: "文件的 URL......",
    languageMenuTitle: "更改语言",
    linkCreateDialogCancelButton: "取消",
    linkCreateDialogMenuHeader: "选择一个链接类型",
    linkCreateDialogOKButton: "插入链接",
    linkCreateDialogTitle: "插入链接",
    linkCreateTitle: "插入链接",
    linkRemoveTitle: "删除链接",
    linkTypeDocumentHeader: "链接到文件或其他文件",
    linkTypeDocumentInfo: "<h2>不确定要放置在上面的框中的内容吗？<\/h2><ol>    <li>确保文件已上载到您的网站。<\/li>    <li>在您的浏览器中打开已上载的文件。<\/li>    <li>从您的浏览器的地址栏中复制文件的 URL 并将其粘贴到上面的框。<\/li><\/ol>",
    linkTypeDocumentLabel: "文档或其他文件",
    linkTypeDocumentLocationLabel: "位置：",
    linkTypeDocumentLocationPlaceHolder: "输入一个 URL",
    linkTypeDocumentNewWindowHeader: "新窗口",
    linkTypeDocumentNewWindowLabel: "选中此复选框有一个新的浏览器窗口\/选项卡中打开该文件。",
    linkTypeEmailHeader: "链接到电子邮件地址",
    linkTypeEmailLabel: "电子邮件地址",
    linkTypeEmailSubjectLabel: "主题 （可选）：",
    linkTypeEmailSubjectPlaceHolder: "输入主题",
    linkTypeEmailToLabel: "电子邮件：",
    linkTypeEmailToPlaceHolder: "输入电子邮件地址",
    linkTypeExternalHeader: "链接到另一个网站上的网页",
    linkTypeExternalInfo: "<h2>不确定要放置在上面的框中的内容吗？<\/h2><ol>    <li>找到你想要链接到的 web 上的页面。<\/li>    <li>从您的浏览器的地址栏复制 web 地址并将其粘贴到上面的框。<\/li><\/ol>",
    linkTypeExternalLabel: "另一个网站的网页上",
    linkTypeExternalLocationLabel: "位置：",
    linkTypeExternalLocationPlaceHolder: "输入一个 URL",
    linkTypeExternalNewWindowHeader: "新窗口",
    linkTypeExternalNewWindowLabel: "选中此复选框以在新的浏览器窗口\/选项卡中打开该链接。",
    linkTypeInternalHeader: "链接到本网站上的网页",
    linkTypeInternalInfo: "<h2>不确定要放置在上面的框中的内容吗？<\/h2><ol>    <li>找到关于此站点链接到的页面。<\/li>    <li>从您的浏览器的地址栏，不包括\"{{domain}}\"域中复制 web 地址并将其粘贴到上面的框。<\/li><\/ol>",
    linkTypeInternalLabel: "本网站上的页面",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "输入一个 URI",
    linkTypeInternalNewWindowHeader: "新窗口",
    linkTypeInternalNewWindowLabel: "选中此复选框以在新的浏览器窗口\/选项卡中打开该链接。",
    listOrderedTitle: "排序的列表",
    listUnorderedTitle: "未排序的列表",
    logoTitle: "了解更多关于猛禽所见即所得编辑器",
    loremIpsumTitle: "插入用于测试的虚拟文本",
    navigateAway: "在此页上未保存的更改。如果您导航到其他页面，您将丢失未保存的更改",
    pasteDialogCancelButton: "取消",
    pasteDialogFormattedCleaned: "格式化和清理",
    pasteDialogFormattedUnclean: "格式化不洁",
    pasteDialogOKButton: "插入",
    pasteDialogPlain: "纯文本",
    pasteDialogSource: "源代码",
    pasteDialogTitle: "粘贴",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "未能检索的修订",
    revisionsApplyButtonDialogCancelButton: "取消",
    revisionsApplyButtonDialogOKButton: "回滚",
    revisionsApplyButtonDialogText: "回滚确认",
    revisionsApplyButtonDialogTitle: "回滚确认",
    revisionsApplyButtonText: "回滚",
    revisionsApplyButtonTitle: "回滚",
    revisionsApplyDialogContent: "这将替换当前的内容与选定的修订版本。<br>当前内容将被添加为修订，并将在此块的修订列表中可见。",
    revisionsButtonCurrent: "当前",
    revisionsButtonViewDiffText: "差异",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "创建",
    revisionsDialogCancelButton: "取消",
    revisionsDialogTitle: "视图内容修订",
    revisionsDiffButtonDialogCancelButton: "关闭",
    revisionsDiffButtonDialogTitle: "查看差异",
    revisionsDiffButtonText: "查看差异",
    revisionsDiffButtonTitle: "查看差异",
    revisionsLoading: "正在加载修订...",
    revisionsNone: "此元素没有修订",
    revisionsPreviewButtonText: "预览",
    revisionsPreviewButtonTitle: "预览",
    revisionsText: "修订",
    revisionsTextEmpty: "没有修订",
    revisionsTitle: "",
    rfmClose: "关闭",
    rfmContinue: "继续",
    rfmDelete: "删除",
    rfmDownload: "下载",
    rfmFileActions: "行动",
    rfmFileModificationTime: "修改",
    rfmFileName: "名称",
    rfmFileSize: "大小",
    rfmFileType: "类型",
    rfmFilteredTotal: "显示 {{start}} {{end}} {{filteredTotal}} 的文件",
    rfmFirst: "第一次",
    rfmHeadingDirectories: "目录",
    rfmHeadingSearch: "搜索",
    rfmHeadingTags: "标签",
    rfmHeadingUpload: "上传",
    rfmInsert: "插入",
    rfmLast: "最后",
    rfmSearch: "转到",
    rfmTagDocument: "文档",
    rfmTagImage: "图像",
    rfmTotal: "{{total}} 从筛选",
    rfmUpload: "上传",
    rfmUploadBrowse: "浏览",
    rfmUploadDrop: "将文件拖至此处",
    rfmUploadFileRemove: "删除",
    rfmUploadOr: "或",
    rfmView: "视图",
    saveJsonFail: "未能保存 {{failed}} 内容提供数据块",
    saveJsonSaved: "已成功保存 {{saved}} 内容提供的数据块。",
    saveNotConfigured: "保存未配置，或被禁用。",
    saveRestFail: "未能保存 {{failed}} 内容提供的数据块。",
    saveRestPartial: "保存 {{saved}} {{failed}} 的内容块了。",
    saveRestSaved: "已成功保存 {{saved}} 内容提供的数据块。",
    saveTitle: "保存的内容",
    snippetMenuTitle: "代码段",
    specialCharactersArrows: "箭头",
    specialCharactersDialogOKButton: "还行",
    specialCharactersDialogTitle: "插入特殊字符",
    specialCharactersGreekAlphabet: "希腊字母表",
    specialCharactersHelp: "单击要添加特殊字符。单击\"确定\"完成后关闭此对话框",
    specialCharactersMathematics: "数学",
    specialCharactersSymbols: "符号",
    specialCharactersTitle: "插入特殊字符",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} 字符超出限制",
    statisticsButtonCharacterRemaining: "剩余的 {{charactersRemaining}} 字符",
    statisticsButtonCharacters: "{{characters}} 字符",
    statisticsDialogCharactersOverLimit: "在建议的限制 {{characters}} {{charactersRemaining}} 字符",
    statisticsDialogCharactersRemaining: "{{characters}} {{charactersRemaining}} 字符剩余",
    statisticsDialogNotTruncated: "内容不会被截断",
    statisticsDialogOKButton: "还行",
    statisticsDialogSentence: "{{sentences}} 句子",
    statisticsDialogSentences: "{{sentences}} 的句子",
    statisticsDialogTitle: "内容统计",
    statisticsDialogTruncated: "内容包含超过 {{limit}} 字符和可能会被截断",
    statisticsDialogWord: "{{words}} 字",
    statisticsDialogWords: "{{words}} 字",
    statisticsTitle: "单击此处，查看统计信息",
    tableCreateTitle: "创建表",
    tableDeleteColumnTitle: "删除表格列",
    tableDeleteRowTitle: "删除表格行",
    tableInsertColumnTitle: "插入表格列",
    tableInsertRowTitle: "插入表格行",
    tableMergeCellsTitle: "合并表格单元格",
    tableSplitCellsTitle: "拆分表格单元格",
    tagMenuTagAddress: "地址",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "标题 1",
    tagMenuTagH2: "标题 2",
    tagMenuTagH3: "标题 3",
    tagMenuTagH4: "标题 4",
    tagMenuTagNA: "不适用",
    tagMenuTagP: "段",
    tagMenuTagPre: "预格式化",
    tagMenuTitle: "更改元素的样式",
    tagTreeElementLink: "选择 {{element}} 元素",
    tagTreeElementTitle: "单击以选中\"{{element}}\"元素的内容",
    tagTreeRoot: "根",
    tagTreeRootLink: "选择所有可编辑内容",
    tagTreeRootTitle: "单击以选择所有可编辑内容",
    textBlockQuoteTitle: "块引用",
    textBoldTitle: "加粗",
    textItalicTitle: "斜体",
    textSizeDecreaseTitle: "减小文本大小",
    textSizeIncreaseTitle: "增加文本的大小",
    textStrikeTitle: "通过罢工",
    textSubTitle: "分脚本",
    textSuperTitle: "超级脚本",
    textUnderlineTitle: "下划线",
    unsavedEditWarningText: "在此页上那里未保存的更改",
    viewSourceDialogCancelButton: "关闭",
    viewSourceDialogOKButton: "应用源代码",
    viewSourceDialogTitle: "内容源的代码",
    viewSourceTitle: "查看\/编辑源代码"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/zh-CHS.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/zh-CHT.js
/**
 * @fileOverview Chinese (Traditional) strings file.
 * @license http://www.raptor-editor.com/license
 *
 * Note: this file was automatically translated and may not be 100% correct.
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
extendLocale('zh-CHT', '中文 (繁體)', {
    alignCenterTitle: "文本居中對齊",
    alignJustifyTitle: "對齊文本的理由",
    alignLeftTitle: "使文本左對齊",
    alignRightTitle: "右對齊文本",
    cancelDialogCancelButton: "繼續編輯",
    cancelDialogContent: "確實要取消編輯嗎?所有更改將都會丟失!",
    cancelDialogOKButton: "取消編輯",
    cancelDialogTitle: "取消編輯",
    cancelTitle: "取消編輯",
    classMenuTitle: "樣式選擇器",
    clearFormattingTitle: "清除格式",
    clickButtonToEditText: "編輯",
    clickButtonToEditTitle: "",
    colorMenuBasicAutomatic: "自動",
    colorMenuBasicBlack: "黑色",
    colorMenuBasicBlue: "藍色",
    colorMenuBasicGreen: "綠色",
    colorMenuBasicGrey: "灰色",
    colorMenuBasicOrange: "橙色",
    colorMenuBasicPurple: "紫色",
    colorMenuBasicRed: "紅色",
    colorMenuBasicTitle: "更改文本顏色",
    colorMenuBasicWhite: "白色",
    dockToElementTitle: "塢站\/取消停靠到元素編輯器",
    dockToScreenTitle: "塢站\/取消停靠到螢幕編輯器",
    embedDialogCancelButton: "取消",
    embedDialogOKButton: "嵌入的物件",
    embedDialogTabCode: "嵌入代碼",
    embedDialogTabCodeContent: "將您嵌入代碼粘貼到下面的文本區域：",
    embedDialogTabPreview: "預覽",
    embedDialogTabPreviewContent: "內嵌物件的預覽將顯示如下：",
    embedDialogTitle: "嵌入的物件",
    embedTitle: "嵌入的物件",
    errorUINoName: "UI\"{{ui}}\"是不正確 （必須有一個名稱屬性）",
    errorUINotObject: "UI\"{{ui}}\"是不正確 （必須是一個物件)",
    errorUIOverride: "UI\"{{name}}\"已被註冊，並將被覆蓋",
    fileManagerDialogTitle: "檔案管理員",
    fileManagerTitle: "檔案管理員",
    floatLeftTitle: "對齊圖像向左",
    floatNoneTitle: "刪除圖像對齊",
    floatRightTitle: "對齊圖像向右",
    fontFamilyMenuFontArial: "宋體",
    fontFamilyMenuFontComicSans: "沒有漫畫",
    fontFamilyMenuFontCourier: "新宋體",
    fontFamilyMenuFontDefault: "預設字型",
    fontFamilyMenuFontGeorgia: "格魯吉亞",
    fontFamilyMenuFontImpact: "影響",
    fontFamilyMenuFontPalatino: "帕拉蒂尼",
    fontFamilyMenuFontTimes: "倍新羅馬",
    fontFamilyMenuTitle: "選擇您的字體",
    guidesTitle: "顯示元素輔助線",
    historyRedoTitle: "重做",
    historyUndoTitle: "撤銷",
    hrCreateTitle: "插入水平線規則",
    imageResizeButtonDialogCancelButton: "取消",
    imageResizeButtonDialogHeight: "圖像高度",
    imageResizeButtonDialogHeightPlaceHolder: "高度",
    imageResizeButtonDialogOKButton: "調整大小",
    imageResizeButtonDialogTitle: "調整圖像的大小",
    imageResizeButtonDialogWidth: "圖像寬度",
    imageResizeButtonDialogWidthPlaceHolder: "寬度",
    imageResizeButtonText: "調整圖像的大小",
    insertFileDialogCancelButton: "取消",
    insertFileDialogOKButton: "插入檔",
    insertFileNameLabel: "檔案名稱",
    insertFileNamePlaceHolder: "檔案名稱...",
    insertFileTitle: "插入檔",
    insertFileURLLabel: "檔的 URL",
    insertFileURLPlaceHolder: "檔的 URL......",
    languageMenuTitle: "更改語言",
    linkCreateDialogCancelButton: "取消",
    linkCreateDialogMenuHeader: "選擇一個連結類型",
    linkCreateDialogOKButton: "插入連結",
    linkCreateDialogTitle: "插入連結",
    linkCreateTitle: "插入連結",
    linkRemoveTitle: "刪除連結",
    linkTypeDocumentHeader: "連結到檔或其他檔",
    linkTypeDocumentInfo: "<h2>不確定要放置在上面的框中的內容嗎？<\/h2><ol>    <li>確保檔已上載到您的網站。<\/li>    <li>在您的瀏覽器中打開已上載的檔。<\/li>    <li>從您的瀏覽器的網址列中複製檔的 URL 並將其粘貼到上面的框。<\/li><\/ol>",
    linkTypeDocumentLabel: "文檔或其他檔",
    linkTypeDocumentLocationLabel: "位置：",
    linkTypeDocumentLocationPlaceHolder: "輸入一個 URL",
    linkTypeDocumentNewWindowHeader: "新視窗",
    linkTypeDocumentNewWindowLabel: "選中此核取方塊有一個新的瀏覽器視窗\/選項卡中打開該檔。",
    linkTypeEmailHeader: "連結到電子郵件地址",
    linkTypeEmailLabel: "電子郵件地址",
    linkTypeEmailSubjectLabel: "主題 （可選）：",
    linkTypeEmailSubjectPlaceHolder: "輸入主題",
    linkTypeEmailToLabel: "電子郵件：",
    linkTypeEmailToPlaceHolder: "輸入電子郵件地址",
    linkTypeExternalHeader: "連結到另一個網站上的網頁",
    linkTypeExternalInfo: "<h2>不確定要放置在上面的框中的內容嗎？<\/h2><ol>    <li>找到你想要連結到的 web 上的頁面。<\/li>    <li>從您的瀏覽器的網址列複製 web 位址並將其粘貼到上面的框。<\/li><\/ol>",
    linkTypeExternalLabel: "另一個網站的網頁上",
    linkTypeExternalLocationLabel: "位置：",
    linkTypeExternalLocationPlaceHolder: "輸入一個 URL",
    linkTypeExternalNewWindowHeader: "新視窗",
    linkTypeExternalNewWindowLabel: "選中此核取方塊以在新的瀏覽器視窗\/選項卡中打開該連結。",
    linkTypeInternalHeader: "連結到本網站上的網頁",
    linkTypeInternalInfo: "<h2>不確定要放置在上面的框中的內容嗎？<\/h2><ol>    <li>找到關於此站台連結到的頁面。<\/li>    <li>從您的瀏覽器的網址列，不包括\"{{domain}}\"域中複製 web 位址並將其粘貼到上面的框。<\/li><\/ol>",
    linkTypeInternalLabel: "本網站上的頁面",
    linkTypeInternalLocationLabel: "",
    linkTypeInternalLocationPlaceHolder: "輸入一個 URI",
    linkTypeInternalNewWindowHeader: "新視窗",
    linkTypeInternalNewWindowLabel: "選中此核取方塊以在新的瀏覽器視窗\/選項卡中打開該連結。",
    listOrderedTitle: "排序的清單",
    listUnorderedTitle: "未排序的清單",
    logoTitle: "瞭解更多關於猛禽所見即所得編輯器",
    loremIpsumTitle: "插入用於測試的虛擬文本",
    navigateAway: "在此頁上未保存的更改。如果您導航到其他頁面，您將丟失未保存的更改",
    pasteDialogCancelButton: "取消",
    pasteDialogFormattedCleaned: "格式化和清理",
    pasteDialogFormattedUnclean: "格式化不潔",
    pasteDialogOKButton: "插入",
    pasteDialogPlain: "純文字",
    pasteDialogSource: "原始程式碼",
    pasteDialogTitle: "粘貼",
    placeholderPluginDefaultContent: "",
    revisionsAJAXFailed: "未能檢索的修訂",
    revisionsApplyButtonDialogCancelButton: "取消",
    revisionsApplyButtonDialogOKButton: "回滾",
    revisionsApplyButtonDialogText: "回滾確認",
    revisionsApplyButtonDialogTitle: "回滾確認",
    revisionsApplyButtonText: "回滾",
    revisionsApplyButtonTitle: "回滾",
    revisionsApplyDialogContent: "這將替換當前的內容與選定的修訂版本。<br>當前內容將被添加為修訂，並將在此塊的修訂清單中可見。",
    revisionsButtonCurrent: "當前",
    revisionsButtonViewDiffText: "差異",
    revisionsButtonViewDiffTitle: "",
    revisionsCreated: "創建",
    revisionsDialogCancelButton: "取消",
    revisionsDialogTitle: "視圖內容修訂",
    revisionsDiffButtonDialogCancelButton: "關閉",
    revisionsDiffButtonDialogTitle: "查看差異",
    revisionsDiffButtonText: "查看差異",
    revisionsDiffButtonTitle: "查看差異",
    revisionsLoading: "正在載入修訂...",
    revisionsNone: "此元素沒有修訂",
    revisionsPreviewButtonText: "預覽",
    revisionsPreviewButtonTitle: "預覽",
    revisionsText: "修訂",
    revisionsTextEmpty: "沒有修訂",
    revisionsTitle: "",
    rfmClose: "關閉",
    rfmContinue: "繼續",
    rfmDelete: "刪除",
    rfmDownload: "下載",
    rfmFileActions: "行動",
    rfmFileModificationTime: "修改",
    rfmFileName: "名稱",
    rfmFileSize: "大小",
    rfmFileType: "類型",
    rfmFilteredTotal: "顯示 {{start}} {{end}} {{filteredTotal}} 的檔",
    rfmFirst: "第一次",
    rfmHeadingDirectories: "目錄",
    rfmHeadingSearch: "搜索",
    rfmHeadingTags: "標籤",
    rfmHeadingUpload: "上傳",
    rfmInsert: "插入",
    rfmLast: "最後",
    rfmSearch: "轉到",
    rfmTagDocument: "文檔",
    rfmTagImage: "圖像",
    rfmTotal: "{{total}} 從篩選",
    rfmUpload: "上傳",
    rfmUploadBrowse: "流覽",
    rfmUploadDrop: "將檔拖至此處",
    rfmUploadFileRemove: "刪除",
    rfmUploadOr: "或",
    rfmView: "視圖",
    saveJsonFail: "未能保存 {{failed}} 內容提供資料塊",
    saveJsonSaved: "已成功保存 {{saved}} 內容提供的資料塊。",
    saveNotConfigured: "保存未配置，或被禁用。",
    saveRestFail: "未能保存 {{failed}} 內容提供的資料塊。",
    saveRestPartial: "保存 {{saved}} {{failed}} 的內容塊了。",
    saveRestSaved: "已成功保存 {{saved}} 內容提供的資料塊。",
    saveTitle: "保存的內容",
    snippetMenuTitle: "程式碼片段",
    specialCharactersArrows: "箭頭",
    specialCharactersDialogOKButton: "還行",
    specialCharactersDialogTitle: "插入特殊字元",
    specialCharactersGreekAlphabet: "希臘字母表",
    specialCharactersHelp: "按一下要添加特殊字元。按一下\"確定\"完成後關閉此對話方塊",
    specialCharactersMathematics: "數學",
    specialCharactersSymbols: "符號",
    specialCharactersTitle: "插入特殊字元",
    statisticsButtonCharacterOverLimit: "{{charactersRemaining}} 字元超出限制",
    statisticsButtonCharacterRemaining: "剩餘的 {{charactersRemaining}} 字元",
    statisticsButtonCharacters: "{{characters}} 字元",
    statisticsDialogCharactersOverLimit: "在建議的限制 {{characters}} {{charactersRemaining}} 字元",
    statisticsDialogCharactersRemaining: "{{characters}} {{charactersRemaining}} 字元剩餘",
    statisticsDialogNotTruncated: "內容不會被截斷",
    statisticsDialogOKButton: "還行",
    statisticsDialogSentence: "{{sentences}} 句子",
    statisticsDialogSentences: "{{sentences}} 的句子",
    statisticsDialogTitle: "內容統計",
    statisticsDialogTruncated: "內容包含超過 {{limit}} 字元和可能會被截斷",
    statisticsDialogWord: "{{words}} 字",
    statisticsDialogWords: "{{words}} 字",
    statisticsTitle: "按一下此處，查看統計資訊",
    tableCreateTitle: "創建表",
    tableDeleteColumnTitle: "刪除表格列",
    tableDeleteRowTitle: "刪除表格行",
    tableInsertColumnTitle: "插入表格列",
    tableInsertRowTitle: "插入表格行",
    tableMergeCellsTitle: "合併表格儲存格",
    tableSplitCellsTitle: "拆分表格儲存格",
    tagMenuTagAddress: "位址",
    tagMenuTagDiv: "Div",
    tagMenuTagH1: "標題 1",
    tagMenuTagH2: "標題 2",
    tagMenuTagH3: "標題 3",
    tagMenuTagH4: "標題 4",
    tagMenuTagNA: "不適用",
    tagMenuTagP: "段",
    tagMenuTagPre: "預格式化",
    tagMenuTitle: "更改元素的樣式",
    tagTreeElementLink: "選擇 {{element}} 元素",
    tagTreeElementTitle: "按一下以選中\"{{element}}\"元素的內容",
    tagTreeRoot: "根",
    tagTreeRootLink: "選擇所有可編輯內容",
    tagTreeRootTitle: "按一下以選擇所有可編輯內容",
    textBlockQuoteTitle: "塊引用",
    textBoldTitle: "加粗",
    textItalicTitle: "斜體",
    textSizeDecreaseTitle: "減小文本大小",
    textSizeIncreaseTitle: "增加文本的大小",
    textStrikeTitle: "通過罷工",
    textSubTitle: "分腳本",
    textSuperTitle: "超級腳本",
    textUnderlineTitle: "底線",
    unsavedEditWarningText: "在此頁上那裡未保存的更改",
    viewSourceDialogCancelButton: "關閉",
    viewSourceDialogOKButton: "應用原始程式碼",
    viewSourceDialogTitle: "內容源的代碼",
    viewSourceTitle: "查看\/編輯原始程式碼"
});;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-locales/zh-CHT.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/action.js
/**
 * @fileOverview Action helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Previews an action on an element.
 * @todo check descriptions for accuracy
 * @param {Object} previewState The saved state of the target.
 * @param {jQuery} target Element to have the preview applied to it.
 * @param {function} action The action to be previewed.
 * @returns {Object} ??
 */
function actionPreview(previewState, target, action) {
    // <strict/>

    actionPreviewRestore(previewState, target);

    previewState = stateSave(target);
    action();
    rangy.getSelection().removeAllRanges();
    return previewState;
}

/**
 * Changes an element back to its saved state and returns that element.
 * @todo check descriptions please.
 * @param {Object} previewState The previously saved state of the target.
 * @param {jQuery} target The element to have it's state restored.
 * @returns {jQuery} The restored target.
 */
function actionPreviewRestore(previewState, target) {
    if (previewState) {
        var state = stateRestore(target, previewState);
        if (state.ranges) {
            rangy.getSelection().setRanges(state.ranges);
        }
        return state.element;
    }
    return target;
}

/**
 * Applies an action.
 * @todo types for params
 * @param {type} action The action to apply.
 * @param {type} history
 */
function actionApply(action, history) {
    action();
}

/**
 * Undoes an action.
 *
 * @returns {undefined}
 */
function actionUndo() {

}

/**
 * Redoes an action.
 *
 * @returns {undefined}
 */
function actionRedo() {

}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/action.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/clean.js
/**
 * @fileOverview Cleaning helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen - david@panmedia.co.nz
 * @author Michael Robinson - michael@panmedia.co.nz
 */

/**
 * Replaces elements in another elements. E.g.
 *
 * @example
 * cleanReplaceElements('.content', {
 *     'b': '<strong/>',
 *     'i': '<em/>',
 * });
 *
 * @param  {jQuery|Element|Selector} selector The element to be find and replace in.
 * @param  {Object} replacements A map of selectors to replacements. The replacement
 *   can be a jQuery object, an element, or a selector.
 */
function cleanReplaceElements(selector, replacements) {
    for (var find in replacements) {
        var replacement = replacements[find];
        var i = 0;
        var found = false;
        do {
            found = $(selector).find(find);
            if (found.length) {
                found = $(found.get(0));
                var clone = $(replacement).clone();
                clone.html(found.html());
                clone.attr(elementGetAttributes(found));
                found.replaceWith(clone);
            }
        } while(found.length);
    }
}

/**
 * Unwrap function. Currently just wraps jQuery.unwrap() but may be extended in future.
 *
 * @param  {jQuery|Element|Selector} selector The element to unwrap.
 */
function cleanUnwrapElements(selector) {
    $(selector).unwrap();
}

/**
 * Takes a supplied element and removes all of the empty attributes from it.
 *
 * @param {jQuery} element This is the element to remove all the empty attributes from.
 * @param {array} attributes This is an array of the elements attributes.
 */
function cleanEmptyAttributes(element, attributes) {
    // <strict/>

    for (i = 0; i < attributes.length; i++) {
        if (!$.trim(element.attr(attributes[i]))) {
            element.removeAttr(attributes[i]);
        }
        element
            .find('[' + attributes[i] + ']')
            .filter(function() {
                return $.trim($(this).attr(attributes[i])) === '';
            }).removeAttr(attributes[i]);
    }
}

/**
 * Remove comments from element.
 *
 * @param  {jQuery} parent The jQuery element to have comments removed from.
 * @return {jQuery} The modified parent.
 */
function cleanRemoveComments(parent) {
    // <strict/>

    parent.contents().each(function() {
        if (this.nodeType == Node.COMMENT_NODE) {
            $(this).remove();
        }
    });
    parent.children().each(function() {
        cleanRemoveComments($(this));
    });
    return parent;
}


/**
 * Removed empty elements whose tag name matches the list of supplied tags.
 *
 * @param  {jQuery} element The jQuery element to have empty element removed from.
 * @param  {String[]} tags The list of tags to clean.
 * @return {jQuery} The modified element.
 */
function cleanEmptyElements(element, tags) {
    // <strict/>
    var found;
    // Need to loop incase removing an empty element, leaves another one.
    do {
        found = false;
        element.find(tags.join(',')).each(function() {
            var html = $(this).html().replace('&nbsp;', ' ').trim();
            if (html === '') {
                $(this).remove();
                found = true;
            }
        });
    } while (found);
    return element;
}

/**
 * Wraps any text nodes in the node with the supplied tag. This does not scan child elements.
 *
 * @param  {Node} node
 * @param  {String} tag The tag to use from wrapping the text nodes.
 */
function cleanWrapTextNodes(node, tag) {
    // <strict/>

    var textNodes = nodeFindTextNodes(node);
    for (var i = 0, l = textNodes.length; i < l; i++) {
        var clone = textNodes[i].cloneNode(),
            wrapper = document.createElement(tag);
        wrapper.appendChild(clone);
        node.insertBefore(wrapper, textNodes[i]);
        node.removeChild(textNodes[i]);
    }
}

function cleanUnnestElement(element, selector) {
    var found;
    do {
        found = false;
        $(element).find(selector).each(function() {
            if ($(this).parent().is(selector)) {
                $(this).unwrap();
                found = true;
            }
        });
    } while (found);

}

function cleanRemoveAttributes(element, attributes) {
    // <strict/>

    for (var i = 0; i < attributes.length; i++) {
        element.find('[' + attributes[i] + ']').removeAttr(attributes[i])
    }
}

function cleanRemoveElements(element, elements) {
    element.find(elements.join(',')).contents().unwrap();
}

/**
 * Generic clean function to remove misc elements.
 *
 * @param  {jQuery} element
 */
function clean(element) {
    $(element).find('.rangySelectionBoundary').remove();
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/clean.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/dock.js
/**
 * @fileOverview Docking to screen and element helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Docks a specified element to the screen.
 *
 * @param {jQuery} element The element to dock.
 * @param {string} options Any options to further specify the docking state.
 * @returns {Object} An object containing the docked element, a spacer div and the style state.
 */
function dockToScreen(element, options) {
    var position,
        spacer = $('<div>')
            .addClass('spacer');
    if (options.position === 'top') {
        position = {
            position: 'fixed',
            top: options.under ? $(options.under).outerHeight() : 0,
            left: 0,
            right: 0
        };
        if (options.spacer) {
            if (options.under) {
                spacer.insertAfter(options.under);
            } else {
                spacer.prependTo('body');
            }
        }
    } else if (options.position === 'topLeft') {
        position = {
            position: 'fixed',
            top: options.under ? $(options.under).outerHeight() : 0,
            left: 0
        };
        if (options.spacer) {
            if (options.under) {
                spacer.insertAfter(options.under);
            } else {
                spacer.prependTo('body');
            }
        }
    } else if (options.position === 'topRight') {
        position = {
            position: 'fixed',
            top: options.under ? $(options.under).outerHeight() : 0,
            right: 0
        };
        if (options.spacer) {
            if (options.under) {
                spacer.insertAfter(options.under);
            } else {
                spacer.prependTo('body');
            }
        }
    } else if (options.position === 'bottom') {
        position = {
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0
        };
        if (options.spacer) {
            spacer.appendTo('body');
        }
    } else if (options.position === 'bottomLeft') {
        position = {
            position: 'fixed',
            bottom: 0,
            left: 0
        };
        if (options.spacer) {
            spacer.appendTo('body');
        }
    } else if (options.position === 'bottomRight') {
        position = {
            position: 'fixed',
            bottom: 0,
            right: 0
        };
        if (options.spacer) {
            spacer.appendTo('body');
        }
    }
    var styleState = styleSwapState(element, position);
    spacer.css('height', element.outerHeight());
    setTimeout(function() {
        spacer.css('height', element.outerHeight());
    }, 300);
    return {
        dockedElement: element,
        spacer: spacer,
        styleState: styleState
    };
}

/**
 * Undocks a docked element from the screen.
 * @todo not sure of description for dockState
 * @param {jQuery} dockState
 * @returns {unresolved}
 */
function undockFromScreen(dockState) {
    styleRestoreState(dockState.dockedElement, dockState.styleState);
    dockState.spacer.remove();
    return dockState.dockedElement.detach();
}

/**
 * Docks an element to a another element.
 *
 * @param {jQuery} elementToDock This is the element to be docked.
 * @param {jQuery} dockTo This is the element to which the elementToDock will be docked to.
 * @param {string} options These are any options to refine the docking position.
 * @returns {Object} An object containing the docked element, what it has been docked to, and their style states.
 */
function dockToElement(elementToDock, dockTo, options) {
    var wrapper = dockTo
            .wrap('<div>')
            .parent(),
        innerStyleState = styleSwapWithWrapper(wrapper, dockTo, {
            'float': 'none',
            display: 'block',
            clear: 'none',
            position: 'static',

            /* Margin */
            margin: 0,
            marginLeft: 0,
            marginRight: 0,
            marginTop: 0,
            marginBottom: 0,

            /* Padding */
            padding: 0,
            paddingLeft: 0,
            paddingRight: 0,
            paddingTop: 0,
            paddingBottom: 0,

            outline: 0,
            width: 'auto',
            border: 'none'
        }),
        dockedElementStyleState = styleSwapState(elementToDock, {
            position: 'static'
        });
    wrapper
        .prepend(elementToDock)
        .addClass(options.wrapperClass ? options.wrapperClass : '');
    return {
        dockedElement: elementToDock,
        dockedTo: dockTo,
        innerStyleState: innerStyleState,
        dockedElementStyleState: dockedElementStyleState
    };
}

/**
 * Undocks an element from the screen.
 *@todo not sure of description for dockState
 * @param {jQuery} dockState
 * @returns {Object} The undocked element.
 */
function undockFromElement(dockState) {
    styleRestoreState(dockState.dockedTo, dockState.innerStyleState);
    styleRestoreState(dockState.dockedElement, dockState.dockedElementStyleState);
    var dockedElement = dockState.dockedElement.detach();
    dockState.dockedTo.unwrap();
    return dockedElement;
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/dock.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/element.js
/**
 * @fileOverview Element manipulation helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Remove all but the allowed attributes from the parent.
 *
 * @param {jQuery} parent The jQuery element to cleanse of attributes.
 * @param {String[]|null} allowedAttributes An array of allowed attributes.
 * @return {jQuery} The modified parent.
 */
function elementRemoveAttributes(parent, allowedAttributes) {
    parent.children().each(function() {
        var stripAttributes = $.map(this.attributes, function(item) {
            if ($.inArray(item.name, allowedAttributes) === -1) {
                return item.name;
            }
        });
        var child = $(this);
        $.each(stripAttributes, function(i, attributeName) {
            child.removeAttr(attributeName);
        });
        element.removeAttributes($(this), allowedAttributes);
    });
    return parent;
}

/**
 * Sets the z-index CSS property on an element to 1 above all its sibling elements.
 *
 * @param {jQuery} element The jQuery element to have it's z index increased.
 */
function elementBringToTop(element) {
    var zIndex = 1;
    element.siblings().each(function() {
        var z = $(this).css('z-index');
        if (!isNaN(z) && z > zIndex) {
            zIndex = z + 1;
        }
    });
    element.css('z-index', zIndex);
}

/**
 * Retrieve outer html from an element.
 *
 * @param  {jQuery} element The jQuery element to retrieve the outer HTML from.
 * @return {String} The outer HTML.
 */
function elementOuterHtml(element) {
    return element.clone().wrap('<div/>').parent().html();
}

/**
 * Retrieve outer text from an element.
 *
 * @param  {jQuery} element The jQuery element to retrieve the outer text from.
 * @return {String} The outer text.
 */
function elementOuterText(element) {
    return element.clone().wrap('<div/>').parent().text();
}

/**
 * Determine whether element is block.
 *
 * @param  {Element} element The element to test.
 * @return {Boolean} True if the element is a block element
 */
function elementIsBlock(element) {
    return elementDefaultDisplay(element.tagName) === 'block';
}

/**
 * Determine whether element contains a block element.
 *
 * @param  {Element} element
 * @return {Boolean} True if the element contains a block element, false otherwise.
 */
function elementContainsBlockElement(element) {
    var containsBlock = false;
    element.contents().each(function() {
        if (!typeIsTextNode(this) && elementIsBlock(this)) {
            containsBlock = true;
            return;
        }
    });
    return containsBlock;
}

/**
 * Determine whether element is inline or block.
 *
 * @see http://stackoverflow.com/a/2881008/187954
 * @param  {string} tag Lower case tag name, e.g. 'a'.
 * @return {string} Default display style for tag.
 */
function elementDefaultDisplay(tag) {
    var cStyle,
        t = document.createElement(tag),
        gcs = "getComputedStyle" in window;

    document.body.appendChild(t);
    cStyle = (gcs ? window.getComputedStyle(t, "") : t.currentStyle).display;
    document.body.removeChild(t);

    return cStyle;
}

/**
 * Check that the given element is one of the the given tags.
 *
 * @param  {jQuery|Element} element The element to be tested.
 * @param  {Array}  validTags An array of valid tag names.
 * @return {Boolean} True if the given element is one of the give valid tags.
 */
function elementIsValid(element, validTags) {
    return -1 !== $.inArray($(element)[0].tagName.toLowerCase(), validTags);
}

/**
 * According to the given array of valid tags, find and return the first invalid
 * element of a valid parent. Recursively search parents until the wrapper is
 * encountered.
 *
 * @param  {Node} element
 * @param  {string[]} validTags
 * @param  {Element} wrapper
 * @return {Node}           [description]
 */
function elementFirstInvalidElementOfValidParent(element, validTags, wrapper) {
    // <strict/>
    var parent = element.parentNode;
    if (parent[0] === wrapper[0]) {
        // <strict/>
        return element;
    }
    if (elementIsValid(parent, validTags)) {
        return element;
    }
    return elementFirstInvalidElementOfValidParent(parent, validTags, wrapper);
}

/**
 * Calculate and return the visible rectangle for the element.
 *
 * @param  {jQuery|Element} element The element to calculate the visible rectangle for.
 * @return {Object} Visible rectangle for the element.
 */
function elementVisibleRect(element) {
    // <strict/>
    element = $(element);

    var rect = {
        top: Math.round(element.offset().top),
        left: Math.round(element.offset().left),
        width: Math.round(element.outerWidth()),
        height: Math.round(element.outerHeight())
    };


    var scrollTop = $(window).scrollTop();
    var windowHeight = $(window).height();
    var scrollBottom = scrollTop + windowHeight;
    var elementBottom = Math.round(rect.height + rect.top);

    // If top & bottom of element are within the viewport, do nothing.
    if (scrollTop < rect.top && scrollBottom > elementBottom) {
        return rect;
    }

    // Top of element is outside the viewport
    if (scrollTop > rect.top) {
        rect.top = scrollTop;
    }

    // Bottom of element is outside the viewport
    if (scrollBottom < elementBottom) {
        rect.height = scrollBottom - rect.top;
    } else {
        // Bottom of element inside viewport
        rect.height = windowHeight - (scrollBottom - elementBottom);
    }

    return rect;
}

/**
 * Returns a map of an elements attributes and values. The result of this function
 * can be passed directly to $('...').attr(result);
 *
 * @param  {jQuery|Element|Selector} element The element to get the attributes from.
 * @return {Object} A map of attribute names mapped to their values.
 */
function elementGetAttributes(element) {
    var attributes = $(element).get(0).attributes,
        result = {};
    for (var i = 0, l = attributes.length; i < l; i++) {
        result[attributes[i].name] = attributes[i].value;
    }
    return result;
}

/**
 * Gets the styles of an element.
 * @todo the type for result.
 * FIXME: this function needs reviewing.
 * @param {jQuerySelector|jQuery|Element} element This is the element to get the style from.
 * @returns {unresolved} The style(s) of the element.
 */
function elementGetStyles(element) {
    var result = {};
    var style = window.getComputedStyle(element[0], null);
    for (var i = 0; i < style.length; i++) {
        result[style.item(i)] = style.getPropertyValue(style.item(i));
    }
    return result;
}

/**
 * Wraps the inner content of an element with a tag.
 *
 * @param {jQuerySelector|jQuery|Element} element The element(s) to wrap.
 * @param {String} tag The wrapper tag name
 * @returns {jQuery} The wrapped element.
 */
function elementWrapInner(element, tag) {
    var result = new jQuery();
    selectionSave();
    for (var i = 0, l = element.length; i < l; i++) {
        var wrapper = $('<' + tag + '/>').html($(element[i]).html());
        element.html(wrapper);
        result.push(wrapper[0]);
    }
    selectionRestore();
    return result;
}

/**
 * Toggles the styles of an element.
 *
 * FIXME: this function needs reviewing
 * @public @static
 * @param {jQuerySelector|jQuery|Element} element The jQuery element to have it's style changed.
 * @param {type} styles The styles to add or remove from the element.
 * @returns {undefined}
 */
function elementToggleStyle(element, styles) {
    $.each(styles, function(property, value) {
        if ($(element).css(property) === value) {
            $(element).css(property, '');
        } else {
            $(element).css(property, value);
        }
    });
}

/**
 * Swaps the styles of two elements.
 *
 * @param {jQuery|Element} element1 The element for element 2 to get its styles from.
 * @param {jQuery|Element} element2 The element for element 1 to get its styles from.
 * @param {Object} style The style to be swapped between the two elements.
 */
function elementSwapStyles(element1, element2, style) {
    for (var name in style) {
        element1.css(name, element2.css(name));
        element2.css(name, style[name]);
    }
}

/**
 * Checks if an element is empty.
 *
 * @param {Element} element The element to be checked.
 * @returns {Boolean} Returns true if element is empty.
 */
function elementIsEmpty(element) {
    // <strict/>

    // Images and elements containing images are not empty
    if (element.is('img') || element.find('img').length) {
        return false;
    }
    if ((/&nbsp;/).test(element.html())) {
        return false;
    }
    return element.text() === '';
}

/**
 * Positions an element underneath another element.
 *
 * @param {jQuery} element Element to position.
 * @param {jQuery} under Element to position under.
 */
function elementPositionUnder(element, under) {
    var pos = $(under).offset(),
        height = $(under).outerHeight();
    $(element).css({
        top: (pos.top + height - $(window).scrollTop()) + 'px',
        left: pos.left + 'px'
    });
}

/**
 * Removes the element from the DOM to manipulate it using a function passed to the method, then replaces it back to it's origional position.
 *
 * @todo desc and type for manip
 * @param {jQuery|Element} element The element to be manipulated.
 * @param {type} manip A function used to manipulate the element i think.
 */
function elementDetachedManip(element, manip) {
    var parent = $(element).parent();
    $(element).detach();
    manip(element);
    parent.append(element);
}

/**
 * Finds the closest parent, up to a limit element, to the supplied element that is not an display inline or null.
 * If the parent element is the same as the limit element then it returns null.
 *
 * @param {jQuery} element The element to find the closest parent of.
 * @param {jQuery} limitElement The element to stop looking for the closest parent at.
 * @returns {jQuery} Closest element that is not display inline or null, or null if the parent element is the same as the limit element.
 */
function elementClosestBlock(element, limitElement) {
    // <strict/>
    while (element.length > 0 &&
        element[0] !== limitElement[0] &&
        (element[0].nodeType === Node.TEXT_NODE || element.css('display') === 'inline')) {
        element = element.parent();
    }
    if (element[0] === limitElement[0]) {
        return null;
    }
    return element;
}

/**
 * Generates a unique id.
 *
 * @returns {String} The unique id.
 */
function elementUniqueId() {
    var id = 'ruid-' + new Date().getTime() + '-' + Math.floor(Math.random() * 100000);
    while ($('#' + id).length) {
        id = 'ruid-' + new Date().getTime() + '-' + Math.floor(Math.random() * 100000);
    }
    return id;
}

/**
 * Changes the tags on a given element.
 *
 * @todo not sure of details of return
 * @param {jQuerySelector|jQuery|Element} element The element(s) to have it's tags changed
 * @param {Element} newTag The new tag for the element(s)
 * @returns {Element}
 */
function elementChangeTag(element, newTag) {
    // <strict/>
    var tags = [];
    for (var i = element.length - 1; 0 <= i ; i--) {
        var node = document.createElement(newTag);
        node.innerHTML = element[i].innerHTML;
        $.each(element[i].attributes, function() {
            $(node).attr(this.name, this.value);
        });
        $(element[i]).after(node).remove();
        tags[i] = node;
    }
    return $(tags);
}

/**
 * Positions an element over top of another element.
 *  - If the other element is big, then the element is positioned in the center of the visible part of the other element.
 *  - If the other element is small and not at the top of the screen, the other element is positioned at the top of the other element.
 *  - If the other element is small and not is at the top of the screen, the other element is positioned at the bottom of the other element.
 *
 * @param {Element} element The element to position.
 * @param {Element} over The element to position over.
 */
function elementPositionOver(element, over) {
    if (element.outerHeight() > over.outerHeight() - 20) {
        var visibleRect = elementVisibleRect(over),
            offset = over.offset();
        element.css({
            position: 'absolute',
            // Calculate offset center for the element
            top:  offset.top - element.outerHeight(),
            left: visibleRect.left + ((visibleRect.width / 2)  - (element.outerWidth()  / 2))
        });
    } else {
        var visibleRect = elementVisibleRect(over);
        element.css({
            position: 'absolute',
            // Calculate offset center for the element
            top:  visibleRect.top  + ((visibleRect.height / 2) - (element.outerHeight() / 2)),
            left: visibleRect.left + ((visibleRect.width / 2)  - (element.outerWidth()  / 2))
        });
    }
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/element.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/fragment.js
/**
 * @fileOverview DOM fragment manipulation helper functions
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Convert a DOMFragment to an HTML string. Optionally wraps the string in a tag.
 * @todo type for domFragment and tag.
 * @param {type} domFragment The fragment to be converted to a HTML string.
 * @param {type} tag The tag that the string may be wrapped in.
 * @returns {String} The DOMFragment as a string, optionally wrapped in a tag.
 */
function fragmentToHtml(domFragment, tag) {
    var html = '';
    // Get all nodes in the extracted content
    for (var j = 0, l = domFragment.childNodes.length; j < l; j++) {
        var node = domFragment.childNodes.item(j);
        var content = node.nodeType === Node.TEXT_NODE ? node.nodeValue : elementOuterHtml($(node));
        if (content) {
            html += content;
        }
    }
    if (tag) {
        html = $('<' + tag + '>' + html + '</' + tag + '>');
        html.find('p').wrapInner('<' + tag + '/>');
        html.find('p > *').unwrap();
        html = $('<div/>').html(html).html();
    }
    return html;
}

/**
 * Insert a DOMFragment before an element and wraps them both in a tag.
 *
 * @public @static
 * @param {DOMFragment} domFragment This is the DOMFragment to be inserted.
 * @param {jQuerySelector|jQuery|Element} beforeElement This is the element the DOMFragment is to be inserted before.
 * @param {String} wrapperTag This is the tag to wrap the domFragment and the beforeElement in.
 */
function fragmentInsertBefore(domFragment, beforeElement, wrapperTag) {
    // Get all nodes in the extracted content
    for (var j = 0, l = domFragment.childNodes.length; j < l; j++) {
        var node = domFragment.childNodes.item(j);
        // Prepend the node before the current node
        var content = node.nodeType === Node.TEXT_NODE ? node.nodeValue : $(node).html();
        if (content) {
            $('<' + wrapperTag + '/>')
                .html($.trim(content))
                .insertBefore(beforeElement);
        }
    }
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/fragment.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/node.js
/**
 * @fileOverview Find node parent helper function.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */


/**
 * Find the first parent of a node that is not a text node.
 *
 * @param {Node} node
 * @returns {Node}
 */
function nodeFindParent(node) {
    while (node.nodeType === Node.TEXT_NODE) {
        node = node.parentNode;
    }
    return node;
}

function nodeFindTextNodes(node) {
    var textNodes = [], whitespace = /^\s*$/;
    for (var i = 0, l = node.childNodes.length; i < l; i++) {
        if (node.childNodes[i].nodeType == Node.TEXT_NODE) {
            if (!whitespace.test(node.childNodes[i].nodeValue)) {
                textNodes.push(node.childNodes[i]);
            }
        }
    }
    return textNodes;
}

function nodeIsChildOf(child, parent) {
     var node = child.parentNode;
     while (node != null) {
         if (node == parent) {
             return true;
         }
         node = node.parentNode;
     }
     return false;
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/node.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/persist.js
/**
 * @fileOverview Storage helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Stores key-value data.
 * If local storage is already configured, retrieve what is stored and convert it to an array, otherwise create a blank array.
 * The value is then set in the array based on the key and the array is saved into local storage.
 * @todo desc and type for returns
 * @param {type} key The key for the data to be stored at
 * @param {type} value The data to be stored at the key.
 * @returns {persistSet} ??
 */
function persistSet(key, value) {
    if (localStorage) {
        var storage;
        if (localStorage.raptor) {
            storage = JSON.parse(localStorage.raptor);
        } else {
            storage = {};
        }
        storage[key] = value;
        localStorage.raptor = JSON.stringify(storage);
    }
}

/**
 * Gets the data stored at the supplied key.
 *
 * @param {type} key The key to get the stored data from.
 * @returns {Object} The data stored at the key.
 */
function persistGet(key) {
    if (localStorage) {
        var storage;
        if (localStorage.raptor) {
            storage = JSON.parse(localStorage.raptor);
        } else {
            storage = {};
        }
        return storage[key];
    }
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/persist.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/range.js
/**
 * @fileOverview Range manipulation helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Expands a range to to surround all of the content from its start container
 * to its end container.
 *
 * @param {RangyRange} range The range to expand.
 */
function rangeExpandToParent(range) {
    // <strict/>
    range.setStartBefore(range.startContainer);
    range.setEndAfter(range.endContainer);
}

/**
 * Ensure range selects entire element.
 *
 * @param  {RangyRange} range
 * @param  {Element} element
 */
function rangeSelectElement(range, element) {
    // <strict/>
    range.selectNode($(element)[0]);
}

function rangeSelectElementContent(range, element) {
    // <strict/>
    range.selectNodeContents($(element).get(0));
}

/**
 * Expand range to contain given elements.
 *
 * @param {RangyRange} range The range to expand.
 * @param {array} elements An array of elements to check the current range against.
 */
function rangeExpandTo(range, elements) {
    // <strict/>
    do {
        rangeExpandToParent(range);
        for (var i = 0, l = elements.length; i < l; i++) {
            if ($(range.commonAncestorContainer).is(elements[i])) {
                return;
            }
        }
    } while (range.commonAncestorContainer);
}

/**
 * Replaces the content of range with the given html or node.
 *
 * @param  {RangyRange} range The range to replace.
 * @param  {Node|String} html The html or node to replace the range content with.
 * @return {Node[]} Array of new nodes inserted.
 */
function rangeReplace(range, html) {
    // <strict/>

    var newNodes = [];
    range.deleteContents();
    if (html.nodeType) {
        // Node
        newNodes.push(html.cloneNode(true));
        range.insertNode(newNodes[0]);
    } else {
        // HTML string
        var wrapper = document.createElement('div');
        wrapper.innerHTML = html;
        for (var i = 0; i < wrapper.childNodes.length; i++) {
            var clone = wrapper.childNodes[i].cloneNode(true);
            range.insertNodeAtEnd(clone);
            newNodes.push(clone);
        }
    }
    return newNodes;
}

/**
 * Empties a supplied range of all the html tags.
 *
 * @param {RangyRange} range This is the range to remove tags from.
 * @returns {boolean} True if the range is empty.
 */
function rangeEmptyTag(range) {
    var html = rangeToHtml(range);
    if (typeof html === 'string') {
        html = html.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g,'\\$1');
    }
    return stringHtmlStringIsEmpty(html);
}

/**
 * @param  {RangyRange} range
 * @return {Node} The range's start element.
 */
function rangeGetStartElement(range) {
    // <strict/>
    return nodeFindParent(range.startContainer);
}

/**
 * @param  {RangyRange} range
 * @return {Node} The range's end element.
 */
function rangeGetEndElement(range) {
    // <strict/>
    return nodeFindParent(range.endContainer);
}

/**
 * Returns a single selected range's common ancestor.
 * Works for single ranges only.
 *
 * @param {RangyRange} range
 * @return {Element} The range's common ancestor.
 */
function rangeGetCommonAncestor(range) {
    // <strict/>
    return nodeFindParent(range.commonAncestorContainer);
}

/**
 * Returns true if the supplied range is empty (has a length of 0)
 *
 * @public @static
 * @param {RangyRange} range The range to check if it is empty
 */
function rangeIsEmpty(range) {
    // <strict/>
    return range.startOffset === range.endOffset &&
           range.startContainer === range.endContainer;
}

/**
 * @param  {RangyRange} range
 * @param  {Node} node
 * @return {boolean} True if the range is entirely contained by the given node.
 */
function rangeIsContainedBy(range, node) {
    // <strict/>
    var nodeRange = range.cloneRange();
    nodeRange.selectNodeContents(node);
    return nodeRange.containsRange(range);
}

/**
 * @param  {RangyRange} range
 * @param  {Node} node
 * @return {Boolean} True if node is contained within the range, false otherwise.
 */
function rangeContainsNode(range, node) {
    // <strict/>
    return range.containsNode(node);
}

/**
 * Tests whether the range contains all of the text (within text nodes) contained
 * within node. This is to provide an intuitive means of checking whether a range
 * "contains" a node if you consider the range as just in terms of the text it
 * contains without having to worry about niggly details about range boundaries.
 *
 * @param  {RangyRange} range
 * @param  {Node} node
 * @return {Boolean}
 */
function rangeContainsNodeText(range, node) {
    // <strict/>
    return range.containsNodeText(node);
}

/**
 * Removes the white space at the start and the end of the range.
 *
 * @param {RangyRange} range This is the range of selected text.
 */
function rangeTrim(range) {
    // <strict/>
    if (range.startContainer.data) {
        while (/\s/.test(range.startContainer.data.substr(range.startOffset, 1))) {
            range.setStart(range.startContainer, range.startOffset + 1);
        }
    }

    if (range.endContainer.data) {
        while (range.endOffset > 0 && /\s/.test(range.endContainer.data.substr(range.endOffset - 1, 1))) {
            range.setEnd(range.endContainer, range.endOffset - 1);
        }
    }
}

/**
 * Serializes supplied ranges.
 *
 * @param {RangyRange} ranges This is the set of ranges to be serialized.
 * @param {Node} rootNode
 * @returns {String} A string of the serialized ranges separated by '|'.
 */
function rangeSerialize(range, rootNode) {
    // <strict/>
    return rangy.serializeRange(range, true, rootNode);
}

/**
 * Deseralizes supplied ranges.
 *
 * @param {string} serialized This is the already serailized range to be deserialized.
 * @param {Node} rootNode
 * @returns {Array} An array of deserialized ranges.
 */
function rangeDeserialize(serialized, rootNode) {
    // <strict/>
    var serializedRanges = serialized.split("|"),
        ranges = [];
    for (var i = 0, l = serializedRanges.length; i < l; i++) {
        ranges[i] = rangy.deserializeRange(serializedRanges[i], rootNode);
    }
    return ranges;
}

/**
 * Split the selection container and insert the given html between the two elements created.
 *
 * @param  {RangyRange}
 * @param  {jQuery|Element|string} html The html to replace selection with.
 */
function rangeReplaceSplitInvalidTags(range, html, wrapper, validTagNames) {
    // <strict/>
    var commonAncestor = rangeGetCommonAncestor(range);

    if (!elementIsValid(commonAncestor, validTagNames)) {
        commonAncestor = elementFirstInvalidElementOfValidParent(commonAncestor, validTagNames, wrapper);
    }

    // Select from start of selected element to start of selection
    var startRange = rangy.createRange();
    startRange.setStartBefore(commonAncestor);
    startRange.setEnd(range.startContainer, range.startOffset);
    var startFragment = startRange.cloneContents();

    // Select from end of selected element to end of selection
    var endRange = rangy.createRange();
    endRange.setStart(range.endContainer, range.endOffset);
    endRange.setEndAfter(commonAncestor);
    var endFragment = endRange.cloneContents();

    // Replace the start element's html with the content that was not selected, append html & end element's html
    var replacement = elementOuterHtml($(fragmentToHtml(startFragment)));
    replacement += elementOuterHtml($(html).attr('data-replacement', true));
    replacement += elementOuterHtml($(fragmentToHtml(endFragment)));

    replacement = $(replacement);

    $(commonAncestor).replaceWith(replacement);
    replacement = replacement.parent().find('[data-replacement]').removeAttr('data-replacement');

    // Remove empty surrounding tags only if they're of the same type as the split element
    if (replacement.prev().is(commonAncestor.tagName.toLowerCase()) &&
        !replacement.prev().html().trim()) {
        replacement.prev().remove();
    }
    if (replacement.next().is(commonAncestor.tagName.toLowerCase()) &&
        !replacement.next().html().trim()) {
        replacement.next().remove();
    }
    return replacement;
}

/**
 * Replace the given range, splitting the parent elements such that the given html
 * is contained only by valid tags.
 *
 * @param  {RangyRange} range
 * @param  {string} html
 * @param  {Element} wrapper
 * @param  {string[]} validTagNames
 * @return {Element}
 */
function rangeReplaceWithinValidTags(range, html, wrapper, validTagNames) {
    var startElement = nodeFindParent(range.startContainer);
    var endElement = nodeFindParent(range.endContainer);
    var selectedElement = rangeGetCommonAncestor(range);

    var selectedElementValid = elementIsValid(selectedElement, validTagNames);
    var startElementValid = elementIsValid(startElement, validTagNames);
    var endElementValid = elementIsValid(endElement, validTagNames);

    // The html may be inserted within the selected element & selection start / end.
    if (selectedElementValid && startElementValid && endElementValid) {
        return rangeReplace(range, html);
    }

    // Context is invalid. Split containing element and insert list in between.
    return rangeReplaceSplitInvalidTags(range, html, wrapper, validTagNames);
}

function rangeToHtml(range) {
    return fragmentToHtml(range.cloneContents());
}

function rangeGet() {
    var selection = rangy.getSelection();
    if (selection.rangeCount > 0) {
        return selection.getRangeAt(0);
    }
    return null;
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/range.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/selection.js
/**
 * @fileOverview Selection manipulation helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * @type {Boolean|Object} current saved selection.
 */
var savedSelection = false;

/**
 * Save selection wrapper, preventing plugins / UI from accessing rangy directly.
 * @todo check desc and type for overwrite.
 * @param {Boolean} overwrite True if selection is able to be overwritten.
 */
function selectionSave(overwrite) {
    if (savedSelection && !overwrite) return;
    savedSelection = rangy.saveSelection();
}

/**
 * Restore selection wrapper, preventing plugins / UI from accessing rangy directly.
 */
function selectionRestore() {
    if (savedSelection) {
        rangy.restoreSelection(savedSelection);
        savedSelection = false;
    }
}

/**
 * Reset saved selection.
 */
function selectionDestroy() {
    if (savedSelection) {
        rangy.removeMarkers(savedSelection);
    }
    savedSelection = false;
}

/**
 * Returns whether the selection is saved.
 *
 * @returns {Boolean} True if there is a saved selection.
 */
function selectionSaved() {
    return savedSelection !== false;
}

/**
 * Iterates over all ranges in a selection and calls the callback for each
 * range. The selection/range offsets is updated in every iteration in in the
 * case that a range was changed or removed by a previous iteration.
 *
 * @public @static
 * @param {function} callback The function to call for each range. The first and only parameter will be the current range.
 * @param {RangySelection} [selection] A RangySelection, or by default, the current selection.
 * @param {object} [context] The context in which to call the callback.
 */
function selectionEachRange(callback, selection, context) {
    selection = selection || rangy.getSelection();
    var range, i = 0;
    // Create a new range set every time to update range offsets
    while (range = selection.getAllRanges()[i++]) {
        callback.call(context, range);
    }
}

/**
 * Replaces the current selection with the specified range.
 *
 * @param {RangySelection} mixed The specified range to replace the current range.
 */
function selectionSet(mixed) {
    rangy.getSelection().setSingleRange(mixed);
}

/**
 * Replaces the given selection (or the current selection if selection is not
 * supplied) with the given html or node.
 *
 * @public @static
 * @param  {Node|String} html The html or node to replace the selection with.
 * @param  {RangySelection|null} selection The selection to replace, or null to replace the current selection.
 * @return {Node[]} Array of new nodes inserted.
 */
function selectionReplace(html, selection) {
    var newNodes = [];
    selectionEachRange(function(range) {
        newNodes = newNodes.concat(rangeReplace(range, html));
    }, selection, this);
    return newNodes;
}

/**
 * Selects all the contents of the supplied element, excluding the element itself.
 *
 * @public @static
 * @param {jQuerySelector|jQuery|Element} element
 * @param {RangySelection} [selection] A RangySelection, or by default, the current selection.
 */
 /*
function selectionSelectInner(element, selection) {
    selection = selection || rangy.getSelection();
    selection.removeAllRanges();
    $(element).focus().contents().each(function() {
        var range = rangy.createRange();
        range.selectNodeContents(this);
        selection.addRange(range);
    });
}
*/
/**
 * Selects all the contents of the supplied node, excluding the node itself.
 *
 * @public @static
 * @param {Node} node
 * @param {RangySelection} [selection] A RangySelection, or by default, the current selection.
 */
function selectionSelectInner(node, selection) {
    // <strict/>
    selection = selection || rangy.getSelection();
    var range = rangy.createRange();
    range.selectNodeContents(node);
    selection.setSingleRange(range);
}

/**
 * Selects all the contents of the supplied node, including the node itself.
 *
 * @public @static
 * @param {Node} node
 * @param {RangySelection} [selection] A RangySelection, or null to use the current selection.
 */
function selectionSelectOuter(node, selection) {
    // <strict/>
    var range = rangy.createRange();
    range.selectNode(node);
    rangy.getSelection().setSingleRange(range);
}

/**
 * Move selection to the start or end of element.
 *
 * @param  {jQuerySelector|jQuery|Element} element The subject element.
 * @param  {RangySelection|null} selection A RangySelection, or null to use the current selection.
 * @param {Boolean} start True to select the start of the element.
 */
function selectionSelectEdge(element, selection, start) {
    selection = selection || rangy.getSelection();
    selection.removeAllRanges();

    $(element).each(function() {
        var range = rangy.createRange();
        range.selectNodeContents(this);
        range.collapse(start);
        selection.addRange(range);
    });
}

/**
 * Move selection to the end of element.
 *
 * @param  {jQuerySelector|jQuery|Element} element The subject element.
 * @param  {RangySelection|null} selection A RangySelection, or null to use the current selection.
 */
function selectionSelectEnd(element, selection) {
    selectionSelectEdge(element, selection, false);
}

/**
 * Move selection to the start of element.
 *
 * @param  {jQuerySelector|jQuery|Element} element The subject element.
 * @param  {RangySelection|null} selection A RangySelection, or null to use the current selection.
 */
function selectionSelectStart(element, selection) {
    selectionSelectEdge(element, selection, true);
}

/**
 * Extend selection to the end of element.
 *
 * @param  {Element} element
 * @param  {RangySelection|null} selection
 */
function selectionSelectToEndOfElement(element, selection) {
    // <strict/>
    selection = selection || rangy.getSelection();
    var range = selectionRange();
    selection.removeAllRanges();
    range.setEndAfter(element.get(0));
    selection.addRange(range);
}

/**
 * Gets the HTML from a selection. If no selection is supplied then current selection will be used.
 *
 * @param  {RangySelection|null} selection Selection to get html from or null to use current selection.
 * @return {string} The html content of the selection.
 */
function selectionGetHtml(selection) {
    selection = selection || rangy.getSelection();
    return selection.toHtml();
}

/**
 * Gets the closest common ancestor container to the given or current selection that isn't a text node.
 * @todo check please
 *
 * @param {RangySelection} range The selection to get the element from.
 * @returns {jQuery} The common ancestor container that isn't a text node.
 */
function selectionGetElement(range, selection) {
    selection = selection || rangy.getSelection();
    if (!selectionExists()) {
        return new jQuery;
    }
    var range = selectionRange(),
        commonAncestor;
    // Check if the common ancestor container is a text node
    if (range.commonAncestorContainer.nodeType === Node.TEXT_NODE) {
        // Use the parent instead
        commonAncestor = range.commonAncestorContainer.parentNode;
    } else {
        commonAncestor = range.commonAncestorContainer;
    }
    return $(commonAncestor);
}

/**
 * Gets all elements within and including the selection's common ancestor that contain a selection (excluding text nodes) and
 * returns them as a jQuery array.
 *
 * @public @static
 * @param {RangySelection|null} A RangySelection, or by default, the current selection.
 */
function selectionGetElements(selection) {
    var result = new jQuery();
    selectionEachRange(function(range) {
        result.push(selectionGetElement(range)[0]);
    }, selection, this);
    return result;
}

/**
 * Gets the start element of a selection.
 * @todo check the type of the return...i guessed and i have a feeling i might be wrong.
 * @returns {jQuery|Object} If the anchor node is a text node then the parent of the anchor node is returned, otherwise the anchor node is returned.
 */
function selectionGetStartElement() {
    var selection = rangy.getSelection();
    if (selection.anchorNode === null) {
        return null;
    }
    if (selection.isBackwards()) {
        return selection.focusNode.nodeType === Node.TEXT_NODE ? $(selection.focusNode.parentElement) : $(selection.focusNode);
    }
    if (!selection.anchorNode) console.trace();
    return selection.anchorNode.nodeType === Node.TEXT_NODE ? $(selection.anchorNode.parentElement) : $(selection.anchorNode);
}

/**
 * Gets the end element of the selection.
 * @returns {jQuery|Object} If the focus node is a text node then the parent of the focus node is returned, otherwise the focus node is returned.
 */
function selectionGetEndElement() {
    var selection = rangy.getSelection();
    if (selection.anchorNode === null) {
        return null;
    }
    if (selection.isBackwards()) {
        return selection.anchorNode.nodeType === Node.TEXT_NODE ? $(selection.anchorNode.parentElement) : $(selection.anchorNode);
    }
    return selection.focusNode.nodeType === Node.TEXT_NODE ? $(selection.focusNode.parentElement) : $(selection.focusNode);
}

/**
 * Checks to see if the selection is at the end of the element.
 *
 * @returns {Boolean} True if the node immediately after the selection ends does not exist or is empty,
 *                      false if the whole nodes' text is not selected or it doesn't fit the criteria for the true clause.
 */
function selectionAtEndOfElement() {
    var selection = rangy.getSelection();
    var focusNode = selection.isBackwards() ? selection.anchorNode : selection.focusNode;
    var focusOffset = selection.isBackwards() ? selection.focusOffset : selection.anchorOffset;
    if (focusOffset !== focusNode.textContent.length) {
        return false;
    }
    var previous = focusNode.nextSibling;
    if (!previous || $(previous).html() === '') {
        return true;
    } else {
        return false;
    }
}

/**
 * Checks to see if the selection is at the start of the element.
 *
 * @returns {Boolean} True if the node immediately before the selection starts does not exist or is empty,
 *                      false if the whole nodes' text is not selected or it doesn't fit the criteria for the true clause.
 */
function selectionAtStartOfElement() {
    var selection = rangy.getSelection();
    var anchorNode = selection.isBackwards() ? selection.focusNode : selection.anchorNode;
    if (selection.isBackwards() ? selection.focusOffset : selection.anchorOffset !== 0) {
        return false;
    }
    var previous = anchorNode.previousSibling;
    if (!previous || $(previous).html() === '') {
        return true;
    } else {
        return false;
    }
}

/**
 * Checks to see if the selection is empty.
 * @returns {Boolean} Returns true if the selection is empty.
 */
function selectionIsEmpty() {
    return rangy.getSelection().toHtml() === '';
}

/**
 * FIXME: this function needs reviewing.
 *
 * This should toggle an inline style, and normalise any overlapping tags, or adjacent (ignoring white space) tags.
 * @todo apparently this needs fixing and i'm not sure what it returns.
 * @public @static
 *
 * @param {String} tag This is the tag to be toggled.
 * @param {Array} options These are any additional properties to add to the element.
 * @returns {selectionToggleWrapper}
 */
function selectionToggleWrapper(tag, options) {
    options = options || {};
    var applier = rangy.createCssClassApplier(options.classes || '', {
        normalize: true,
        elementTagName: tag,
        elementProperties: options.attributes || {}
    });
    selectionEachRange(function(range) {
        if (rangeEmptyTag(range)) {
            var element = $('<' + tag + '/>')
                .addClass(options.classes)
                .attr(options.attributes || {})
                .append(fragmentToHtml(range.cloneContents()));
            rangeReplace(range, element[0]);
        } else {
            applier.toggleRange(range);
        }
    }, null, this);
}

/**
 * @todo method description and check types
 *
 * @param {String} tag The tag for the selection to be wrapped in.
 * @param {String} attributes The attributes to be added to the selection.
 * @param {String} classes The classes to be added to the selection
 */
function selectionWrapTagWithAttribute(tag, attributes, classes) {
    selectionEachRange(function(range) {
        var element = selectionGetElement(range);
        if (element.is(tag)) {
            element.attr(attributes);
        } else {
            selectionToggleWrapper(tag, {
                classes: classes,
                attributes: attributes
            });
        }
    }, null, this);
}

/**
 * Check if there is a current selection.
 *
 * @public @static
 * @returns {Boolean} Returns true if there is at least one range selected.
 */
function selectionExists() {
    return rangy.getSelection().rangeCount !== 0;
}

/**
 * Gets the first range in the current selection. In strict mode if no selection
 * exists an error occurs.
 *
 * @public @static
 * @returns {RangyRange} Returns true if there is at least one range selected.
 */
function selectionRange() {
    // <strict/>
    return rangy.getSelection().getRangeAt(0);
}

/**
 * Split the selection container and insert the given html between the two elements created.
 * @param  {jQuery|Element|string} html The html to replace selection with.
 * @param  {RangySelection|null} selection The selection to replace, or null for the current selection.
 * @returns {Object} The selection container with it's new content added.
 */
function selectionReplaceSplittingSelectedElement(html, selection) {
    selection = selection || rangy.getSelection();

    var selectionRange = selectionRange();
    var selectedElement = selectionGetElements()[0];

    // Select from start of selected element to start of selection
    var startRange = rangy.createRange();
    startRange.setStartBefore(selectedElement);
    startRange.setEnd(selectionRange.startContainer, selectionRange.startOffset);
    var startFragment = startRange.cloneContents();

    // Select from end of selected element to end of selection
    var endRange = rangy.createRange();
    endRange.setStart(selectionRange.endContainer, selectionRange.endOffset);
    endRange.setEndAfter(selectedElement);
    var endFragment = endRange.cloneContents();

    // Replace the start element's html with the content that was not selected, append html & end element's html
    var replacement = elementOuterHtml($(fragmentToHtml(startFragment)));
    replacement += elementOuterHtml($(html).attr('data-replacement', true));
    replacement += elementOuterHtml($(fragmentToHtml(endFragment)));

    replacement = $(replacement);

    $(selectedElement).replaceWith(replacement);
    return replacement.parent().find('[data-replacement]').removeAttr('data-replacement');
}

/**
 * Replace current selection with given html, ensuring that selection container is split at
 * the start & end of the selection in cases where the selection starts / ends within an invalid element.
 *
 * @param  {jQuery|Element|string} html The html to replace current selection with.
 * @param  {Array} validTagNames An array of tag names for tags that the given html may be inserted into without having the selection container split.
 * @param  {RangySeleciton|null} selection The selection to replace, or null for the current selection.
 * @returns {Object} The replaced selection if everything is valid or the selection container with it's new content added.
 */
function selectionReplaceWithinValidTags(html, validTagNames, selection) {
    selection = selection || rangy.getSelection();

    if (!selectionExists()) {
        return;
    }

    var startElement = selectionGetStartElement()[0];
    var endElement = selectionGetEndElement()[0];
    var selectedElement = selectionGetElements()[0];

    var selectedElementValid = elementIsValid(selectedElement, validTagNames);
    var startElementValid = elementIsValid(startElement, validTagNames);
    var endElementValid = elementIsValid(endElement, validTagNames);

    // The html may be inserted within the selected element & selection start / end.
    if (selectedElementValid && startElementValid && endElementValid) {
        return selectionReplace(html);
    }

    // Context is invalid. Split containing element and insert list in between.
    return selectionReplaceSplittingSelectedElement(html, selection);
}

/**
 * Toggles style(s) on the first block level parent element of each range in a selection
 *
 * @public @static
 * @param {Object} styles styles to apply
 * @param {jQuerySelector|jQuery|Element} limit The parent limit element.
 * If there is no block level elements before the limit, then the limit content
 * element will be wrapped with a "div"
 */
function selectionToggleBlockStyle(styles, limit) {
    selectionEachRange(function(range) {
        var parent = $(range.commonAncestorContainer);
        while (parent.length && parent[0] !== limit[0] && (
                parent[0].nodeType === Node.TEXT_NODE || parent.css('display') === 'inline')) {
            parent = parent.parent();
        }
        if (parent[0] === limit[0]) {
            // Only apply block style if the limit element is a block
            if (limit.css('display') !== 'inline') {
                // Wrap the HTML inside the limit element
                elementWrapInner(limit, 'div');
                // Set the parent to the wrapper
                parent = limit.children().first();
            }
        }
        // Apply the style to the parent
        elementToggleStyle(parent, styles);
    }, null, this);
}

/**
 * Iterates throught each block in the selection and calls the callback function.
 *
 * @todo revise blockContainer parameter!
 * @param {function} callback The function to be called on each block in the selection.
 * @param {jQuery} limitElement The element to stop searching for block elements at.
 * @param {undefined|Sring} blockContainer Thia parameter is unused for some reason.
 */
function selectionEachBlock(callback, limitElement, blockContainer) {
    // <strict/>
    selectionEachRange(function(range) {
        // Loop range parents until a block element is found, or the limit element is reached
        var startBlock = elementClosestBlock($(range.startContainer), limitElement),
            endBlock = elementClosestBlock($(range.endContainer), limitElement),
            blocks;
        if (!startBlock || !endBlock) {
            // Wrap the HTML inside the limit element
            callback(elementWrapInner(limitElement, blockContainer).get(0));
        } else {
            if (startBlock.is(endBlock)) {
                blocks = startBlock;
            } else if (startBlock && endBlock) {
                blocks = startBlock.nextUntil(endBlock).andSelf().add(endBlock);
            }
            for (var i = 0, l = blocks.length; i < l; i++) {
                callback(blocks[i]);
            }
        }
    });
}

/**
 * Add or removes a set of classes to the closest block elements in a selection.
 * If the `limitElement` is closer than a block element, then a new
 * `blockContainer` element wrapped around the selection.
 *
 * If any block in the selected text has not got the class applied to it, then
 * the class will be applied to all blocks.
 *
 * @todo revise blockContainer parameter!
 * @param {string[]} addClasses This is a set of classes to be added.
 * @param {string[]} removeClasses This is a set of classes to be removed.
 * @param {jQuery} limitElement The element to stop searching for block elements at.
 * @param {undefined|String} blockContainer Thia parameter is unused for some reason.
 */
function selectionToggleBlockClasses(addClasses, removeClasses, limitElement, blockContainer) {
    // <strict/>

    var apply = false,
        blocks = new jQuery();

    selectionEachBlock(function(block) {
        blocks.push(block);
        if (!apply) {
            for (var i = 0, l = addClasses.length; i < l; i++) {
                if (!$(block).hasClass(addClasses[i])) {
                    apply = true;
                }
            }
        }
    }, limitElement, blockContainer);

    $(blocks).removeClass(removeClasses.join(' '));
    if (apply) {
        $(blocks).addClass(addClasses.join(' '));
    } else {
        $(blocks).removeClass(addClasses.join(' '));
    }
}

/**
 * Removes all ranges from a selection that are not contained within the
 * supplied element.
 *
 * @public @static
 * @param {jQuerySelector|jQuery|Element} element The element to exclude the removal of ranges.
 * @param {RangySelection} [selection] The selection from which to remove the ranges.
 */
function selectionConstrain(node, selection) {
    // <strict/>
    selection = selection || rangy.getSelection();
    var ranges = selection.getAllRanges(),
        newRanges = [];
    for (var i = 0, l = ranges.length; i < l; i++) {
        var newRange = ranges[i].cloneRange();
        if (ranges[i].startContainer !== node &&
                !nodeIsChildOf(ranges[i].startContainer, node)) {
            newRange.setStart(node, 0);
        }
        if (ranges[i].endContainer !== node &&
                !nodeIsChildOf(ranges[i].endContainer, node)) {
            newRange.setEnd(node, node.childNodes.length);
        }
        newRanges.push(newRange);
    }
    selection.setRanges(newRanges);
}

/**
 * Clears the formatting on a supplied selection.
 *
 * @param {Node} limitNode The containing element.
 * @param {RangySelection} [selection] The selection to have it's formatting cleared.
 */
function selectionClearFormatting(limitNode, selection) {
    // <strict/>

    limitNode = limitNode || document.body;
    selection = selection || rangy.getSelection();
    if (selectionExists()) {
        // Create a copy of the selection range to work with
        var range = selectionRange().cloneRange();

        // Get the selected content
        var content = range.extractContents();

        // Expand the range to the parent if there is no selected content
        // and the range's ancestor is not the limitNode
        if (fragmentToHtml(content) === '') {
            rangeSelectElementContent(range, range.commonAncestorContainer);
            selection.setSingleRange(range);
            content = range.extractContents();
        }

        content = $('<div/>').append(fragmentToHtml(content)).html().replace(/(<\/?.*?>)/gi, function(match) {
            if (match.match(/^<(img|object|param|embed|iframe)/) !== null) {
                return match;
            }
            return '';
        });

        // Get the containing element
        var parent = range.commonAncestorContainer;
        while (parent && parent.parentNode !== limitNode) {
            parent = parent.parentNode;
        }

        if (parent) {
            // Place the end of the range after the paragraph
            range.setEndAfter(parent);

            // Extract the contents of the paragraph after the caret into a fragment
            var contentAfterRangeStart = range.extractContents();

            // Collapse the range immediately after the paragraph
            range.collapseAfter(parent);

            // Insert the content
            range.insertNode(contentAfterRangeStart);

            // Move the caret to the insertion point
            range.collapseAfter(parent);
        }
        content = $.parseHTML(content);
        if (content !== null) {
            $(content.reverse()).each(function() {
                if ($(this).is('img')) {
                    range.insertNode($(this).removeAttr('width height class style').get(0));
                    return;
                }
                range.insertNode(this);
            });
        }
    }
}

/**
 * Replaces specified tags and classes on a selection.
 *
 * @todo check descriptions and types please
 * @param {String} tag1 This is the tag to appear on the selection at the end of the method.
 * @param {jQuery} class1 This is the class to appear on the selection at the end of the method.
 * @param {String} tag2 This is the current tag on the selection, which is to be replaced.
 * @param {jQuery} class2 This is the current class on the selection, which is to be replaced.
 */
function selectionInverseWrapWithTagClass(tag1, class1, tag2, class2) {
    selectionSave();
    // Assign a temporary tag name (to fool rangy)
    var id = 'domTools' + Math.ceil(Math.random() * 10000000);

    selectionEachRange(function(range) {
        var applier2 = rangy.createCssClassApplier(class2, {
            elementTagName: tag2
        });

        // Check if tag 2 is applied to range
        if (applier2.isAppliedToRange(range)) {
            // Remove tag 2 to range
            applier2.toggleSelection();
        } else {
            // Apply tag 1 to range
            rangy.createCssClassApplier(class1, {
                elementTagName: id
            }).toggleSelection();
        }
    }, null, this);

    // Replace the temporary tag with the correct tag
    $(id).each(function() {
        $(this).replaceWith($('<' + tag1 + '/>').addClass(class1).html($(this).html()));
    });

    selectionRestore();
}

/**
 * Expands the user selection to encase a whole word.
 */
function selectionExpandToWord() {
    var selection = window.getSelection(),
        range = selection.getRangeAt(0);
    if (!range ||
            range.startContainer !== range.endContainer ||
            range.startOffset !== range.endOffset) {
        return;
    }
    var start = range.startOffset,
        end = range.startOffset;
    while (range.startContainer.data[start - 1] &&
            !range.startContainer.data[start - 1].match(/\s/)) {
        start--;
    }
    while (range.startContainer.data[end] &&
            !range.startContainer.data[end].match(/\s/)) {
        end++;
    }
    range.setStart(range.startContainer, start);
    range.setEnd(range.startContainer, end);
    selection.removeAllRanges();
    selection.addRange(range);
}

/**
 * Expands the user selection to contain the supplied selector, stopping at the specified limit element.
 *
 * @param {jQuerySelector} selector The selector to expand the selection to.
 * @param {jQuerySelector} limit The element to stop at.
 * @param {boolean} outer If true, then the outer most matched element (by the
 *   selector) is wrapped. Otherwise the first matched element is wrapped.
 */
function selectionExpandTo(selector, limit, outer) {
    var ranges = rangy.getSelection().getAllRanges();
    for (var i = 0, l = ranges.length; i < l; i++) {
        // Start container
        var element = $(nodeFindParent(ranges[i].startContainer));
        if (outer || (!element.is(selector) && !element.is(limit))) {
            element = element.parentsUntil(limit, selector);
        }
        if (outer) {
            element = element.last();
        } else {
            element = element.first();
        }
        if (element.length === 1 && !element.is(limit)) {
            ranges[i].setStart(element[0], 0);
        }

        // End container
        element = $(nodeFindParent(ranges[i].endContainer));
        if (outer || (!element.is(selector) && !element.is(limit))) {
            element = element.parentsUntil(limit, selector);
        }
        if (outer) {
            element = element.last();
        } else {
            element = element.first();
        }
        if (element.length === 1 && !element.is(limit)) {
            ranges[i].setEnd(element[0], element[0].childNodes.length);
        }
    }
    rangy.getSelection().setRanges(ranges);
}

/**
 * Trims an entire selection as per rangeTrim.
 *
 * @see rangeTrim
 */
function selectionTrim() {
    if (selectionExists()) {
        var range = selectionRange();
        rangeTrim(range);
        selectionSet(range);
    }
}

/**
 * Finds the inner elements and the wrapping tags for a selector.
 *
 * @param {string} selector A jQuery selector to match the wrapping/inner element against.
 * @param {jQuery} limitElement The element to stop searching at.
 * @returns {jQuery}
 */
function selectionFindWrappingAndInnerElements(selector, limitElement) {
    var result = new jQuery();
    selectionEachRange(function(range) {
        var startNode = range.startContainer;
        while (startNode.nodeType === Node.TEXT_NODE) {
            startNode = startNode.parentNode;
        }

        var endNode = range.endContainer;
        while (endNode.nodeType === Node.TEXT_NODE) {
            endNode = endNode.parentNode;
        }

        var filter = function() {
            if (!limitElement.is(this)) {
                result.push(this);
            }
        };

        do {
            $(startNode).filter(selector).each(filter);

            if (!limitElement.is(startNode) && result.length === 0) {
                $(startNode).parentsUntil(limitElement, selector).each(filter);
            }

            $(startNode).find(selector).each(filter);

            if ($(endNode).is(startNode)) {
                break;
            }

            startNode = $(startNode).next();
        } while (startNode.length > 0 && $(startNode).prevAll().has(endNode).length === 0);
    });
    return result;
}

/**
 * Changes the tags on a selection.
 *
 * @param {String} changeTo The tag to be changed to.
 * @param {String} changeFrom The tag to be changed from.
 * @param {jQuery} limitElement The element to stop changing the tags at.
 */
function selectionChangeTags(changeTo, changeFrom, limitElement) {
    var elements = selectionFindWrappingAndInnerElements(changeFrom.join(','), limitElement);
    if (elements.length) {
        selectionSave();
        elementChangeTag(elements, changeTo);
        selectionRestore();
    } else {
        var limitNode = limitElement.get(0);
        if (limitNode.innerHTML.trim()) {
            selectionSave();
            limitNode.innerHTML = '<' + changeTo + '>' + limitNode.innerHTML + '</' + changeTo + '>';
            selectionRestore();
        } else {
            limitNode.innerHTML = '<' + changeTo + '>&nbsp;</' + changeTo + '>';
            selectionSelectInner(limitNode.childNodes[0]);
        }
    }
}

/**
 * Checks that the selecton only contains valid children.
 *
 * @param {String} selector A string containing a selector expression to match the current set of elements against.
 * @param {jQuery} limit The element to stop changing the tags at.
 * @returns {Boolean} True if the selection contains valid children.
 */
function selectionContains(selector, limit) {
    var result = true;
    selectionEachRange(function(range) {
        // Check if selection only contains valid children
        var children = $(range.commonAncestorContainer).find('*');
        if ($(range.commonAncestorContainer).parentsUntil(limit, selector).length === 0 &&
                (children.length === 0 || children.length !== children.filter(selector).length)) {
            result = false;
        }
    });
    return result;
}

function selectionDelete(selection) {
    selection = selection || rangy.getSelection();
    selection.deleteFromDocument();
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/selection.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/state.js
/**
 * @fileOverview Save state helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Saves the state of an element.
 * @param {jQuery} element The element to have its current state saved.
 * @returns {Object} The saved state of the element.
 */
function stateSave(element) {
    // <strict/>

    var range = rangeGet();
    return {
        element: element.clone(true),
        ranges: range ? rangeSerialize(range, element.get(0)) : null
    };
}

/**
 * Restores an element from its saved state.
 *
 * @param {jQuery} element The element to have its state restored.
 * @param {jQuery} state The state to restore the element to.
 * @returns {Object} The restored element.
 */
function stateRestore(element, state) {
    // <strict/>

    element.replaceWith(state.element);
    var ranges = null;
    try {
        if (state.ranges) {
            ranges = rangeDeserialize(state.ranges, state.element.get(0));
        }
    } catch (exception) {
        // <debug/>
    }
    return {
        element: state.element,
        ranges: ranges
    };
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/state.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/string.js
/**
 * @fileOverview String helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Modification of strip_tags from PHP JS - http://phpjs.org/functions/strip_tags:535.
 * @param  {string} content HTML containing tags to be stripped
 * @param {Array} allowedTags Array of tags that should not be stripped
 * @return {string} HTML with all tags not present allowedTags array.
 */
function stringStripTags(content, allowedTags) {
    // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
    allowed = [];
    for (var allowedTagsIndex = 0; allowedTagsIndex < allowedTags.length; allowedTagsIndex++) {
        if (allowedTags[allowedTagsIndex].match(/[a-z][a-z0-9]{0,}/g)) {
            allowed.push(allowedTags[allowedTagsIndex]);
        }
    }
    // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*\/?>/gi,
        commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

    return content.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
        return allowed.indexOf($1.toLowerCase()) > -1 ? $0 : '';
    });
}

/**
 * Checks if an html string is empty.
 *
 * @param {Element} element The element to be checked.
 * @returns {Element}
 */
function stringHtmlStringIsEmpty(html) {
    // <strict/>
    return $($.parseHTML(html)).is(':empty');
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/string.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/style.js
/**
 * @fileOverview Style helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * @todo desc all
 * @param {jQuerySelector|jQuery|Element} element This is the element to have its styles swapped.
 * @param {array} newState The new state to be applied to the element.
 * @returns {array}
 */
function styleSwapState(element, newState) {
    var node = element.get(0),
        previousState = {};
    // Double loop because jQuery will automatically assign other style properties like 'margin-left' when setting 'margin'
    for (var key in newState) {
        previousState[key] = node.style[key];
    }
    for (key in newState) {
        element.css(key, newState[key]);
    }
    return previousState;
}

/**
 * @todo type for wrapper and inner and descriptions
 * @param {type} wrapper
 * @param {type} inner
 * @param {array} newState
 * @returns {unresolved}
 */
function styleSwapWithWrapper(wrapper, inner, newState) {
    var innerNode = inner.get(0),
        previousState = {};
    // Double loop because jQuery will automatically assign other style properties like 'margin-left' when setting 'margin'
    for (var key in newState) {
        previousState[key] = innerNode.style[key];
    }
    for (key in newState) {
        wrapper.css(key, inner.css(key));
        inner.css(key, newState[key]);
    }
    return previousState;
}

/**
 * @todo all
 * @param {jQuery} element
 * @param {array} state
 * @returns {undefined}
 */
function styleRestoreState(element, state) {
    for (var key in state) {
        element.css(key, state[key] || '');
    }
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/style.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/table.js
/**
 * @fileOverview Table helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen - david@panmedia.co.nz
 */

/**
 * Create and return a new table element with the supplied number of rows/columns.
 *
 * @public @static
 * @param {int} columns The number of columns to add to the table.
 * @param {int} rows The number of rows to add to the table.
 * @param [options] Extra options to apply.
 * @param [options.placeHolder=""] Place holder HTML to insert into each created cell.
 * @returns {HTMLTableElement}
 */
function tableCreate(columns, rows, options) {
    options = options || {};
    var table = document.createElement('table');
    while (rows--) {
        var row = table.insertRow(0);
        for (var i = 0; i < columns; i++) {
            var cell = row.insertCell(0);
            if (options.placeHolder) {
                cell.innerHTML = options.placeHolder;
            }
        }
    }
    return table;
}

/**
 * Adds a column to a table.
 *
 * @param {HTMLTableElement} table
 * @param {int[]} index Position to insert the column at, starting at 0.
 * @param [options] Extra options to apply.
 * @param [options.placeHolder=""] Place holder HTML to insert into each created cell.
 * @returns {HTMLTableCellElement[]} An array of cells added to the table.
 */
function tableInsertColumn(table, index, options) {
    return resizeTable(table, 0, 0, 1, index, options || {});
}
/**
 * Removes a column from a table.
 *
 * @param {HTMLTableElement} table
 * @param {int} index Position to remove the column at, starting at 0.
 */
function tableDeleteColumn(table, index) {
    resizeTable(table, 0, 0, -1, index);
}

/**
 * Adds a row to a table, and append as many cells as the longest row in the table.
 *
 * @param {HTMLTableElement} table
 * @param {int[]} index Position to insert the row at, starting at 0.
 * @param [options] Extra options to apply.
 * @param [options.placeHolder=""] Place holder HTML to insert into each created cell.
 * @returns {HTMLTableCellElement[]} An array of cells added to the table.
 */
function tableInsertRow(table, index, options) {
    var googTable = new GoogTable(table);
    return googTable.insertRow(index, options);
}

/**
 * Removes a row from a table.
 *
 * @param {HTMLTableElement} table The table to remove the row from.
 * @param {int} index Position to remove the row at, starting at 0.
 */
function tableDeleteRow(table, index) {
    resizeTable(table, -1, index, 0, 0);
}

/**
 * Return the x/y position of a table cell, taking into consideration the column/row span.
 *
 * @param {HTMLTableCellElement} cell The table cell to get the index for.
 * @returns {tableGetCellIndex.Anonym$0}
 */
function tableGetCellIndex(cell) {
    var x, y, tx, ty,
        matrix = [],
        rows = cell.parentNode.parentNode.parentNode.tBodies[0].rows;
    for (var r = 0; r < rows.length; r++) {
        y = rows[r].sectionRowIndex;
        y = r;
        for (var c = 0; c < rows[r].cells.length; c++) {
            x = c;
            while (matrix[y] && matrix[y][x]) {
                // Skip already occupied cells in current row
                x++;
            }
            for (tx = x; tx < x + (rows[r].cells[c].colSpan || 1); ++tx) {
                // Mark matrix elements occupied by current cell with true
                for (ty = y; ty < y + (rows[r].cells[c].rowSpan || 1); ++ty) {
                    if (!matrix[ty]) {
                        // Fill missing rows
                        matrix[ty] = [];
                    }
                    matrix[ty][tx] = true;
                }
            }
            if (cell === rows[r].cells[c]) {
                return {
                    x: x,
                    y: y
                };
            }
        }
    }
}

/**
 * Gets a table cell by a given index.
 *
 * @param {HTMLTableElement} table This is the table to get the cell from.
 * @param {int} index This is the index to find the cell.
 * @returns {HTMLTableCellElement|null} The cell at the specified index.
 */
function tableGetCellByIndex(table, index) {
    var rows = table.tBodies[0].rows;
    for (var r = 0; r < rows.length; r++) {
        for (var c = 0; c < rows[r].cells.length; c++) {
            var currentIndex = tableGetCellIndex(rows[r].cells[c]);
            if (currentIndex.x === index.x &&
                    currentIndex.y === index.y) {
                return rows[r].cells[c];
            }
        }
    }
    return null;
}

/**
 * Returns an array of cells found within the supplied indexes.
 *
 * @param {HTMLTableElement} table
 * @param {int} startIndex This is the index to start searching at.
 * @param {int} endIndex This is the index to stop searching at.
 * @returns {Array} An array of the cells in the range supplied.
 */
function tableCellsInRange(table, startIndex, endIndex) {
    var startX = Math.min(startIndex.x, endIndex.x),
        x = startX,
        y = Math.min(startIndex.y, endIndex.y),
        endX = Math.max(startIndex.x, endIndex.x),
        endY = Math.max(startIndex.y, endIndex.y),
        cells = [];
    while (y <= endY) {
        while (x <= endX) {
            var cell = tableGetCellByIndex(table, {
                x: x,
                y: y
            });
            if (cell !== null) {
                cells.push(cell);
            }
            x++;
        }
        x = startX;
        y++;
    }
    return cells;
}

/**
 * Checks if the cells selected can be merged.
 *
 * @param {HTMLTableElement} table The table to check the selection with.
 * @param {int} startX Selection's start x position.
 * @param {int} startY Selection's start y position.
 * @param {int} endX Selection's end x position.
 * @param {int} endY Selection's end y position.
 */
function tableCanMergeCells(table, startX, startY, endX, endY) {
}

/**
 * Merges the selected cells of a table.
 *
 * @param {HTMLTableElement} table This is the table that is going to have cells merged.
 * @param {int} startX This is the X coordinate to start merging the cells at.
 * @param {int} startY This is the Y coordinate to start merging the cells at.
 * @param {int} endX This is the X coordinate to stop merging the cells at.
 * @param {int} endY This is the Y coordinate to stop merging the cells at.
 */
function tableMergeCells(table, startX, startY, endX, endY) {
    var googTable = new GoogTable(table);
    googTable.mergeCells(startX, startY, endX, endY);
}

/**
 * Checks if the cell at the given index can be split.
 *
 * @param {HTMLTableElement} table Table to check the seleciton with.
 * @param {int} x The X coordinate of the cell to be checked.
 * @param {int} y Ths Y coordinate of the cell to be checked.
 */
function tableCanSplitCells(table, x, y) {
}

/**
 * Splits the selected cell of a table.
 *
 * @param {HTMLTableElement} table The table to find the cell to be split on.
 * @param {int} x The X coordinate of the cell to be split.
 * @param {int} y The Y coordinate of the cell to be split.
 */
function tableSplitCells(table, x, y) {
    var googTable = new GoogTable(table);
    googTable.splitCell(x, y);
}


function tableIsEmpty(table) {
    for (var i = 0, l = table.rows.length; i < l; i++) {
        if (table.rows[i].cells.length > 0) {
            return false;
        }
    }
    return true;
};
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/table.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/template.js
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/template.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/types.js
/**
 * @fileOverview Type checking functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author Michael Robinson michael@panmedia.co.nz
 * @author David Neilsen david@panmedia.co.nz
 */

/**
 * Determines whether object is a rangy range.
 *
 * @param {mixed} object The object to be tested.
 * @returns {Boolean} True if the object is a rangy range.
 */
function typeIsRange(object) {
    return object instanceof rangy.WrappedRange;
}

/**
 * Determines whether object is a rangy selection.
 *
 * @param {mixed} object The object to be tested.
 * @returns {Boolean} True if the object is a rangy selection.
 */
function typeIsSelection(object) {
    return object instanceof rangy.WrappedSelection;
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/tools/types.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/adapters/jquery-ui.js
/**
 * @fileOverview jQuery UI helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

/**
 * Wrap the jQuery UI button function.
 *
 * @param {Element|Node|selector} element
 * @param {Object|null} options The options relating to the creation of the button.
 * @returns {Element} The modified element.
 */
function aButton(element, options) {
    // <strict/>

    return $(element).button(options);
}

/**
 * Wrap the jQuery UI button's set label function.
 *
 * @param {Element|Node|selector} element
 * @param {String} text The text for the label.
 * @returns {Element} The labelled button.
 */
function aButtonSetLabel(element, text) {
    // <strict/>

    $(element).button('option', 'text', true);
    return $(element).button('option', 'label', text);
}

/**
 * Wrap the jQuery UI button's set icon function.
 *
 * @param {Element|Node|selector} element
 * @param {String} icon The icon name to be added to the button, e.g. 'ui-icon-disk'
 * @returns {Element} The modified button.
 */
function aButtonSetIcon(element, icon) {
    // <strict/>

    return $(element).button('option', 'icons', {
        primary: icon
    });
}

/**
 * Wrap the jQuery UI button's enable function.
 *
 * @param {Element|Node|selector} element
 * @returns {Element} The enabled button.
 */
function aButtonEnable(element) {
    // <strict/>

    return $(element).button('option', 'disabled', false);
}

function aButtonIsEnabled(element) {
    return !$(element).is('.ui-state-disabled');
}

/**
 * Wrap the jQuery UI button's disable function.
 *
 * @param {Element|Node|selector} element
 * @returns {Element} The disabled button.
 */
function aButtonDisable(element) {
    // <strict/>

    return $(element).button('option', 'disabled', true);
}

/**
 * Wrap the jQuery UI button's add class function.
 *
 * @param {Element|Node|selector} element
 * @returns {Element} The highlighted button.
 */
function aButtonActive(element) {
    // <strict/>

    return $(element).addClass('ui-state-highlight');
}

/**
 * Wrap the jQuery UI button's remove class function.
 *
 * @param {Element|Node|selector} element
 * @returns {Element} The button back in its normal state.
 */
function aButtonInactive(element) {
    // <strict/>

    return $(element).removeClass('ui-state-highlight');
}

/**
 * Wrap the jQuery UI button's initialise menu function.
 *
 * @param {Element|Node|selector} element
 * @param {Object|null} options The set of options for menu creation.
 * @returns {Element} The menu.
 */
function aMenu(element, options) {
    // <strict/>

    return $(element).menu(options);
}

/**
 * Initialises a dialog with the given element.
 *
 * @param {Element|Node|selector} element
 * @param {Object|null} options The set of options for the menu.
 * @returns {Element} A dialog.
 */
function aDialog(element, options) {
    // <strict/>

    options.dialogClass = typeof options.dialogClass !== 'undefined' ? options.dialogClass + ' ui-dialog-fixed' : 'ui-dialog-fixed';
    var dialog = $(element).dialog(options);
    dialog.parent().css({
        top: (parseInt(dialog.parent().css('top')) || 0) - $(window).scrollTop()
    });
    dialog.dialog("option", "position", 'center');
    return dialog;
}

/**
 * Wrap the jQuery UI open dialog function.
 *
 * @param {Element|Node|selector} element
 * @returns {Element}
 */
function aDialogOpen(element) {
    // <strict/>

    return $(element).dialog('open');
}

/**
 * Wrap the jQuery UI close dialog function.
 *
 * @param {Element|Node|selector} element
 * @returns {Element}
 */
function aDialogClose(element) {
    // <strict/>

    return $(element).dialog('close');
}

function aDialogRemove(element) {
    // <strict/>

    return $(element).dialog('destroy').remove();
}

/**
 * Wrap the jQuery UI tabs function.
 *
 * @param  {Element|Node|selector} element
 * @param  {Object|null} options
 * @returns {Element}
 */
function aTabs(element, options) {
    // <strict/>

    return $(element).tabs(options);
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/adapters/jquery-ui.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/adapters/pnotify.js
function aNotify(options) {
    if (options.type == 'success') {
        options.state = 'confirmation'
    }
    $.pnotify($.extend({
        type: 'success',
        styling: 'jqueryui',
        history: false
    }, options));
}
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-common/adapters/pnotify.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/init.js
var $ = jQuery;

$(function() {
    // Initialise rangy
    if (!rangy.initialized) {
        rangy.init();
    }

    // Add helper method to rangy
    if (!$.isFunction(rangy.rangePrototype.insertNodeAtEnd)) {
        rangy.rangePrototype.insertNodeAtEnd = function(node) {
            var range = this.cloneRange();
            range.collapse(false);
            range.insertNode(node);
            range.detach();
            this.setEndAfter(node);
        };
    }
});

// Select menu close event (triggered when clicked off)
$('html').click(function(event) {
    $('.ui-editor-selectmenu-visible')
        .removeClass('ui-editor-selectmenu-visible');
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/init.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/support.js
var supported, ios, hotkeys, firefox, ie;

function isSupported() {
    if (supported === undefined) {
        supported = true;

        // <ios>
        ios = /(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent);
        if (ios) {
            $('html').addClass('raptor-ios');

            // Fixed position hack
            if (ios) {
                $(document).on('scroll', function(){
                    setInterval(function() {
                        $('body').css('height', '+=1').css('height', '-=1');
                    }, 0);
                });
            }
        }
        // </ios>

        firefox = /Firefox/i.test(navigator.userAgent);
        if (firefox) {
            $('html').addClass('raptor-ff');
        }

        // <ie>
        /**
         * Returns the version of Internet Explorer or a -1 (indicating the use of another browser).
         * http://obvcode.blogspot.co.nz/2007/11/easiest-way-to-check-ie-version-with.html
         */
        var ieVersion = (function() {
            var version = -1;
            if (navigator.appVersion.indexOf("MSIE") != -1) {
                version = parseFloat(navigator.appVersion.split("MSIE")[1]);
            }
            return version;
        })();

        ie = ieVersion !== -1;
        if (ie && ieVersion < 9) {
            supported = false;

            // Create message modal
            $(function() {
                var message = $('<div/>')
                    .addClass('raptor-unsupported')
                    .html(
                        '<div class="raptor-unsupported-overlay"></div>' +
                        '<div class="raptor-unsupported-content">' +
                        '    It has been detected that you a using a browser that is not supported by Raptor, please' +
                        '    use one of the following browsers:' +
                        '    <ul>' +
                        '        <li><a href="http://www.google.com/chrome">Google Chrome</a></li>' +
                        '        <li><a href="http://www.firefox.com">Mozilla Firefox</a></li>' +
                        '        <li><a href="http://windows.microsoft.com/ie">Internet Explorer</a></li>' +
                        '    </ul>' +
                        '    <div class="raptor-unsupported-input">' +
                        '        <button class="raptor-unsupported-close">Close</button>' +
                        '        <input name="raptor-unsupported-show" type="checkbox" />' +
                        '        <label>Don\'t show this message again</label>' +
                        '    </div>' +
                        '<div>'
                    )
                    .appendTo('body');

                /**
                 * Sets the z-index CSS property on an element to 1 above all its sibling elements.
                 *
                 * @param {jQuery} element The jQuery element to have it's z index increased.
                 */
                var elementBringToTop = function(element) {
                    var zIndex = 1;
                    element.siblings().each(function() {
                        var z = $(this).css('z-index');
                        if (!isNaN(z) && z > zIndex) {
                            zIndex = z + 1;
                        }
                    });
                    element.css('z-index', zIndex);
                }
                elementBringToTop(message);

                // Close event
                message.find('.raptor-unsupported-close').click(function() {
                    message.remove();
                });
            });
        }
        // </ie>

        hotkeys = jQuery.hotkeys !== undefined;
    }
    return supported;
}

// <ie>

/**
 * Object.create polyfill
 * https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create
 */
if (!Object.create) {
    Object.create = function (o) {
        if (arguments.length > 1) {
            throw new Error('Object.create implementation only accepts the first parameter.');
        }
        function F() {}
        F.prototype = o;
        return new F();
    };
}

/**
 * Node.TEXT_NODE polyfill
 */
if (typeof Node === 'undefined') {
    Node = {
        TEXT_NODE: 3
    };
}

/**
 * String.trim polyfill
 * https://gist.github.com/eliperelman/1035982
 */
''.trim || (String.prototype.trim = // Use the native method if available, otherwise define a polyfill:
    function () { // trim returns a new string (which replace supports)
        return this.replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g,'') // trim the left and right sides of the string
    });

// </ie>

// <strict/>;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/support.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/raptor.js
/**
 * @class Raptor
 */
var Raptor =  {

    globalDefaults: {},
    defaults: {},

    /** @property {boolean} enableHotkeys True to enable hotkeys */
    enableHotkeys: true,

    /** @property {Object} hotkeys Custom hotkeys */
    hotkeys: {},

    /**
     * Plugins added via Raptor.registerPlugin
     * @property {Object} plugins
     */
    plugins: {},

    /**
     * UI added via Raptor.registerUi
     * @property {Object} ui
     */
    ui: {},

    /**
     * Layouts added via Raptor.registerLayout
     * @property {Object} layouts
     */
    layouts: {},

    /**
     * Presets added via Raptor.registerPreset
     * @property {Object} presets
     */
    presets: {},

    hoverPanels: {},

    /**
     * @property {Raptor[]} instances
     */
    instances: [],

    /**
     * @returns {Raptor[]}
     */
    getInstances: function() {
        return this.instances;
    },

    eachInstance: function(callback) {
        for (var i = 0; i < this.instances.length; i++) {
            callback.call(this.instances[i], this.instances[i]);
        }
    },

    /*========================================================================*\
     * Templates
    \*========================================================================*/
    /**
     * @property {String} urlPrefix
     */
    urlPrefix: '/raptor/',

    /**
     * @param {String} name
     * @returns {String}
     */
    getTemplate: function(name, urlPrefix) {
        var template;
        if (!this.templates[name]) {
            // Parse the URL
            var url = urlPrefix || this.urlPrefix;
            var split = name.split('.');
            if (split.length === 1) {
                // URL is for and editor core template
                url += 'templates/' + split[0] + '.html';
            } else {
                // URL is for a plugin template
                url += 'plugins/' + split[0] + '/templates/' + split.splice(1).join('/') + '.html';
            }

            // Request the template
            $.ajax({
                url: url,
                type: 'GET',
                async: false,
                // <debug/>
                // 15 seconds
                timeout: 15000,
                error: function() {
                    template = null;
                },
                success: function(data) {
                    template = data;
                }
            });
            // Cache the template
            this.templates[name] = template;
        } else {
            template = this.templates[name];
        }
        return template;
    },

    /*========================================================================*\
     * Helpers
    \*========================================================================*/

    /**
     * @returns {boolean}
     */
    isDirty: function() {
        var instances = this.getInstances();
        for (var i = 0; i < instances.length; i++) {
            if (instances[i].isDirty()) return true;
        }
        return false;
    },

    /**
     *
     */
    unloadWarning: function() {
        var instances = this.getInstances();
        for (var i = 0; i < instances.length; i++) {
            if (instances[i].isDirty() &&
                    instances[i].isEditing() &&
                    instances[i].options.unloadWarning) {
                return tr('navigateAway');
            }
        }
    },

    /*========================================================================*\
     * Plugins and UI
    \*========================================================================*/

    /**
     * Registers a new UI component, overriding any previous UI components registered with the same name.
     *
     * @param {String} name
     * @param {Object} ui
     */
    registerUi: function(ui) {
        // <strict/>
        this.ui[ui.name] = ui;
    },

    /**
     * Registers a new layout, overriding any previous layout registered with the same name.
     *
     * @param {String} name
     * @param {Object} layout
     */
    registerLayout: function(layout) {
        // <strict/>

        this.layouts[layout.name] = layout;
    },

    registerPlugin: function(plugin) {
        // <strict/>

        this.plugins[plugin.name] = plugin;
    },

    registerPreset: function(preset, setDefault) {
        // <strict/>

        this.presets[preset.name] = preset;
        if (setDefault) {
            this.defaults = preset;
        }
    },

    /*========================================================================*\
     * Persistance
    \*========================================================================*/
    /**
     * @param {String} key
     * @param {mixed} value
     * @param {String} namespace
     */
    persist: function(key, value, namespace) {
        key = namespace ? namespace + '.' + key : key;
        if (value === undefined) {
            return persistGet(key);
        }
        return persistSet(key, value);
    }

};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/raptor.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/raptor-widget.js
/**
 *
 * @author David Neilsen - david@panmedia.co.nz
 * @author Michael Robinson - michael@panmedia.co.nz
 * @version 0.1
 * @requires jQuery
 * @requires jQuery UI
 * @requires Rangy
 */

/**
 * Set to true when raptor is reloading the page after it has disabled editing.
 *
 * @type Boolean
 */
var disabledReloading = false;

/**
 * @class
 */
var RaptorWidget = {

    /**
     * @constructs RaptorWidget
     */
    _init: function() {
        // Prevent double initialisation
        if (this.element.attr('data-raptor-initialised')) {
            // <debug/>
            return;
        }
        this.element.attr('data-raptor-initialised', true);

        // Add the editor instance to the global list of instances
        if ($.inArray(this, Raptor.instances) === -1) {
            Raptor.instances.push(this);
        }

        var currentInstance = this;

        // <strict/>

        // Set the initial locale
        var locale = this.persist('locale') || this.options.initialLocale;
        if (locale) {
            currentLocale = locale;
        }

        var options = this.options;
        if (this.options.preset) {
            this.options = $.extend(true, {}, Raptor.globalDefaults, Raptor.presets[this.options.preset], this.options);
        } else {
            this.options = $.extend(true, {}, Raptor.globalDefaults, Raptor.defaults, this.options);
        }
        if (options.layouts && options.layouts.toolbar && options.layouts.toolbar.uiOrder) {
            this.options.layouts.toolbar.uiOrder = options.layouts.toolbar.uiOrder;
        }

        // Give the element a unique ID
        if (!this.element.attr('id')) {
            this.element.attr('id', elementUniqueId());
        }

        // Initialise properties
        this.ready = false;
        this.events = {};
        this.plugins = {};
        this.layouts = {};
        this.templates = $.extend({}, Raptor.templates);
        this.target = this.element;
        this.layout = null;
        this.previewState = null;
        this.pausedState = null;
        this.pausedScrollX = null;
        this.pausedScrollY = null;

        // True if editing is enabled
        this.enabled = false;

        // True if editing is enabled at least once
        this.initialised = false;

        // List of UI objects bound to the editor
        this.uiObjects = {};

        // List of hotkeys bound to the editor
        this.hotkeys = {};
        this.hotkeysSuspended = false;

        // If hotkeys are enabled, register any custom hotkeys provided by the user
        if (this.options.enableHotkeys) {
            this.registerHotkey(this.hotkeys);
        }

        // Bind default events
        for (var name in this.options.bind) {
            this.bind(name, this.options.bind[name]);
        }

        // Undo stack, redo pointer
        this.history = [];
        this.present = 0;
        this.historyEnabled = true;

        // Check for browser support
        if (!isSupported()) {
            // @todo If element isn't a textarea, replace it with one
            return;
        }

        // Store the original HTML
        this.setOriginalHtml(this.element.is(':input') ? this.element.val() : this.element.html());
        this.historyPush(this.getOriginalHtml());

        // Replace textareas/inputs with a div
        if (this.element.is(':input')) {
            this.replaceOriginal();
        }

        // Load plugins
        this.loadPlugins();

        // Stores if the current state of the content is clean
        this.dirty = false;

        // Stores the previous state of the content
        this.previousContent = null;

        // Stores the previous selection
        this.previousSelection = null;

        this.getElement().addClass('raptor-editable-block');

        this.loadLayouts();

        // Fire the ready event
        this.ready = true;
        this.fire('ready');

        // Automatically enable the editor if autoEnable is true
        if (this.options.autoEnable) {
            $(function() {
                currentInstance.enableEditing();
            });
        }
    },

    /*========================================================================*\
     * Core functions
    \*========================================================================*/

    /**
     * Attaches the editor's internal events.
     *
     * @fires RaptorWidget#resize
     */
    attach: function() {
        this.bind('change', this.historyPush);

        this.getElement().on('click.raptor', 'img', function(event) {
            selectionSelectOuter(event.target);
            this.checkSelectionChange();
        }.bind(this));
        this.getElement().on('focus.raptor', this.showLayout.bind(this));
        this.target.on('mouseup.raptor', this.checkSelectionChange.bind(this));
        this.target.on('input.raptor keyup.raptor mouseup.raptor', this.checkChangeDelayed.bind(this));

        // Unload warning
        $(window).bind('beforeunload', Raptor.unloadWarning.bind(Raptor));

        // Trigger editor resize when window is resized
        var editor = this;
        $(window).resize(function(event) {
            editor.fire('resize');
        });
    },

    /**
     * Detaches the editor's internal events.
     */
    detach: function() {
        this.unbind('change');
        this.getElement().off('click.raptor', 'img');
        this.getElement().off('focus.raptor');
        this.getElement().blur();

        this.target.off('mouseup.raptor');
        this.target.off('keyup.raptor');
    },

    /**
     * Reinitialises the editor, unbinding all events, destroys all UI and plugins
     * then recreates them.
     */
    localeChange: function() {
        if (!this.ready) {
            // If the edit is still initialising, wait until its ready
            var localeChange;
            localeChange = function() {
                // Prevent reinit getting called twice
                this.unbind('ready', localeChange);
                this.localeChange();
            };
            this.bind('ready', localeChange);
            return;
        }

        this.actionPreviewRestore();
        var visibleLayouts = [];
        for (var name in this.layouts) {
            if (this.layouts[name].isVisible()) {
                visibleLayouts.push(name);
            }
        }
        this.layoutsDestruct();
        this.events = {};
        this.plugins = {};
        this.uiObjects = {};
        this.hotkeys = {};
        this.loadPlugins();
        this.loadLayouts();
        for (var i = 0; i < visibleLayouts.length; i++) {
            this.layouts[visibleLayouts[i]].show();
        }
        this.checkSelectionChange();
    },

    /**
     * Restore focus to the element being edited.
     */
    restoreFocus: function() {
        this.getElement().focus();
    },

    /**
     * Returns the current content editable element, which will be either the
     * orignal element, or the div the orignal element was replaced with.
     * @returns {jQuery} The current content editable element
     */
    getElement: function() {
        return this.target;
    },

    getNode: function() {
        return this.target[0];
    },

    /**
     *
     */
    getOriginalElement: function() {
        return this.element;
    },

    /**
     * Replaces the original element with a content editable div. Typically used
     * to replace a textarea.
     */
    replaceOriginal: function() {
        if (!this.target.is(':input')) return;

        // Create the replacement div
        var target = $('<div/>')
            // Set the HTML of the div to the HTML of the original element, or if the original element was an input, use its value instead
            .html(this.element.val())
            // Insert the div before the original element
            .insertBefore(this.element)
            // Give the div a unique ID
            .attr('id', elementUniqueId())
            // Copy the original elements class(es) to the replacement div
            .addClass(this.element.attr('class'))
            // Add custom classes
            .addClass(this.options.classes);

        var style = elementGetStyles(this.element);
        for (var i = 0; i < this.options.replaceStyle.length; i++) {
            target.css(this.options.replaceStyle[i], style[this.options.replaceStyle[i]]);
        }

        this.element.hide();
        this.bind('change', function() {
            if (this.getOriginalElement().is(':input')) {
                this.getOriginalElement().val(this.getHtml()).trigger('input');
            } else {
                this.getOriginalElement().html(this.getHtml());
            }
        });

        this.target = target;
    },

    checkSelectionChange: function() {
        // Check if the caret has changed position
        var currentSelection = rangy.serializeSelection(null, false);
        if (this.previousSelection !== currentSelection) {
            this.fire('selectionChange');
        }
        this.previousSelection = currentSelection;
    },

    checkChangeTimer: null,
    checkChangeCount: 0,
    checkChangeDelayed: function() {
        if (this.checkChangeTimer !== null) {
            clearTimeout(this.checkChangeTimer);
            this.checkChangeTimer = null;
        }
        if (this.checkChangeCount++ < 10) {
            this.checkChangeTimer = setTimeout(this.checkChange.bind(this), 200);
        } else {
            this.checkChange();
        }
    },

    /**
     * Determine whether the editing element's content has been changed.
     */
    checkChange: function() {
        this.checkChangeCount = 0;

        // Get the current content
        var currentHtml = this.getHtml();

        // Check if the dirty state has changed
        var wasDirty = this.dirty;

        // Check if the current content is different from the original content
        this.dirty = this.originalHtml !== currentHtml;

        // If the current content has changed since the last check, fire the change event
        if (this.previousHtml !== currentHtml) {
            this.previousHtml = currentHtml;
            this.fire('change', [currentHtml]);

            // If the content was changed to its original state, fire the cleaned event
            if (wasDirty !== this.dirty) {
                if (this.dirty) {
                    this.fire('dirty');
                } else {
                    this.fire('cleaned');
                }
            }

            this.checkSelectionChange();
        }
    },

    change: function() {
        this.fire('change', [
            this.getHtml()
        ]);
    },

    /*========================================================================*\
     * Destructor
    \*========================================================================*/

    /**
     * Hides the toolbar, disables editing, and fires the destroy event, and unbinds any events.
     * @public
     */
    destruct: function(reinitialising) {
        this.disableEditing();

        // Trigger destroy event, for plugins to remove them selves
        this.fire('destroy');

        // Remove all event bindings
        this.events = {};

        // Unbind all events
        this.getElement().off('.raptor');

        if (this.getOriginalElement().is(':input')) {
            this.target.remove();
            this.target = null;
            this.element.show();
        }

        this.layoutsDestruct();
    },

    /**
     * Runs destruct, then calls the UI widget destroy function.
     * @see $.
     */
//    destroy: function() {
//        this.destruct();
//        $.Widget.prototype.destroy.call(this);
//    },

    /*========================================================================*\
     * Preview functions
    \*========================================================================*/

    actionPreview: function(action) {
        this.actionPreviewRestore();
        try {
            var ranges = this.fire('selection-customise');
            if (ranges.length > 0) {
                this.previewState = actionPreview(this.previewState, this.target, function() {
                    for (var i = 0, l = ranges.length; i < l; i++) {
                        rangy.getSelection().setSingleRange(ranges[i]);
                        this.selectionConstrain();
                        action();
                    }
                }.bind(this));
            } else {
                this.selectionConstrain();
                this.previewState = actionPreview(this.previewState, this.target, action);
            }
            this.checkSelectionChange();
        } catch (exception) {
            // <strict/>
        }
    },

    actionPreviewRestore: function() {
        if (this.previewState) {
            this.target = actionPreviewRestore(this.previewState, this.target);
            this.previewState = null;
            this.checkSelectionChange();
        }
    },

    actionApply: function(action) {
        this.actionPreviewRestore();
        var state = this.stateSave();
        try {
            var ranges = this.fire('selection-customise');
            if (ranges.length > 0) {
                actionApply(function() {
                    for (var i = 0, l = ranges.length; i < l; i++) {
                        rangy.getSelection().setSingleRange(ranges[i]);
                        this.selectionConstrain();
                        actionApply(action, this.history);
                    }
                }.bind(this), this.history);
            } else {
                this.selectionConstrain();
                actionApply(action, this.history);
            }
            this.checkChange();
        } catch (exception) {
            this.stateRestore(state);
            // <strict/>
        }
    },

    actionUndo: function() { },

    actionRedo: function() { },

    stateSave: function() {
        this.selectionConstrain();
        return stateSave(this.target);
    },

    stateRestore: function(state) {
        // if (!this.isEditing()) {
        //     return;
        // }
        var restoredState = stateRestore(this.target, state),
            selection = rangy.getSelection();
        this.target = restoredState.element;
        if (restoredState.ranges !== null) {
            selection.setRanges(restoredState.ranges);
            selection.refresh();
        }
    },

    selectionConstrain: function() {
        selectionConstrain(this.target[0]);
    },

    pause: function() {
        if (!this.pausedState) {
            this.pausedState = this.stateSave()
            this.suspendHotkeys();
            // <jquery-ui>
            // Hack to fix when a dialog is closed, the editable element is focused, and the scroll jumps to the top
            this.pausedScrollX = window.scrollX;
            this.pausedScrollY = window.scrollY;
            // </jquery-ui>
        }
    },

    resume: function() {
        if (this.pausedState) {
            this.stateRestore(this.pausedState);
            this.pausedState = null;
            this.resumeHotkeys();
            this.restoreFocus();
            // <jquery-ui>
            window.scrollTo(this.pausedScrollX, this.pausedScrollY);
            // </jquery-ui>
        }
    },

    /*========================================================================*\
     * Persistance Functions
    \*========================================================================*/

    /**
     * @param {String} key
     * @param {mixed} [value]
     * @returns {mixed}
     */
    persist: function(key, value) {
        if (!this.options.persistence) return null;
        return Raptor.persist(key, value, this.options.namespace);
    },

    /*========================================================================*\
     * Other Functions
    \*========================================================================*/

    /**
     *
     */
    enableEditing: function() {
        if (!this.enabled) {
            this.fire('enabling');

            // Attach core events
            this.attach();

            this.enabled = true;

            this.getElement()
                .addClass(this.options.baseClass + '-editing')
                .addClass(this.options.classes);

            if (this.options.partialEdit) {
                this.getElement().find(this.options.partialEdit).prop('contenteditable', true);
            } else {
                this.getElement().prop('contenteditable', true);
            }

            if (!this.initialised) {
                this.initialised = true;
//                try {
//                    document.execCommand('enableInlineTableEditing', false, false);
//                    document.execCommand('styleWithCSS', true, true);
//                } catch (error) {
//                    // <strict/>
//                }

                for (var name in this.plugins) {
                    this.plugins[name].enable();
                }

                this.bindHotkeys();

                this.getElement().closest('form').on('submit.raptor', function() {
                    clean(this.getElement());
                    this.fire('change', [this.getHtml()]);
                }.bind(this));
            }

            clean(this.getElement());
            this.fire('enabled');
            this.showLayout();

            var selectNode = this.options.partialEdit ? this.getElement().find('[contenteditable]')[0] : this.getNode();
            switch (this.options.autoSelect) {
                case 'all': {
                    selectionSelectInner(selectNode);
                    break;
                }
                case 'start': {
                    var selectInnerNode = $(selectNode).find('*:first')[0];
                    if (!selectInnerNode) {
                        selectionSelectInner(selectNode);
                        break;
                    }
                    var range = rangy.createRange();
                    range.setStartBefore(selectInnerNode);
                    range.setEndBefore(selectInnerNode);
                    selectionSet(range);
                    break;
                }
                case 'end': {
                    var selectInnerNode = $(selectNode).find('*:last')[0];
                    if (!selectInnerNode) {
                        selectionSelectInner(selectNode);
                        break;
                    }
                    selectionSelectInner(selectInnerNode);
                    var range = rangy.createRange();
                    range.setStartAfter(selectInnerNode);
                    range.setEndAfter(selectInnerNode);
                    selectionSet(range);
                    break;
                }
            }
        }
    },

    /**
     *
     */
    disableEditing: function() {
        if (this.enabled) {
            this.detach();
            this.enabled = false;
            this.getElement()
                .prop('contenteditable', false)
                .removeClass(this.options.baseClass + '-editing')
                .removeClass(this.options.classes);
            rangy.getSelection().removeAllRanges();
            this.fire('disabled');
            if (this.options.reloadOnDisable && !disabledReloading) {
                disabledReloading = true;
                window.location.reload();
            }
        }
    },

    cancelEditing: function() {
        this.unify(function(raptor) {
            raptor.stopEditing();
        });
    },

    stopEditing: function() {
        this.fire('cancel');
        if (!this.options.reloadOnDisable) {
            this.resetHtml();
        }
        this.disableEditing();
        this.dirty = false;
        selectionDestroy();
    },

    /**
     *
     * @returns {boolean}
     */
    isEditing: function() {
        return this.enabled;
    },

    /**
     * @param {jQuerySelector|jQuery|Element} element
     * @returns {boolean}
     */
    isRoot: function(element) {
        return this.getElement()[0] === $(element)[0];
    },

    /**
     * @param {function} callback
     * @param {boolean} [callSelf]
     */
    unify: function(callback, callSelf) {
        if (callSelf !== false) {
            callback(this);
        }
        if (this.options.unify) {
            var currentInstance = this;
            Raptor.eachInstance(function(instance) {
                if (instance === currentInstance) {
                    return;
                }
                if (instance.options.unify) {
                    callback(instance);
                }
            });
        }
    },

    /*========================================================================*\
     * Layout
    \*========================================================================*/
    getLayout: function(type) {
        // <strict/>
        return this.layouts[type];
    },

    loadLayouts: function() {
        for (var name in this.options.layouts) {
            if (typeof Raptor.layouts[name] === 'undefined') {
                // <strict/>
                continue;
            }
            this.layouts[name] = this.prepareComponent(Raptor.layouts[name], this.options.layouts[name], 'layout').instance;

            if (this.layouts[name].hotkeys) {
                this.registerHotkey(this.layouts[name].hotkeys, null, this.layouts[name]);
            }
        }
    },

    layoutsDestruct: function() {
        for (var name in this.layouts) {
            this.layouts[name].destruct();
        }
    },

    prepareComponent: function(component, componentOptions, prefix) {
        var instance = $.extend({}, component);

        var options = $.extend({}, instance.options, this.options, {
            baseClass: this.options.baseClass + '-' + prefix + '-' + stringFromCamelCase(component.name)
        }, componentOptions);

        instance.raptor = this;
        instance.options = options;
        // <strict/>
        var init = instance.init();

        return {
            init: init,
            instance: instance
        };
    },

    /**
     * Show the layout for the current element.
     */
    showLayout: function() {
        // <debug/>

        // If unify option is set, hide all other layouts first
        this.unify(function(raptor) {
            raptor.fire('layoutHide');
        }, false);

        this.fire('layoutShow');

        this.fire('resize');
        if (typeof this.getElement().attr('tabindex') === 'undefined') {
            this.getElement().attr('tabindex', -1);
        }
    },

    /*========================================================================*\
     * Template functions
    \*========================================================================*/

    /**
     * @param {String} name
     * @param {Object} variables
     */
    getTemplate: function(name, variables) {
        if (!this.templates[name]) {
            this.templates[name] = templateGet(name, this.options.urlPrefix);
        }
        // <strict/>
        return templateConvertTokens(this.templates[name], variables);
    },

    /*========================================================================*\
     * History functions
    \*========================================================================*/

    /**
     *
     */
    historyPush: function() {
        if (!this.historyEnabled) return;
        var html = this.getHtml();
        if (html !== this.historyPeek()) {
            // Reset the future on change
            if (this.present !== this.history.length - 1) {
                this.history = this.history.splice(0, this.present + 1);
            }

            // Add new HTML to the history
            this.history.push(this.getHtml());

            // Mark the persent as the end of the history
            this.present = this.history.length - 1;

            this.fire('historyChange');
        }
    },

    /**
     * @returns {String|null}
     */
    historyPeek: function() {
        if (!this.history.length) return null;
        return this.history[this.present];
    },

    /**
     *
     */
    historyBack: function() {
        if (this.present > 0) {
            this.present--;
            this.setHtml(this.history[this.present]);
            this.historyEnabled = false;
            this.change();
            this.historyEnabled = true;
            this.fire('historyChange');
        }
    },

    /**
     *
     */
    historyForward: function() {
        if (this.present < this.history.length - 1) {
            this.present++;
            this.setHtml(this.history[this.present]);
            this.historyEnabled = false;
            this.change();
            this.historyEnabled = true;
            this.fire('historyChange');
        }
    },

    /*========================================================================*\
     * Hotkeys
    \*========================================================================*/

    /**
     * @param {Array|String} mixed The hotkey name or an array of hotkeys
     * @param {Object} The hotkey object or null
     */
    registerHotkey: function(mixed, action) {
        // <strict/>

        this.hotkeys[mixed] = action;
    },

    bindHotkeys: function() {
        for (var keyCombination in this.hotkeys) {
            this.getElement().on('keydown.raptor', keyCombination, function(event) {
                if (this.isEditing() && !this.hotkeysSuspended) {
                    var result = this.hotkeys[event.data]();
                    if (result !== false) {
                        event.preventDefault();
                    }
                }
            }.bind(this));
        }
    },

    /**
     * Suspend hotkey functionality.
     */
    suspendHotkeys: function() {
        // <debug/>
        this.hotkeysSuspended = true;
    },

    /**
     * Resume hotkey functionality.
     */
    resumeHotkeys: function() {
        // <debug/>
        this.hotkeysSuspended = false;
    },

    /*========================================================================*\
     * Buttons
    \*========================================================================*/

    isUiEnabled: function(ui) {
        // Check if we are not automatically enabling UI, and if not, check if the UI was manually enabled
        if (this.options.enableUi === false &&
                typeof this.options.plugins[ui] === 'undefined' ||
                this.options.plugins[ui] === false) {
            // <debug/>
            return false;
        }

        // Check if we have explicitly disabled UI
        if ($.inArray(ui, this.options.disabledUi) !== -1 ||
                $.inArray(ui, this.options.disabledPlugins) !== -1) {
            // <strict/>
            return false;
        }

        return true;
    },

    /**
     * @deprecated
     * @param  {String} ui Name of the UI object to be returned.
     * @return {Object|null} UI object referenced by the given name.
     */
    getUi: function(ui) {
        // <strict/>
        return this.uiObjects[ui];
    },

    /*========================================================================*\
     * Plugins
    \*========================================================================*/
    /**
     * @param {String} name
     * @return {Object|undefined} plugin
     */
    getPlugin: function(name) {
        return this.uiObjects[name] || this.plugins[name];
    },

    /**
     *
     */
    loadPlugins: function() {
        var editor = this;

        if (!this.options.plugins) {
            this.options.plugins = {};
        }

        for (var name in Raptor.plugins) {
            // Check if we are not automaticly enabling plugins, and if not, check if the plugin was manually enabled
            if (this.options.enablePlugins === false &&
                    typeof this.options.plugins[name] === 'undefined' ||
                    this.options.plugins[name] === false) {
                // <debug/>
                continue;
            }

            // Check if we have explicitly disabled the plugin
            if ($.inArray(name, this.options.disabledUi) !== -1 ||
                    $.inArray(name, this.options.disabledPlugins) !== -1) {
                // <strict/>
                continue;
            }

            editor.plugins[name] = this.prepareComponent(Raptor.plugins[name], editor.options.plugins[name], 'plugin').instance;
        }
    },

    /*========================================================================*\
     * Content accessors
    \*========================================================================*/

    /**
     * @returns {boolean}
     */
    isDirty: function() {
        return this.dirty;
    },

    /**
     * @returns {String}
     */
    getHtml: function() {
        return this.getElement().html();
    },

    clean: function() {
        this.actionApply(function() {
            clean(this.getElement());
        }.bind(this));
    },

    /**
     * @param {String} html
     */
    setHtml: function(html) {
        this.getElement().html(html);
        this.fire('html');
        this.checkChange();
    },

    /**
     *
     */
    resetHtml: function() {
        this.setHtml(this.getOriginalHtml());
        this.fire('cleaned');
    },

    /**
     * @returns {String}
     */
    getOriginalHtml: function() {
        return this.originalHtml;
    },

    /**
     *
     */
    saved: function(args) {
        this.setOriginalHtml(this.getHtml());
        this.dirty = false;
        this.fire('saved', args);
        this.fire('cleaned');
    },

    /**
     * @param {String} html
     */
    setOriginalHtml: function(html) {
        this.originalHtml = html;
    },

    /*========================================================================*\
     * Event handling
    \*========================================================================*/
    /**
     * @param {String} name
     * @param {function} callback
     * @param {Object} [context]
     */
    bind: function(name, callback, context) {
        // <strict/>
        var names = name.split(/,\s*/);
        for (var i = 0, l = names.length; i < l; i++) {
        	name = names[i].toLowerCase().replace(/[^a-z]/, '');
            // <debug/>
            if (!this.events[name]) {
                this.events[name] = [];
            }
            this.events[name].push({
                context: context,
                callback: callback
            });
        }
    },

    /**
     * @param {String} name
     * @param {function} callback
     * @param {Object} [context]
     */
    unbind: function(name, callback, context) {
    	name = name.toLowerCase().replace(/[^a-z]/, '');
        // <debug/>
        for (var i = 0, l = this.events[name].length; i < l; i++) {
            if (this.events[name][i] &&
                this.events[name][i].callback === callback &&
                this.events[name][i].context === context) {
                this.events[name].splice(i, 1);
            }
        }
    },

    /**
     * @param {String} name
     * @param {boolean} [global]
     * @param {boolean} [sub]
     */
    fire: function(name, args) {
    	name = name.toLowerCase().replace(/[^a-z]/, '');
        var result = [];

        // <debug/>

        if (this.events[name]) {
            for (var i = 0, l = this.events[name].length; i < l; i++) {
                var event = this.events[name][i];
                if (typeof event !== 'undefined' &&
                        typeof event.callback !== 'undefined') {
                    var currentResult = event.callback.apply(event.context || this, args);
                    if (typeof currentResult !== 'undefined') {
                        result = result.concat(currentResult);
                    }
                }
            }
        }

        return result;
    }
};

$.widget('ui.raptor', RaptorWidget);
$.fn.raptor.Raptor = Raptor;;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/raptor-widget.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout.js
function RaptorLayout(name) {
    this.name = name;
}

RaptorLayout.prototype.init = function() {
};

RaptorLayout.prototype.destruct = function() {
};

RaptorLayout.prototype.isVisible = function() {
    return false;
};

RaptorLayout.prototype.show = function() {
};

RaptorLayout.prototype.hide = function() {
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/plugin.js
/**
 * @fileOverview Contains the raptor plugin class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The raptor plugin class.
 *
 * @todo type and desc for name.
 * @param {type} name
 * @param {Object} overrides Options hash.
 * @returns {RaptorPlugin}
 */
function RaptorPlugin(name, overrides) {
    this.name = name;
    for (var key in overrides) {
        this[key] = overrides[key];
    }
}

/**
 * Initialize the raptor plugin.
 */
RaptorPlugin.prototype.init = function() {};

/**
 * Enable the raptor plugin.
 */
RaptorPlugin.prototype.enable = function() {};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/plugin.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/ui-group.js
function UiGroup(raptor, uiOrder) {
    this.raptor = raptor;
    this.uiOrder = uiOrder;
};

UiGroup.prototype.appendTo = function(layout, panel) {
    // Loop the UI component order option
    for (var i = 0, l = this.uiOrder.length; i < l; i++) {
        var uiGroupContainer = $('<div/>')
            .addClass(this.raptor.options.baseClass + '-layout-toolbar-group');

        // Loop each UI in the group
        var uiGroup = this.uiOrder[i];
        for (var ii = 0, ll = uiGroup.length; ii < ll; ii++) {
            // Check if the UI component has been explicitly disabled
            if (!this.raptor.isUiEnabled(uiGroup[ii])) {
                continue;
            }

            // Check the UI has been registered
            if (Raptor.ui[uiGroup[ii]]) {
                var uiOptions = this.raptor.options.plugins[uiGroup[ii]];
                if (uiOptions === false) {
                    continue;
                }

                var component = this.raptor.prepareComponent(Raptor.ui[uiGroup[ii]], uiOptions, 'ui');
                component.instance.layout = layout;

                this.raptor.uiObjects[uiGroup[ii]] = component.instance;

                if (typeIsElement(component.init)) {
                    // Fix corner classes
                    component.init.removeClass('ui-corner-all');

                    // Append the UI object to the group
                    uiGroupContainer.append(component.init);
                }
            }
            // <strict/>
        }

        // Append the UI group to the editor toolbar
        if (uiGroupContainer.children().length > 0) {
            uiGroupContainer.appendTo(panel);
        }
    }

    // Fix corner classes
    panel.find('.ui-button:first-child').addClass('ui-corner-left');
    panel.find('.ui-button:last-child').addClass('ui-corner-right');
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/ui-group.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/toolbar.js
/**
 * @fileOverview Toolbar layout.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

function ToolbarLayout() {
    RaptorLayout.call(this, 'toolbar');
    this.wrapper = null;
}

ToolbarLayout.prototype = Object.create(RaptorLayout.prototype);

ToolbarLayout.prototype.init = function() {
    this.raptor.bind('enabled', this.show.bind(this));
    this.raptor.bind('disabled', this.hide.bind(this));
    this.raptor.bind('layoutShow', this.show.bind(this));
    this.raptor.bind('layoutHide', this.hide.bind(this));
    $(window).resize(this.constrainPosition.bind(this));
};

ToolbarLayout.prototype.destruct = function() {
    if (this.wrapper) {
        this.wrapper.remove();
        this.wrapper = null;
    }
    this.raptor.fire('toolbarDestroy');
};

/**
 * Show the toolbar.
 *
 * @fires RaptorWidget#toolbarShow
 */
ToolbarLayout.prototype.show = function() {
    if (!this.isVisible()) {
        this.getElement().css('display', '');
        this.constrainPosition();
        if (this.raptor.getElement().zIndex() > this.getElement().zIndex()) {
            this.getElement().css('z-index', this.raptor.getElement().zIndex() + 1);
        } else {
            this.getElement().css('z-index', null);
        }
        this.raptor.fire('toolbarShow');
    }
};

/**
 * Hide the toolbar.
 *
 * @fires RaptorWidget#toolbarHide
 */
ToolbarLayout.prototype.hide = function() {
    if (this.isReady()) {
        this.getElement().css('display', 'none');
        this.raptor.fire('toolbarHide');
    }
};

ToolbarLayout.prototype.initDragging = function() {
    if ($.fn.draggable &&
            this.options.draggable &&
            !this.getElement().data('ui-draggable')) {
        // <debug/>
        this.getElement().draggable({
            cancel: 'a, button',
            cursor: 'move',
            stop: this.constrainPosition.bind(this)
        });
        // Remove the relative position
        this.getElement().css('position', 'fixed');

        // Set the persistent position
        var pos = this.raptor.persist('position') || this.options.dialogPosition;

        if (!pos) {
            pos = [10, 10];
        }

        // <debug/>

        if (parseInt(pos[0], 10) + this.getElement().outerHeight() > $(window).height()) {
            pos[0] = $(window).height() - this.getElement().outerHeight();
        }
        if (parseInt(pos[1], 10) + this.getElement().outerWidth() > $(window).width()) {
            pos[1] = $(window).width() - this.getElement().outerWidth();
        }

        this.getElement().css({
            top: Math.abs(parseInt(pos[0], 10)),
            left: Math.abs(parseInt(pos[1], 10))
        });
    }
};

ToolbarLayout.prototype.enableDragging = function() {
    if ($.fn.draggable &&
            this.options.draggable &&
            this.getElement().data('ui-draggable')) {
        this.getElement().draggable('enable');
    }
};

ToolbarLayout.prototype.disableDragging = function() {
    if ($.fn.draggable &&
            this.options.draggable &&
            this.getElement().is('.ui-draggable')) {
        this.getElement().draggable('disable').removeClass('ui-state-disabled');
    }
};

ToolbarLayout.prototype.isReady = function() {
    return this.wrapper !== null;
};

ToolbarLayout.prototype.isVisible = function() {
    return this.isReady() && this.getElement().is(':visible');
};

ToolbarLayout.prototype.constrainPosition = function() {
    if (this.isVisible()) {
        var x = parseInt(this.wrapper.css('left')) || -999,
            y = parseInt(this.wrapper.css('top')) || -999,
            width = this.wrapper.outerWidth(),
            height = this.wrapper.outerHeight(),
            windowWidth = $(window).width(),
            windowHeight = $(window).height(),
            newX = Math.max(0, Math.min(x, windowWidth - width)),
            newY = Math.max(0, Math.min(y, windowHeight - height));

        if (newX !== x || newY !== y) {
            this.wrapper.css({
                left: newX,
                top: newY
            });
        }

        // Save the persistent position
        this.raptor.persist('position', [
            this.wrapper.css('top'),
            this.wrapper.css('left')
        ]);
    }
};

ToolbarLayout.prototype.getElement = function() {
    if (this.wrapper === null) {
        // Load all UI components if not supplied
        if (!this.options.uiOrder) {
            this.options.uiOrder = [[]];
            for (var name in Raptor.ui) {
                this.options.uiOrder[0].push(name);
            }
        }

        // <debug/>

        var toolbar = this.toolbar = $('<div/>')
            .addClass(this.options.baseClass + '-toolbar');
        var innerWrapper = this.toolbarWrapper = $('<div/>')
            .addClass(this.options.baseClass + '-inner')
            .addClass('ui-widget-content')
            .mousedown(function(event) {
                event.preventDefault();
            })
            .append(toolbar);
        var path = this.path = $('<div/>')
            .addClass(this.options.baseClass + '-path')
            .addClass('ui-widget-header');
        var wrapper = this.wrapper = $('<div/>')
            .addClass('raptor-ui')
            .addClass(this.options.baseClass + '-outer ' + this.raptor.options.baseClass + '-layout')
            .css('display', 'none')
            .append(path)
            .append(innerWrapper);

        var uiGroup = new UiGroup(this.raptor, this.options.uiOrder);
        uiGroup.appendTo(this, this.toolbar);
        $('<div/>').css('clear', 'both').appendTo(this.toolbar);

        $(function() {
            wrapper.appendTo('body');
            this.initDragging();
            this.constrainPosition(true);
            this.raptor.fire('layoutReady', [this.wrapper]);
            this.raptor.fire('toolbarReady', [this]);
        }.bind(this));
    }
    return this.wrapper;
};

Raptor.registerLayout(new ToolbarLayout());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/toolbar.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/hover-panel.js
/**
 * @fileOverview Hover panel layout.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 */

function HoverPanelLayout() {
    RaptorLayout.call(this, 'hoverPanel');
    this.hoverPanel = null;
    this.visible = false;
}

HoverPanelLayout.prototype = Object.create(RaptorLayout.prototype);

HoverPanelLayout.prototype.init = function() {
    this.raptor.bind('ready', this.ready.bind(this));
    this.raptor.bind('enabled', this.enabled.bind(this));
};

HoverPanelLayout.prototype.ready = function() {
    this.raptor.getElement()
        .mouseenter(this.show.bind(this))
        .mouseleave(this.hide.bind(this));
};

HoverPanelLayout.prototype.enabled = function() {
    this.getElement().hide();
};

HoverPanelLayout.prototype.getElement = function() {
    if (this.hoverPanel === null) {
        this.hoverPanel = $('<div/>')
            .addClass(this.raptor.options.baseClass + '-layout ' + this.options.baseClass)
            .mouseleave(this.hide.bind(this));

        var uiGroup = new UiGroup(this.raptor, this.options.uiOrder);
        uiGroup.appendTo(this, this.hoverPanel);

        $(window).bind('scroll', this.position.bind(this));

        this.hoverPanel
            .appendTo('body');

        this.raptor.fire('layoutReady', [this.hoverPanel]);
    }
    return this.hoverPanel;
};

HoverPanelLayout.prototype.show = function(event) {
    if (!this.raptor.isEditing()) {
        this.visible = true;
        this.getElement().show();
        if (this.raptor.getElement().zIndex() > this.getElement().zIndex()) {
            this.getElement().css('z-index', this.raptor.getElement().zIndex() + 1);
        } else {
            this.getElement().css('z-index', null);
        }
        this.position();
        this.raptor.getElement().addClass(this.raptor.options.baseClass + '-editable-block-hover');
    }
};

HoverPanelLayout.prototype.hide = function(event) {
    if (!this.visible) {
        return;
    }
    if (!event) {
        return;
    }
    if ($.contains(this.getElement().get(0), event.relatedTarget)) {
        return;
    }
    if (event.relatedTarget === this.getElement().get(0)) {
        return;
    }
    if (this.getElement().get(0) === $(event.relatedTarget).parent().get(0)) {
        return;
    }
    if ($.contains(this.raptor.getElement().get(0), event.relatedTarget)) {
        return;
    }
    if (event.relatedTarget === this.raptor.getElement().get(0)) {
        return;
    }
    this.visible = false;
    this.getElement().hide();
    this.raptor.getElement().removeClass(this.raptor.options.baseClass + '-editable-block-hover');
};

HoverPanelLayout.prototype.position = function() {
    if (this.visible) {
        var visibleRect = elementVisibleRect(this.raptor.getElement());
        this.getElement().css({
            // Calculate offset center for the hoverPanel
            top:  visibleRect.top  + ((visibleRect.height / 2) - (this.getElement().outerHeight() / 2)),
            left: visibleRect.left + ((visibleRect.width / 2)  - (this.getElement().outerWidth()  / 2))
        });
    }
};

HoverPanelLayout.prototype.destruct = function() {
    if (this.hoverPanel) {
        this.hoverPanel.remove();
        this.hoverPanel = null;
    }
    this.visible = false;
};

Raptor.registerLayout(new HoverPanelLayout());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/hover-panel.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/element-hover-panel.js
/**
 * @fileOverview Element hover panel layout.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 */

function ElementHoverPanelLayout() {
    RaptorLayout.call(this, 'elementHoverPanel');
    this.elements = 'img';
    this.hoverPanel = null;
    this.visible = false;
    this.target = null;
    this.enabled = true;
}

ElementHoverPanelLayout.prototype = Object.create(RaptorLayout.prototype);

ElementHoverPanelLayout.prototype.init = function() {
    this.raptor.bind('ready', this.ready.bind(this));
};

ElementHoverPanelLayout.prototype.ready = function() {
    this.raptor.getElement()
        .on('mouseenter', this.options.elements, this.show.bind(this))
        .on('mouseleave', this.options.elements, this.hide.bind(this));
};

ElementHoverPanelLayout.prototype.getElement = function() {
    if (this.hoverPanel === null) {
        this.hoverPanel = $('<div/>')
            .addClass(this.raptor.options.baseClass + '-layout raptor-layout-hover-panel ' + this.options.baseClass)
            .mouseleave(this.hide.bind(this));

        var uiGroup = new UiGroup(this.raptor, this.options.uiOrder);
        uiGroup.appendTo(this, this.hoverPanel);

        $(window).bind('scroll', this.position.bind(this));

        this.hoverPanel
            .appendTo('body');

        this.raptor.fire('layoutReady', [this.hoverPanel]);
    }
    return this.hoverPanel;
};

ElementHoverPanelLayout.prototype.show = function(event) {
    if (this.enabled && this.raptor.isEditing()) {
        this.target = event.target;
        this.visible = true;
        elementPositionOver(this.getElement().show(), $(this.target));
    }
};

ElementHoverPanelLayout.prototype.hide = function(event) {
    if (!this.visible) {
        return;
    }
    if (event) {
        if ($.contains(this.getElement().get(0), event.relatedTarget)) {
            return;
        }
        if (event.relatedTarget === this.getElement().get(0)) {
            return;
        }
        if (this.getElement().get(0) === $(event.relatedTarget).parent().get(0)) {
            return;
        }
        if ($.contains(this.raptor.getElement().get(0), event.relatedTarget)) {
            return;
        }
        if (event.relatedTarget === this.raptor.getElement().get(0)) {
            return;
        }
    }
    this.visible = false;
    this.getElement().hide();
};

ElementHoverPanelLayout.prototype.close = function() {
    if (this.visible) {
        this.enabled = false;
        this.visible = false;
        this.getElement().hide();
        setTimeout(function() {
            this.enabled = true;
        }.bind(this), 1000);
    }
};

ElementHoverPanelLayout.prototype.position = function() {
    if (this.visible) {
        elementPositionOver(this.getElement(), $(this.target));
    }
};

ElementHoverPanelLayout.prototype.destruct = function() {
    if (this.hoverPanel) {
        this.hoverPanel.remove();
        this.hoverPanel = null;
    }
    this.visible = false;
};

Raptor.registerLayout(new ElementHoverPanelLayout());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/layout/element-hover-panel.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/button.js
/**
 * @fileOverview Contains the core button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The core button class.
 *
 * @param {Object} overrides Options hash.
 */
function Button(overrides) {
    this.text = false;
    this.label = null;
    this.icon = null;
    this.hotkey = null;
    for (var key in overrides) {
        this[key] = overrides[key];
    }
}

/**
 * Initialize the button.
 *
 * @return {Element}
 */
Button.prototype.init = function() {
    // Bind hotkeys
    if (typeof this.hotkey === 'string') {
        this.raptor.registerHotkey(this.hotkey, this.action.bind(this));
    } else if (typeIsArray(this.hotkey)) {
        for (var i = 0, l = this.hotkey.length; i < l; i++) {
            this.raptor.registerHotkey(this.hotkey[i], this.action.bind(this));
        }
    }

    // Return the button
    return this.getButton();
};

/**
 * Prepare and return the button Element to be used in the Raptor UI.
 *
 * @return {Element}
 */
Button.prototype.getButton = function() {
    if (!this.button) {
        var text = this.text || this.translate('Text', false);
        this.button = $('<div>')
            .html(text)
            .addClass(this.options.baseClass)
            .attr('title', this.getTitle())
            .click(this.click.bind(this));
        aButton(this.button, {
            icons: {
                primary: this.getIcon()
            },
            text: text,
            label: this.label
        });
    }
    return this.button;
};

/**
 * @return {String} The button's title property value, or if not present then the
 *   localized value for the button's name + Title.
 */
Button.prototype.getTitle = function() {
    return this.title || this.translate('Title');
};

/**
 * @return {String} The button's icon property value, or the ui-icon- prefix
 *   with the button's camel cased name appended.
 */
Button.prototype.getIcon = function() {
    if (this.icon === null) {
        return 'ui-icon-' + stringFromCamelCase(this.name);
    }
    return this.icon;
};

/**
 * Perform the button's action.
 *
 * @todo this probably should not nest actions
 */
Button.prototype.click = function() {
    if (aButtonIsEnabled(this.button)) {
        this.raptor.actionApply(this.action.bind(this));
    }
};

Button.prototype.translate = function(translation, variables) {
    return tr(this.name + translation, variables);
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/preview-button.js
/**
 * @fileOverview Contains the preview button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The preview button class.
 *
 * @constructor
 * @augments Button
 *
 * @param {Object} options
 */
function PreviewButton(options) {
    this.previewing = false;
    this.previewTimer = null;
    this.options = {
        preview: true,
        previewTimeout: 500
    };
    Button.call(this, options);
}

PreviewButton.prototype = Object.create(Button.prototype);

/**
 * Prepare and return the preview button Element to be used in the Raptor UI.
 *
 * @returns {Element}
 */
PreviewButton.prototype.getButton = function() {
    if (!this.button) {
        this.button = Button.prototype.getButton.call(this)
            .mouseenter(this.mouseEnter.bind(this))
            .mouseleave(this.mouseLeave.bind(this));
    }
    return this.button;
};

PreviewButton.prototype.applyPreview = function() {
    if (this.canPreview()) {
        this.previewing = true;
        this.raptor.actionPreview(this.action.bind(this));
    }
};

PreviewButton.prototype.endPreview = function() {
    if (this.previewTimer !== null) {
        clearTimeout(this.previewTimer);
        this.previewTimer = null;
    }
    this.previewing = false;
};

/**
 * Mouse enter event that enables the preview.
 */
PreviewButton.prototype.mouseEnter = function() {
    if (this.canPreview()) {
        this.endPreview();
        if (this.options.previewTimeout !== false) {
            this.previewTimer = setTimeout(this.applyPreview.bind(this), this.options.previewTimeout)
        } else {
            this.applyPreview();
        }
    }
};

/**
 * Mouse leave event that reverts preview (if active).
 */
PreviewButton.prototype.mouseLeave = function() {
    this.endPreview();
    this.raptor.actionPreviewRestore();
};

/**
 * Click event that reverts preview (if active), and the fires the inherited button click event.
 */
PreviewButton.prototype.click = function() {
    this.endPreview();
    return Button.prototype.click.apply(this, arguments);
};

/**
 * Checks if previewing is enabled.
 *
 * @returns {Boolean}
 */
PreviewButton.prototype.canPreview = function() {
    return this.options.preview;
};

/**
 * Checks if previewing is currently active.
 *
 * @returns {Boolean}
 */
PreviewButton.prototype.isPreviewing = function() {
    return this.previewing;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/preview-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/toggle-button.js
/**
 * @fileOverview Contains the core button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The toggle button class.
 *
 * @constructor
 * @augments Button
 *
 * @param {Object} options
 */
function ToggleButton(options) {
    this.disable = false;
    Button.call(this, options);
}

ToggleButton.prototype = Object.create(Button.prototype);

/**
 * Initialize the toggle button.
 *
 * @returns {Element}
 */
ToggleButton.prototype.init = function() {
    this.raptor.bind('selectionChange', this.selectionChange.bind(this));
    return Button.prototype.init.apply(this, arguments);
};

/**
 * Changes the state of the button depending on whether it is active or not.
 */
ToggleButton.prototype.selectionChange = function() {
    if (this.selectionToggle()) {
        aButtonActive(this.button);
        if (this.disable) {
            aButtonEnable(this.button);
        }
    } else {
        aButtonInactive(this.button);
        if (this.disable) {
            aButtonDisable(this.button);
        }
    }
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/toggle-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/preview-toggle-button.js
/**
 * @fileOverview Contains the preview toggle button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class the preview toggle button class.
 *
 * @constructor
 * @augments PreviewButton
 *
 * @param {Object} options
 */
function PreviewToggleButton(options) {
    PreviewButton.call(this, options);
}

PreviewToggleButton.prototype = Object.create(PreviewButton.prototype);

/**
 * Initialize the toggle preview button.
 *
 * @returns {Element}
 */
PreviewToggleButton.prototype.init = function() {
    this.raptor.bind('selectionChange', this.selectionChange.bind(this));
    return PreviewButton.prototype.init.apply(this, arguments);
};

/**
 * Sets the state of the button to active when preview is enabled.
 */
PreviewToggleButton.prototype.selectionChange = function() {
    if (this.selectionToggle()) {
        if (!this.isPreviewing()) {
            aButtonActive(this.button);
        }
    } else {
        aButtonInactive(this.button);
    }
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/preview-toggle-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/filtered-preview-button.js
/**
 * @fileOverview Contains the filtered preview button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class the filtered preview button class.
 *
 * @constructor
 * @augments PreviewButton
 *
 * @param {Object} options
 */
function FilteredPreviewButton(options) {
    Button.call(this, options);
}

FilteredPreviewButton.prototype = Object.create(PreviewButton.prototype);

/**
 * Initialize the filtered preview button.
 *
 * @returns {Element} result
 */
FilteredPreviewButton.prototype.init = function() {
    var result = PreviewButton.prototype.init.apply(this, arguments);
    this.raptor.bind('selectionChange', this.selectionChange.bind(this));
    return result;
};

/**
 * Toggles the button's disabled state.
 */
FilteredPreviewButton.prototype.selectionChange = function() {
    if (this.isEnabled()) {
        aButtonEnable(this.button);
    } else {
        aButtonDisable(this.button);
    }
};

// <strict/>


/**
 * @returns {Boolean} True if preview available and if the button is enabled, false otherwise.
 */
FilteredPreviewButton.prototype.canPreview = function() {
    return PreviewButton.prototype.canPreview.call(this) && this.isEnabled();
};

/**
 * @returns {Boolean} True if button is enabled, false otherwise.
 */
FilteredPreviewButton.prototype.isEnabled = function() {
    var range = rangeGet();
    if (range) {
        return !!this.getElement(range);
    }
    return !!this.previewing;
};

/**
 * Perform the button's action.
 */
FilteredPreviewButton.prototype.action = function() {
    selectionEachRange(function(range) {
        var element = this.getElement(range);
        if (element) {
            this.applyToElement(element);
        }
    }.bind(this));
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/filtered-preview-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/css-class-applier-button.js
/**
 * @fileOverview Contains the CSS class applier button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The CSS class applier button.
 *
 * @constructor
 * @augments PreviewToggleButton
 * @param {Object} options
 */
function CSSClassApplierButton(options) {
    PreviewToggleButton.call(this, options);
}

CSSClassApplierButton.prototype = Object.create(PreviewToggleButton.prototype);

/**
 * Applies the class from the button to a selection.
 */
CSSClassApplierButton.prototype.action = function() {
    selectionExpandToWord();
    this.raptor.selectionConstrain();
    for (var i = 0, l = this.classes.length; i < l; i++) {
        var applier = rangy.createCssClassApplier(this.options.cssPrefix + this.classes[i], {
            elementTagName: this.tag || 'span'
        });
        applier.toggleSelection();
    }
};

/**
 * Checks whether a class has been applied to a selection.
 *
 * @returns {Boolean} True if the css has been applied to the selection, false otherwise.
 */
CSSClassApplierButton.prototype.selectionToggle = function() {
    for (var i = 0, l = this.classes.length; i < l; i++) {
        var applier = rangy.createCssClassApplier(this.options.cssPrefix + this.classes[i], {
            elementTagName: this.tag || 'span'
        });
        if (!applier.isAppliedToSelection()) {
            return false;
        }
    }
    return true;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/css-class-applier-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/dialog-button.js
/**
 * @fileOverview Contains the dialog button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @type {Object} Container for Raptor dialogs.
 */
var dialogs = {};

/**
 * @class
 *
 * @constructor
 * @augments Button
 * @param {Object} options
 * @returns {DialogButton}
 */
function DialogButton(options) {
    this.state = null;
    Button.call(this, options);
}

DialogButton.prototype = Object.create(Button.prototype);

/**
 * A dialog button's action is to open a dialog, no content is modified at this
 * stage.
 */
DialogButton.prototype.action = function() {
    this.openDialog();
};

// <strict/>

/**
 * Checks the validility of a dialog.
 *
 * @param {type} dialog
 * @returns {Boolean} True if dialog is valid, false otherwise.
 */
DialogButton.prototype.validateDialog = function(dialog) {
    return true;
};

/**
 * Opens a dialog.
 *
 * @param {Object} dialog The dialog to open.
 */
DialogButton.prototype.openDialog = function() {
    this.raptor.pause();
    aDialogOpen(this.getDialog());
};

DialogButton.prototype.onDialogClose = function() {
    dialogs[this.name].instance.raptor.resume();
};

DialogButton.prototype.okButtonClick = function(event) {
    var valid = dialogs[this.name].instance.validateDialog();
    if (valid === true) {
        aDialogClose(dialogs[this.name].dialog);
        dialogs[this.name].instance.applyAction.call(dialogs[this.name].instance, dialogs[this.name].dialog);
    }
};

DialogButton.prototype.closeDialog = function() {
    aDialogClose(dialogs[this.name].dialog);
};

DialogButton.prototype.cancelButtonClick = DialogButton.prototype.closeDialog;

/**
 * Prepare and return the dialog's OK button's initialisation object.
 *
 * @param {String} name
 * @returns {Object} The initiialisation object for this dialog's OK button.
 */
DialogButton.prototype.getOkButton = function(name) {
    return {
        text: tr(name + 'DialogOKButton'),
        click: this.okButtonClick.bind(this),
        icons: {
            primary: 'ui-icon-circle-check'
        }
    };
};

/**
 * Prepare and return the dialog's cancel button's initialisation object.
 *
 * @param {String} name
 * @returns {Object} The initiialisation object for this dialog's cancel button.
 */
DialogButton.prototype.getCancelButton = function(name) {
    return {
        text: tr(name + 'DialogCancelButton'),
        click: this.cancelButtonClick.bind(this),
        icons: {
            primary: 'ui-icon-circle-close'
        }
    };
};

/**
 * Prepare and return the dialogs default options to be used in the Raptor UI.
 *
 * @param {String} name The name of the dialog to have the default options applied to it.
 * @returns {Object} the default options for the dialog.
 */
DialogButton.prototype.getDefaultDialogOptions = function(name) {
    var options = {
        modal: true,
        resizable: true,
        autoOpen: false,
        title: tr(name + 'DialogTitle'),
        dialogClass: this.options.baseClass + '-dialog ' + this.options.dialogClass,
        close: this.onDialogClose.bind(this),
        buttons: []
    };
    var okButton = this.getOkButton(name),
        cancelButton = this.getCancelButton(name);
    if (typeof okButton !== 'undefined' && okButton !== false) {
        options.buttons.push(okButton);
    }
    if (typeof cancelButton !== 'undefined' && cancelButton !== false) {
        options.buttons.push(cancelButton);
    }
    return options;
};

/**
 * Prepare and return the dialog to be used in the Raptor UI.
 *
 * @returns {Element} The dialog.
 */
DialogButton.prototype.getDialog = function() {
    if (typeof dialogs[this.name] === 'undefined') {
        dialogs[this.name] = {
            dialog: $(this.getDialogTemplate())
        };
        aDialog(dialogs[this.name].dialog, $.extend(this.getDefaultDialogOptions(this.name), this.dialogOptions));
    }
    dialogs[this.name].instance = this;
    return dialogs[this.name].dialog;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/dialog-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/dialog-toggle-button.js
/**
 * @fileOverview Contains the dialog toggle button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class
 *
 * @constructor
 * @augments DialogButton
 * @augments ToggleButton
 *
 * @param {type} options
 */
function DialogToggleButton(options) {
    DialogButton.call(this, options);
    ToggleButton.call(this, options);
}

DialogToggleButton.prototype = Object.create(DialogButton.prototype);

DialogToggleButton.prototype.init = ToggleButton.prototype.init;

DialogToggleButton.prototype.selectionChange = ToggleButton.prototype.selectionChange;
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/dialog-toggle-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/menu-button.js
/**
 * @fileOverview Contains the menu button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @constructor
 * @augments Button
 *
 * @param {Menu} menu The menu to create the menu button for.
 * @param {Object} options
 */
function MenuButton(menu, options) {
    this.menu = menu;
    this.name = menu.name;
    this.raptor = menu.raptor;
    this.options = menu.options;
    Button.call(this, options);
}

MenuButton.prototype = Object.create(Button.prototype);

/**
 * Shows the menu when button is clicked.
 *
 * @param {Event} event The click event.
 */
MenuButton.prototype.click = function(event) {
    if (this.menu.getMenu().is(':visible')) {
        $('.raptor-menu').hide();
    } else {
        this.menu.show();
    }
    event.preventDefault();
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/menu-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/menu.js
/**
 * @fileOverview Contains the menu class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class
 * @constructor
 *
 * @param {Object} options
 * @returns {Menu}
 */
function Menu(options) {
    this.menu = null;
    this.menuContent = '';
    this.button = null;
    for (var key in options) {
        this[key] = options[key];
    }
}

/**
 * Initialize the menu.
 *
 * @returns {MenuButton}
 */
Menu.prototype.init = function() {
    this.setOptions();
    var button = this.getButton().init();
    button.addClass('raptor-menu-button');
    return button;
};

/**
 * Prepare and return the menu's button Element to be used in the Raptor UI.
 *
 * @returns {MenuButton}
 */
Menu.prototype.getButton = function() {
    if (!this.button) {
        this.button = new MenuButton(this);
    }
    return this.button;
};

/**
 * Applies options to the menu.
 */
Menu.prototype.setOptions = function() {
    this.options.title = tr(this.name + 'Title');
    this.options.icon = 'ui-icon-' + this.name;
};

/**
 * Prepare and return the menu Element to be used in the Raptor UI.
 *
 * @returns {Element}
 */
Menu.prototype.getMenu = function() {
    if (!this.menu) {
        this.menu = $('<div>')
            .addClass('raptor-ui ui-menu ui-widget ui-widget-content ui-corner-all ' + this.options.baseClass + '-menu ' + this.raptor.options.baseClass + '-menu')
            .html(this.menuContent)
            .css('position', 'fixed')
            .hide()
            .mousedown(function(event) {
                // Prevent losing the selection on the editor target
                event.preventDefault();
            })
            .children()
            .appendTo('body');
    }
    return this.menu;
};

/**
 * Display menu.
 */
Menu.prototype.show = function() {
    $('.raptor-menu').hide();
    elementPositionUnder(this.getMenu().toggle(), this.getButton().getButton());
};

/**
 * Click off close event.
 *
 * @param {Event} event The click event.
 */
$('html').click(function(event) {
    if (!$(event.target).hasClass('raptor-menu-button') &&
            $(event.target).closest('.raptor-menu-button').length === 0) {
        $('.raptor-menu').hide();
    }
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/menu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/custom-menu.js
/**
 * @fileOverview Contains the custom menu class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The custom menu class.
 *
 * @constructor
 * @augments Menu
 *
 * Prepares and returns the custom menu Element to be used in the Raptor UI.
 *
 * @returns {Element}
 */
Menu.prototype.getMenu = function() {
    if (!this.menu) {
        this.menu = $('<div>')
            .addClass('raptor-ui ui-menu ui-widget ui-widget-content ui-corner-all ' + this.options.baseClass + '-menu ' + this.raptor.options.baseClass + '-menu')
            .html(this.menuContent)
            .css('position', 'fixed')
            .hide()
            .appendTo('body')
            .mousedown(function(event) {
                // Prevent losing the selection on the editor target
                event.preventDefault();
            });
    }
    return this.menu;
};

;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/custom-menu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/select-menu.js
/**
 * @fileOverview Contains the select menu class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The select menu class.
 *
 * @constructor
 * @augments Menu
 *
 * @param {Object} options
 */
function SelectMenu(options) {
    Menu.call(this, options);
}

SelectMenu.prototype = Object.create(Menu.prototype);

SelectMenu.prototype.menuItemMouseDown = function(event) {
    // Prevent losing the selection on the editor target
    event.preventDefault();
};

SelectMenu.prototype.menuItemClick = function(event) {
    aButtonSetLabel(this.button.button, $(event.target).html());
    $(this.menu).closest('ul').hide();
    // Prevent jQuery UI focusing the menu
    return false;
};

SelectMenu.prototype.menuItemMouseEnter = function(event) {
};

SelectMenu.prototype.menuItemMouseLeave = function(event) {
};

/**
 * Prepare and return the select menu Element to be used in the Raptor UI.
 *
 * @returns {Element} The select menu.
 */
SelectMenu.prototype.getMenu = function() {
    if (!this.menu) {
        this.menu = $('<ul>')
            .addClass('raptor-ui ' + this.options.baseClass + '-menu ' + this.raptor.options.baseClass + '-menu')
            .html(this.getMenuItems())
            .css('position', 'fixed')
            .hide()
            .find('a')
            .mousedown(this.menuItemMouseDown.bind(this))
            .mouseenter(this.menuItemMouseEnter.bind(this))
            .mouseleave(this.menuItemMouseLeave.bind(this))
            .click(this.menuItemClick.bind(this))
            .end()
            .appendTo('body');
        aMenu(this.menu);
    }
    return this.menu;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/components/ui/select-menu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/cancel/cancel.js
/**
 * @fileOverview Contains the cancel editing dialog code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of a cancel dialog.
 *
 * @todo needs checking and not sure what to put in for the param stuff.
 * @param {type} param
 */
Raptor.registerUi(new DialogButton({
    name: 'cancel',
    hotkey: 'esc',
    dialogOptions: {
        width: 500
    },

    action: function() {
        if (this.raptor.isDirty()) {
            DialogButton.prototype.action.call(this);
        } else {
            this.applyAction();
        }
    },

    applyAction: function() {
        this.raptor.cancelEditing();
    },

    getDialogTemplate: function() {
        return $('<div>').html(tr('cancelDialogContent'));
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/cancel/cancel.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/class-menu/class-menu.js
/**
 * @fileOverview Contains the class menu class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The select menu class.
 *
 * @constructor
 * @augments SelectMenu
 *
 * @param {Object} options
 */
function ClassMenu(options) {
    SelectMenu.call(this, {
        name: 'classMenu'
    });
}

ClassMenu.prototype = Object.create(SelectMenu.prototype);

/**
 * Initialises the class menu.
 *
 * @todo type and desc for result
 * @returns {unresolved} result
 */
ClassMenu.prototype.init = function() {
    var result = SelectMenu.prototype.init.call(this);
    if (typeof this.options.classes === 'object' &&
            Object.keys(this.options.classes).length > 0) {
        this.raptor.bind('selectionChange', this.updateButton.bind(this));
        return result;
    }
};

/**
 * Toggles a given set of classes on a selection.
 *
 * @param {Object} classes
 */
ClassMenu.prototype.changeClass = function(classes) {
    selectionToggleBlockClasses(classes, [], this.raptor.getElement());
};

/**
 * Applies the class on click.
 *
 * @param event
 */
ClassMenu.prototype.menuItemClick = function(event) {
    SelectMenu.prototype.menuItemClick.apply(this, arguments);
    this.raptor.actionApply(function() {
        this.changeClass([$(event.currentTarget).data('value')]);
    }.bind(this));
};

/**
 * Puts the selection into preview mode for the chosen class.
 *
 * @param event The mouse event which triggered the preview.
 */
ClassMenu.prototype.menuItemMouseEnter = function(event) {
    this.raptor.actionPreview(function() {
        this.changeClass([$(event.currentTarget).data('value')]);
    }.bind(this));
};

/**
 * Restores the selection from preview mode.
 *
 * @param event
 */
ClassMenu.prototype.menuItemMouseLeave = function(event) {
    this.raptor.actionPreviewRestore();
};
 /**
  * Updates the class menu button.
  */
ClassMenu.prototype.updateButton = function() {
};

//ClassMenu.prototype.getButton = function() {
//    if (!this.button) {
//        this.button = new Button({
//            name: this.name,
//            action: this.show.bind(this),
//            preview: false,
//            options: this.options,
//            icon: false,
//            text: 'Class Selector',
//            raptor: this.raptor
//        });
//    }
//    return this.button;
//};

/**
 * Prepare and return the menu items to be used in the Raptor UI.
 * @returns {Object} The menu items.
 */
ClassMenu.prototype.getMenuItems = function() {
    var items = '';
    for (var label in this.options.classes) {
        items += this.raptor.getTemplate('class-menu.item', {
            label: label,
            value: this.options.classes[label]
        });
    }
    return items;
};

Raptor.registerUi(new ClassMenu());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/class-menu/class-menu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/clean-block/clean-block.js
/**
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */

Raptor.registerUi(new PreviewButton({
    name: 'cleanBlock',
    action: function() {
        var element = this.raptor.getElement();
        cleanRemoveAttributes(element, [
            'style'
        ]);
        cleanRemoveElements(element, [
            'font',
            'span:not([class])',
            '.cms-color:has(.cms-color)',
            ':header strong',
            ':header b',
            ':header strong'
        ]);
        cleanEmptyElements(element, [
            'b',
            'big',
            'em',
            'i',
            'small',
            'span',
            'strong',
            ':not(:visible)'
        ]);
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/clean-block/clean-block.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/clear-formatting/clear-formatting.js
/**
 * @fileOverview Contains the clear formatting button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the preview button that clears the
 * formatting on a selection.
 */
Raptor.registerUi(new PreviewButton({
    name: 'clearFormatting',
    action: function() {
        selectionClearFormatting(this.raptor.getElement().get(0));
        cleanEmptyElements(this.raptor.getElement(), [
            'a', 'b', 'i', 'sub', 'sup', 'strong', 'em', 'big', 'small', 'p'
        ]);
        cleanWrapTextNodes(this.raptor.getElement()[0], 'p');
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/clear-formatting/clear-formatting.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/click-button-to-edit/click-button-to-edit.js
/**
 * @fileOverview Contains the click button to edit code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */
Raptor.registerUi(new Button({
    name: 'clickButtonToEdit',
    action: function() {
        this.raptor.enableEditing();
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/click-button-to-edit/click-button-to-edit.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/close/close.js
/**
 * @fileOverview Contains the close panel code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */
Raptor.registerUi(new Button({
    name: 'close',

    click: function() {
        this.layout.close();
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/close/close.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/color-menu-basic/color-menu-basic.js
/**
 * @fileOverview Contains the basic colour menu class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author  David Neilsen <david@panmedia.co.nz>
 * @author  Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The basic colour menu class.
 *
 * @constructor
 * @augments SelectMenu
 *
 * @param {Object} options
 */
function ColorMenuBasic(options) {
    this.options = {
        colors: {
            white: '#ffffff',
            black: '#000000',
            grey: '#999',
            blue: '#4f81bd',
            red: '#c0504d',
            green: '#9bbb59',
            purple: '#8064a2',
            orange: '#f79646'
        }
    };
    /**
     * Cache the current color so it can be reapplied to the button if the user
     * clicks the button to open the menu, hovers some colors then clicks off to
     * close it.
     *
     * @type {String}
     */
    this.currentColor = 'automatic';
    SelectMenu.call(this, {
        name: 'colorMenuBasic'
    });
}

ColorMenuBasic.prototype = Object.create(SelectMenu.prototype);

/**
 * Initialize the basic colour menu.
 *
 * @returns {Element}
 */
ColorMenuBasic.prototype.init = function() {
    this.raptor.bind('selectionChange', this.updateButton.bind(this));
    this.updateButton();
    return SelectMenu.prototype.init.apply(this, arguments);
};

/**
 * Updates the basic colour menu with the current colour.
 */
ColorMenuBasic.prototype.updateButton = function() {
    var tag = selectionGetElements()[0],
        button = this.getButton().getButton(),
        color = null,
        closest = null;

    // TODO: set automatic icon color to the color of the text
    aButtonSetLabel(button, tr('colorMenuBasicAutomatic'));
    aButtonSetIcon(button, false);
    if (!tag) {
        return;
    }
    tag = $(tag);
    for (var label in this.options.colors) {
        closest = $(tag).closest('.' + this.options.cssPrefix + label);
        if (closest.length) {
            color = label;
            break;
        }
    }
    if (color) {
        aButtonSetLabel(button, tr('colorMenuBasic' + stringToCamelCase(color)));
        aButtonSetIcon(button, 'ui-icon-swatch');
        // FIXME: set color in an adapter friendly way
        button.find('.ui-icon').css('background-color', closest.css('color'));
        return;
    }
};

/**
 * Changes the colour of the selection.
 *
 * @param {type} color The current colour.
 */
ColorMenuBasic.prototype.changeColor = function(color, permanent) {
    if (permanent) {
        this.currentColor = color;
    }
    this.raptor.actionApply(function() {
        selectionExpandToWord();
        if (color === 'automatic') {
            selectionGetElements().parents('.' + this.options.cssPrefix + 'color').addBack().each(function() {
                var classes = $(this).attr('class');
                if (classes === null || typeof classes === 'undefined') {
                    return;
                }
                classes = classes.match(/(cms-(.*?))( |$)/ig);
                if (classes === null || typeof classes === 'undefined') {
                    return;
                }
                for (var i = 0, l = classes.length; i < l; i++) {
                    $(this).removeClass(classes[i].trim());
                    if (!$(this).attr('class').trim()) {
                        $(this).contents().unwrap();
                    }
                }
            });
        } else {
            var uniqueId = elementUniqueId();
            selectionToggleWrapper('span', {
                classes: this.options.cssPrefix + 'color ' + this.options.cssPrefix + color,
                attributes: {
                    id: uniqueId
                }
            });
            var element = $('#' + uniqueId);
            if (element.length) {
                selectionSelectInner(element.removeAttr('id').get(0));
                var splitNode;
                do {
                    splitNode = $('#' + uniqueId);
                    splitNode.removeAttr('id');
                } while (splitNode.length);
            }
        }
        cleanRemoveElements(this.raptor.getElement(), [
            '.cms-color:has(.cms-color)'
        ]);
    }.bind(this));
};

/**
 * The preview state for the basic colour menu.
 *
 * @param event The mouse event which triggered the preview.
 */
ColorMenuBasic.prototype.menuItemMouseEnter = function(event) {
    this.raptor.actionPreview(function() {
        this.changeColor($(event.currentTarget).data('color'));
    }.bind(this));
};

/**
 * Restores the selection from the preview.
 *
 * @param event
 */
ColorMenuBasic.prototype.menuItemMouseLeave = function(event) {
    this.raptor.actionPreviewRestore();
};

/**
 * Applies the colour change to the selection.
 *
 * @param event The mouse event to trigger the application of the colour.
 */
ColorMenuBasic.prototype.menuItemClick = function(event) {
    SelectMenu.prototype.menuItemClick.apply(this, arguments);
    this.raptor.actionApply(function() {
        this.changeColor($(event.currentTarget).data('color'), true);
    }.bind(this));
};

/**
 * Prepare and return the menu items to be used in the Raptor UI.
 * @returns {Element} The menu items.
 */
ColorMenuBasic.prototype.getMenuItems = function() {
    var template = this.raptor.getTemplate('color-menu-basic.automatic', this.options);
    for (var label in this.options.colors) {
        template += this.raptor.getTemplate('color-menu-basic.item', {
            color: this.options.colors[label],
            label: tr('colorMenuBasic' + stringToCamelCase(label)),
            className: label,
            baseClass: this.options.baseClass
        });
    }
    return template;
};

Raptor.registerUi(new ColorMenuBasic());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/color-menu-basic/color-menu-basic.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/dock/dock-plugin.js
/**
 * @fileOverview Contains the dock plugin class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The dock plugin class.
 *
 * @constructor
 * @augments RaptorPlugin
 *
 * @param {String} name
 * @param {Object} overrides
 */
function DockPlugin(name, overrides) {
    this.options = {
        dockToElement: false,
        docked: false,
        position: 'top',
        spacer: true,
        persist: true,
        dockTo: null
    };
    this.dockState = false;
    this.marker = false;

    RaptorPlugin.call(this, name || 'dock', overrides);
}

DockPlugin.prototype = Object.create(RaptorPlugin.prototype);

/**
 * Initialize the dock plugin.
 */
DockPlugin.prototype.init = function() {
    var docked;
    if (this.options.persist) {
        docked = this.raptor.persist('docked');
    }
    if (typeof docked === 'undefined') {
        docked = this.options.docked;
    }
    if (typeof docked === 'undefined') {
        docked = false;
    }
    if (docked) {
        this.raptor.bind('toolbarReady', function() {
            if (docked) {
                this.toggleState();
            }
        }.bind(this));
        this.raptor.bind('toolbarHide', function() {
            if (this.dockState && this.dockState.spacer) {
                this.dockState.spacer.addClass(this.options.baseClass + '-hidden');
                this.dockState.spacer.removeClass(this.options.baseClass + '-visible');
            }
        }.bind(this));
        this.raptor.bind('toolbarShow', function() {
            if (this.dockState && this.dockState.spacer) {
                this.dockState.spacer.removeClass(this.options.baseClass + '-hidden');
                this.dockState.spacer.addClass(this.options.baseClass + '-visible');
            }
        }.bind(this));
        this.raptor.bind('toolbarDestroy', function() {
            if (this.dockState && this.dockState.spacer) {
                this.dockState.spacer.remove();
            }
        }.bind(this));
    }
};

/**
 * Switch between docked / undocked, depending on options.
 *
 * @return {Object} Resulting dock state
 */
DockPlugin.prototype.toggleState = function() {
    if (this.options.dockToElement) {
        return this.toggleDockToElement();
    }
    return this.toggleDockToScreen();
};

/**
 * Gets the dock state on toggle dock to element.
 *
 * @return {Object} Resulting dock state
 */
DockPlugin.prototype.toggleDockToElement = function() {
    if (this.dockState) {
        if (typeof this.dockState.dockedTo !== 'undefined') {
            this.undockFromElement();
        } else {
            this.undockFromScreen();
            this.dockToElement();
        }
    } else {
        this.dockToElement();
    }
};

/**
 * Gets the dock state on dock to element.
 *
 * @return {Object} Resulting dock state
 */
DockPlugin.prototype.dockToElement = function() {
    var element = this.options.dockTo ? $(this.options.dockTo) : this.raptor.getElement(),
        layoutElement = this.raptor.getLayout('toolbar').getElement();
    this.marker = $('<marker>').addClass(this.options.baseClass + '-marker').insertAfter(layoutElement);
    layoutElement.addClass(this.options.baseClass + '-docked-to-element');
    this.dockState = dockToElement(layoutElement, element, {
        position: this.options.position,
        spacer: false,
        wrapperClass: this.options.baseClass + '-inline-wrapper'
    });
    this.activateButton(this.raptor.getPlugin('dockToElement'));
    this.raptor.persist('docked', true);
};

/**
 * Gets the dock state on undocking from an element.
 *
 * @return {Object} Resulting dock state
 */
DockPlugin.prototype.undockFromElement = function() {
    this.marker.replaceWith(undockFromElement(this.dockState));
    this.dockState = null;
    this.raptor.getLayout('toolbar').getElement().removeClass(this.options.baseClass + '-docked-to-element');
    this.deactivateButton(this.raptor.getPlugin('dockToElement'));
    this.raptor.persist('docked', false);
};

/**
 * Gets the dock state on toggle dock to screen.
 *
 * @return {Object} Resulting dock state
 */
DockPlugin.prototype.toggleDockToScreen = function() {
    if (this.dockState) {
        if (typeof this.dockState.dockedTo !== 'undefined') {
            this.undockFromElement();
            this.dockToScreen();
        } else {
            this.undockFromScreen();
        }
    } else {
        this.dockToScreen();
    }
};

/**
 * Gets the dock state on dock to screen.
 *
 * @return {Object} Resulting dock state
 */
DockPlugin.prototype.dockToScreen = function() {
    if (!this.dockState) {
        var layout = this.raptor.getLayout('toolbar');
        if (layout.isReady()) {
            var layoutElement = layout.getElement();
            this.marker = $('<marker>').addClass(this.options.baseClass + '-marker')
                                .insertAfter(layoutElement);
            layoutElement.addClass(this.options.baseClass + '-docked');
            layout.disableDragging();
            this.dockState = dockToScreen(layoutElement, {
                position: this.options.position,
                spacer: this.options.spacer,
                under: this.options.under
            });
            if (!layout.isVisible()) {
                this.dockState.spacer.removeClass(this.options.baseClass + '-visible');
                this.dockState.spacer.addClass(this.options.baseClass + '-hidden');
            }
            this.activateButton(this.raptor.getPlugin('dockToScreen'));
            this.raptor.persist('docked', true);
        }
    }
};

/**
 * Gets the dock state on undocking from the screen.
 *
 * @return {Object} Resulting dock state
 */
DockPlugin.prototype.undockFromScreen = function() {
    if (this.dockState) {
        var layout = this.raptor.getLayout('toolbar'),
            layoutElement = undockFromScreen(this.dockState);
        this.marker.replaceWith(layoutElement);
        layout.enableDragging();
        layout.constrainPosition();
        this.dockState = null;
        layoutElement.removeClass(this.options.baseClass + '-docked');
        this.deactivateButton(this.raptor.getPlugin('dockToScreen'));
        this.raptor.persist('docked', false);
    }
};

DockPlugin.prototype.deactivateButton = function(ui) {
    if (typeof ui !== 'undefined' &&
            typeof ui.button !== 'undefined') {
        aButtonInactive(ui.button);
    }
};

DockPlugin.prototype.activateButton = function(ui) {
    if (typeof ui !== 'undefined' &&
            typeof ui.button !== 'undefined') {
        aButtonActive(ui.button);
    }
};

Raptor.registerPlugin(new DockPlugin());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/dock/dock-plugin.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/dock/dock-to-screen.js
/**
 * @fileOverview Contains the dock to screen button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the dock to screen button for use in the Raptor UI.
 *
 * @todo des and type for the param.
 * @param {type} param
 */
Raptor.registerUi(new Button({
    name: 'dockToScreen',
    action: function() {
        this.raptor.unify(function(raptor) {
            raptor.plugins.dock.toggleDockToScreen();
        });
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/dock/dock-to-screen.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/dock/dock-to-element.js
/**
 * @fileOverview Contains the dock to element button code.
 * @author  David Neilsen <david@panmedia.co.nz>
 * @author  Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the dock to element button for use in the raptor UI.
 *
 * @todo not sure how to document this one.
 * @param {type} param
 */
Raptor.registerUi(new Button({
    name: 'dockToElement',
    action: function() {
        this.raptor.unify(function(raptor) {
            raptor.plugins.dock.toggleDockToElement();
        });
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/dock/dock-to-element.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/embed/embed.js
/**
 * @fileOverview Contains the embed dialog button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an intance of the embed dialog for use in the Raptor UI.
 *
 * @todo des and type for the param.
 * @param {type} param
 */
Raptor.registerUi(new DialogButton({
    name: 'embed',
    state: null,
    dialogOptions: {
        width: 600,
        height: 400
    },

    /**
     * Replace selection with embed textarea content.
     *
     * @param  {Element} dialog
     */
    applyAction: function(dialog) {
        this.raptor.actionApply(function() {
            selectionReplace(dialog.find('textarea').val());
        });
    },

    /**
     * Create and prepare the embed dialog template.
     *
     * @return {Element}
     */
    getDialogTemplate: function() {
        var template = $('<div>').html(this.raptor.getTemplate('embed.dialog', this.options));

        template.find('textarea').change(function(event) {
            template.find('.' + this.options.baseClass + '-preview').html($(event.target).val());
        }.bind(this));

        // Create fake jQuery UI tabs (to prevent hash changes)
        var tabs = template.find('.' + this.options.baseClass + '-panel-tabs');
        tabs.find('li')
            .click(function() {
                tabs.find('ul li').removeClass('ui-state-active').removeClass('ui-tabs-selected');
                $(this).addClass('ui-state-active').addClass('ui-tabs-selected');
                tabs.children('div').hide().eq($(this).index()).show();
            });
        return template;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/embed/embed.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/float/float-left.js
/**
 * @fileOverview Contains the float left button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of a filtered preview button to float an image left.
 *
 * @todo des and type for the param.
 * @param {type} param
 */
Raptor.registerUi(new FilteredPreviewButton({
    name: 'floatLeft',
    applyToElement: function(element) {
        element.removeClass(this.options.cssPrefix + 'float-right');
        element.toggleClass(this.options.cssPrefix + 'float-left');
        cleanEmptyAttributes(element, ['class']);
    },
    getElement: function(range) {
        var images = $(range.commonAncestorContainer).find('img');
        return images.length ? images : null;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/float/float-left.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/float/float-none.js
/**
 * @fileOverview Contains the float none button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of a filtered preview button to remove the float an image.
 *
 * @todo des and type for the param.
 * @param {type} param
 */
Raptor.registerUi(new FilteredPreviewButton({
    name: 'floatNone',
    applyToElement: function(element) {
        element.removeClass(this.options.cssPrefix + 'float-right');
        element.removeClass(this.options.cssPrefix + 'float-left');
        cleanEmptyAttributes(element, ['class']);
    },
    getElement: function(range) {
        var images = $(range.commonAncestorContainer).find('img');
        return images.length ? images : null;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/float/float-none.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/float/float-right.js
/**
 * @fileOverview Contains the float right button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of a filtered preview button to float an image right.
 *
 * @todo des and type for the param.
 * @param {type} param
 */
Raptor.registerUi(new FilteredPreviewButton({
    name: 'floatRight',
    applyToElement: function(element) {
        element.removeClass(this.options.cssPrefix + 'float-left');
        element.toggleClass(this.options.cssPrefix + 'float-right');
        cleanEmptyAttributes(element, ['class']);
    },
    getElement: function(range) {
        var images = $(range.commonAncestorContainer).find('img');
        return images.length ? images : null;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/float/float-right.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/font-family/font-family.js
/**
 * @fileOverview Contains the basic font-family class code.
 * 
 * @author Nikolay Rodionov <rodi.incave@gmail.com>
 * @author David Neilsen <david@panmedia.co.nz>
 */

/**
 * The basic font-family class.
 *
 * @constructor
 * @augments SelectMenu
 *
 * @param {Object} options
 */
function FontFamilyMenu(options) {
    this.options= {
        fonts: [
            'arial',
            'palatino',
            'georgia',
            'times',
            'comic-sans',
            'impact',
            'courier'
        ]
    };
    
    SelectMenu.call(this, {
        name: 'fontFamilyMenu'
    });
}

FontFamilyMenu.prototype = Object.create(SelectMenu.prototype);

/**
 * Initialize the basic font menu.
 *
 * @returns {Element}
 */
FontFamilyMenu.prototype.init = function() {
    this.raptor.bind('selectionChange', this.updateButton.bind(this));
    this.updateButton();
    return SelectMenu.prototype.init.apply(this, arguments);
};

/**
 * Updates the basic font menu with the current font.
 */
FontFamilyMenu.prototype.updateButton = function() {
    var tag = selectionGetElements()[0],
        button = this.getButton().getButton(),
        font = null,
        closest = null;

    aButtonSetLabel(button, tr('fontFamilyMenuFontDefault'));
    aButtonSetIcon(button, false);
    if (!tag) {
        return;
    }
    
    for (var fontsIndex = 0; fontsIndex < this.options.fonts.length; fontsIndex++) {
        closest = $(tag).closest('.' + this.options.cssPrefix + 'font-' + this.options.fonts[fontsIndex]);
        if (closest.length) {
            font = this.options.fonts[fontsIndex];
            break;
        }
    }
    
    if (font) {
        aButtonSetLabel(button, this.getMenu().find('[data-font="' + font + '"]').text());
        return;
    }
};

/**
 * Changes the font-family of the selection.
 *
 * @param {type} font The current font.
 */
FontFamilyMenu.prototype.changeFont = function(font) {
    selectionExpandToWord();
    if (font === 'default') {
        selectionGetElements().parents('.' + this.options.cssPrefix + 'font').addBack().each(function() {
            var classes = $(this).attr('class');
            if (classes === null || typeof classes === 'undefined') {
                return;
            }
            classes = classes.match(/(cms-font-(.*?))( |$)/ig);
            if (classes === null || typeof classes === 'undefined') {
                return;
            }
            for (var i = 0, l = classes.length; i < l; i++) {
                $(this).removeClass($.trim(classes[i]));
            }
        });
    } else {
        var uniqueId = elementUniqueId();
        selectionToggleWrapper('span', {
            classes: this.options.classes || this.options.cssPrefix + 'font ' + this.options.cssPrefix + 'font-' + font,
            attributes: {
                id: uniqueId
            }
        });
        var element = $('#' + uniqueId);
        if (element.length) {
            selectionSelectInner(element.removeAttr('id').get(0));
            var splitNode;
            do {
                splitNode = $('#' + uniqueId);
                splitNode.removeAttr('id');
            } while (splitNode.length);
        }
    }
};

/**
 * The preview state for the basic font menu.
 *
 * @param event The mouse event which triggered the preview.
 */
FontFamilyMenu.prototype.menuItemMouseEnter = function(event) {
    this.raptor.actionPreview(function() {
        this.changeFont($(event.currentTarget).data('font'));
    }.bind(this));
};

/**
 * Restores the selection from the preview.
 *
 * @param event
 */
FontFamilyMenu.prototype.menuItemMouseLeave = function(event) {
    this.raptor.actionPreviewRestore();
};

/**
 * Applies the font change to the selection.
 *
 * @param event The mouse event to trigger the application of the font.
 */
FontFamilyMenu.prototype.menuItemClick = function(event) {
    SelectMenu.prototype.menuItemClick.apply(this, arguments);
    this.raptor.actionApply(function() {
        this.changeFont($(event.currentTarget).data('font'));
    }.bind(this));
};

/**
 * Prepare and return the menu items to be used in the Raptor UI.
 * @returns {Element} The menu items.
 */
FontFamilyMenu.prototype.getMenuItems = function() {
    var items = this.raptor.getTemplate('font-family.menu-item', {
        fontName: 'default',
        fontTitle: tr('fontFamilyMenuFontDefault')
    });
    for (var i = 0, l = this.options.fonts.length; i < l; i++) {
        items += this.raptor.getTemplate('font-family.menu-item', {
            fontName: this.options.fonts[i],
            fontTitle: tr(('fontFamilyMenuFont-' + this.options.fonts[i]).replace(/-([a-z])/g, function (matches) {
                return matches[1].toUpperCase()
            }))
        });
    }
    return items;
};

Raptor.registerUi(new FontFamilyMenu());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/font-family/font-family.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/guides/guides.js
/**
 * @fileOverview Contains the guides button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of a preview button to show the guides of the elements.
 *
 * @todo des and type for the param.
 * @param {type} param
 */
Raptor.registerUi(new PreviewButton({
    name: 'guides',

    action: function() {
        this.raptor.getElement().toggleClass(this.getClassName());
        this.updateButtonState();
    },

    updateButtonState: function() {
        if (this.raptor.getElement().hasClass(this.getClassName())) {
            aButtonActive(this.button);
        } else {
            aButtonInactive(this.button);
        }
    },

    init: function() {
        this.raptor.bind('cancel', this.removeClass.bind(this));
        this.raptor.bind('saved', this.removeClass.bind(this));
        return PreviewButton.prototype.init.call(this);
    },

    removeClass: function() {
        this.raptor.getElement().removeClass(this.getClassName());
    },

    getClassName: function() {
        return this.options.baseClass + '-visible';
    },

    mouseEnter: function() {
        PreviewButton.prototype.mouseEnter.call(this);
        this.updateButtonState();
    },

    mouseLeave: function() {
        PreviewButton.prototype.mouseLeave.call(this);
        this.updateButtonState();
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/guides/guides.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/history/history-redo.js
/**
 * @fileOverview Contains the history redo code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the button class to redo an action.
 *
 * @todo param details?
 * @param {type} param
 */
Raptor.registerUi(new Button({
    name: 'historyRedo',
    hotkey: ['ctrl+y', 'ctrl+shift+z'],

    action: function() {
        this.raptor.historyForward();
    },

    init: function () {
        this.raptor.bind('historyChange', this.historyChange.bind(this));
        Button.prototype.init.apply(this, arguments);
        aButtonDisable(this.button);
        return this.button;
    },

    historyChange: function() {
        if (this.raptor.present < this.raptor.history.length - 1) {
            aButtonEnable(this.button);
        } else {
            aButtonDisable(this.button);
        }
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/history/history-redo.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/history/history-undo.js
/**
 * @fileOverview Contains the history undo code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the button class to undo an action.
 *
 * @todo param details?
 * @param {type} param
 */
Raptor.registerUi(new Button({
    name: 'historyUndo',
    hotkey: 'ctrl+z',

    action: function() {
        this.raptor.historyBack();
    },

    init: function () {
        this.raptor.bind('historyChange', this.historyChange.bind(this));
        Button.prototype.init.apply(this, arguments);
        aButtonDisable(this.button);
        return this.button;
    },

    historyChange: function() {
        if (this.raptor.present === 0) {
            aButtonDisable(this.button);
        } else {
            aButtonEnable(this.button);
        }
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/history/history-undo.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/hr/hr-create.js
/**
 * @fileOverview Contains the hr button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the preview button to insert a hr at the selection.
 *
 * @todo param details?
 * @param {type} param
 */
Raptor.registerUi(new PreviewButton({
    name: 'hrCreate',
    action: function() {
        selectionReplace('<hr/>');
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/hr/hr-create.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/image-resize/image-resize.js
/**
 * @fileOverview Contains the image resize button code.
 * @author David Neilsen <david@panmedia.co.nz>
 */
Raptor.registerUi(new DialogButton({
    name: 'imageResize',
    proportional: true,
    image: null,
    dialogOptions: {
        width: 450
    },

    action: function() {
        var dialog = this.getDialog();
        this.image = nodeUniqueId(this.layout.target);
        this.originalWidth = this.layout.target.width;
        this.originalHeight = this.layout.target.height;
        dialog.find('[name=width]').val(this.layout.target.width),
        dialog.find('[name=height]').val(this.layout.target.height);
        this.openDialog();
    },

    applyAction: function() {
        var dialog = this.getDialog(),
            width = dialog.find('[name=width]').val(),
            height = dialog.find('[name=height]').val();
        this.raptor.actionApply(function() {
            $('#' + this.image)
                .css({
                    width: width,
                    height: height
                })
                .attr('width', width)
                .attr('height', height);
            selectionSelectOuter($('#' + this.image)[0]);
        }.bind(this));
    },

    getDialogTemplate: function() {
        var template = $('<div>').html(this.raptor.getTemplate('image-resize.dialog', this.options)),
            plugin = this;
        template.find('.' + this.options.baseClass + '-lock-proportions')
            .hover(function() {
                $(this).addClass('ui-state-hover');
            }, function() {
                $(this).removeClass('ui-state-hover');
            })
            .click(function() {
                dialogs[plugin.name].instance.proportional = !dialogs[plugin.name].instance.proportional;
                $(this)
                    .find('.ui-icon')
                    .toggleClass('ui-icon-locked', plugin.proportional)
                    .toggleClass('ui-icon-unlocked', !plugin.proportional);
            });

        var widthInput = template.find('[name=width]'),
            heightInput = template.find('[name=height]');

        widthInput.on('input.raptor', function() {
            var value = parseInt($(this).val());
            if (!isNaN(value)) {
                if (dialogs[plugin.name].instance.proportional) {
                    heightInput.val(Math.round(Math.abs(dialogs[plugin.name].instance.originalHeight / dialogs[plugin.name].instance.originalWidth * value)));
                }
            }
        });

        heightInput.on('input.raptor', function() {
            var value = parseInt($(this).val());
            if (!isNaN(value)) {
                if (dialogs[plugin.name].instance.proportional) {
                    widthInput.val(Math.round(Math.abs(dialogs[plugin.name].instance.originalWidth / dialogs[plugin.name].instance.originalHeight * value)));
                }
            }
        });

        return template;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/image-resize/image-resize.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/image-swap/image-swap.js
/**
 * @fileOverview Contains the image swap button code.
 * @author David Neilsen <david@panmedia.co.nz>
 */
Raptor.registerUi(new Button({
    name: 'imageSwap',
    chooser: null,
    click: function() {
        selectionSelectOuter(this.layout.target);
        this.raptor.getPlugin(this.options.chooser).action(this.layout.target);
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/image-swap/image-swap.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/insert-file/insert-file.js
/**
 * @fileOverview Contains the insert file button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the button class to allow the insertation of files.
 *
 * @todo param details?
 * @param {type} param
 */
Raptor.registerUi(new DialogButton({
    name: 'insertFile',
    state: false,
    /** @type {string[]} Image extensions*/
    imageTypes: [
        'jpeg',
        'jpg',
        'png',
        'gif'
    ],
    options: {

        /**
         * Save the current state, show the insert file dialog or file manager.
         *
         * @type {null|Function} Specify a function to use instead of the default
         *                       file insertion dialog.
         * @return {Boolean} False to indicate that custom action failed and the
         *                         default dialog should be used.
         */
        customAction: false
    },

    /**
     * Open the insert file dialog or file manager.
     */
    action: function(target) {
        // If a customAction has been specified, use it instead of the default dialog.
        if (!this.options.customAction || this.options.customAction.call(this, target) === false) {
            if (typeof target !== 'undefined') {
                this.getDialog().find('[name=location]').val(target.getAttribute('src') || target.getAttribute('href'));
                this.getDialog().find('[name=name]').val(target.innerHTML);
            } else {
                this.getDialog().find('[name=location]').val('');
                this.getDialog().find('[name=name]').val('');
            }
            return this.openDialog();
        }
    },

    applyAction: function() {
        var dialog = this.getDialog(),
            location = dialog.find('[name=location]').val(),
            name = dialog.find('[name=name]').val();
        this.raptor.actionApply(function() {
            this.insertFiles([{
                location: location,
                name: name
            }]);
        }.bind(this));
    },

    getDialogTemplate: function() {
        return $(this.raptor.getTemplate('insert-file.dialog'));
    },

    /**
     * Attempt to determine the file type from either the file's explicitly set
     * extension property, or the file extension of the file's location property.
     *
     * @param  {Object} file
     * @return {string}
     */
    getFileType: function(file) {
        if (typeof file.extension !== 'undefined') {
            return file.extension.toLowerCase();
        }
        var extension = file.location.split('.');
        if (extension.length > 0) {
            return extension.pop().toLowerCase();
        }
        return 'unknown';
    },

    /**
     * @param  {Object} file
     * @return {Boolean} True if the file is an image.
     */
    isImage: function(file) {
        return $.inArray(this.getFileType(file), this.imageTypes) !== -1;
    },

    /**
     * Insert the given files. If files contains only one item, it is inserted
     * with selectionReplaceWithinValidTags using an appropriate valid tag array
     * for the file's type. If files contains more than one item, the items are
     * processed into an array of HTML strings, joined then inserted using
     * selectionReplaceWithinValidTags with a valid tag array of tags that may
     * contain both image and anchor tags.
     *
     * [
     *     {
     *         location: location of the file, e.g. http://www.raptor-editor.com/images/html5.png
     *         name: a name for the file, e.g. HTML5 Logo
     *         extension: explicitly defined extension for the file, e.g. png
     *     }
     * ]
     *
     * @param  {Object[]} files Array of files to be inserted.
     */
    insertFiles: function(files) {
        this.raptor.resume();
        if (!files.length) {
            return;
        }
        this.raptor.actionApply(function() {
            if (files.length === 1) {
                if ((this.isImage(files[0]) && $(selectionGetHtml()).is('img')) || selectionIsEmpty()) {
                    this.replaceFiles(files);
                } else {
                    this.linkFiles(files);
                }
            } else {
                this.linkFiles(files);
            }
        }.bind(this));
    },

    linkFiles: function(files) {
        selectionExpandTo('a', this.raptor.getElement());
        selectionTrim();
        var applier = rangy.createApplier({
            tag: 'a',
            attributes: {
                href: files[0].location.replace(/([^:])\/\//g, '$1/'),
                title: files[0].name,
                'class': this.options.cssPrefix + 'file ' + this.options.cssPrefix + this.getFileType(files[0])
            }
        });
        applier.applyToSelection();
    },

    replaceFiles: function(files) {
        var elements = [];
        for (var fileIndex = 0; fileIndex < files.length; fileIndex++) {
            elements.push(this.prepareElement(files[fileIndex]));
        }
        selectionReplace(elements.join(', '));
    },

    /**
     * Prepare the HTML for either an image or an anchor tag, depending on the file's type.
     *
     * @param {Object} file
     * @param {string|null} text The text to use as the tag's title and an anchor
     *                           tag's HTML. If null, the file's name is used.
     * @return {string} The tag's HTML.
     */
    prepareElement: function(file, text) {
        if (this.isImage(file)) {
            return this.prepareImage(file, this.options.cssPrefix + this.getFileType(file), text);
        } else {
            return this.prepareAnchor(file, this.options.cssPrefix + 'file ' + this.options.cssPrefix + this.getFileType(file), text);
        }
    },

    /**
     * Prepare HTML for an image tag.
     *
     * @param  {Object} file
     * @param  {string} classNames Classnames to apply to the image tag.
     * @param  {string|null} text Text to use as the image tag's title. If null,
     *                            the file's name is used.
     * @return {string} Image tag's HTML.
     */
    prepareImage: function(file, classNames, text) {
        return $('<div/>').html($('<img/>').attr({
            src: file.location.replace(/([^:])\/\//g, '$1/'),
            title: text || file.name,
            'class': classNames
        })).html();
    },

    /**
     * Prepare HTML for an anchor tag.
     *
     * @param  {Object} file
     * @param  {string} classNames Classnames to apply to the anchor tag.
     * @param  {string|null} text Text to use as the anchor tag's title & content. If null,
     *                            the file's name is used.
     * @return {string} Anchor tag's HTML.
     */
    prepareAnchor: function(file, classNames, text) {
        return $('<div/>').html($('<a/>').attr({
            href: file.location.replace(/([^:])\/\//g, '$1/'),
            title: file.name,
            'class': classNames
        }).html(text || file.name)).html();
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/insert-file/insert-file.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/language-menu/language-menu.js
/**
 * @fileOverview Contains the insert file button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The language menu class.
 *
 * @constructor
 * @augments SelectMenu
 *
 * @param {Object} options
 */
function LanguageMenu(options) {
    this.options = {
        persist: true
    };
    SelectMenu.call(this, {
        name: 'languageMenu'
    });
}

LanguageMenu.prototype = Object.create(SelectMenu.prototype);

/**
 * Initialize the language menu.
 *
 * @return {Element}
 */
LanguageMenu.prototype.init = function() {
    var result = Menu.prototype.init.call(this);
    aButtonSetLabel(this.button.button, localeNames[currentLocale]);
    aButtonSetIcon(this.button.button, 'ui-icon-flag-' + currentLocale.toLowerCase());
    return result;
};

/**
 * Change the editor's language to the current selection.
 *
 * @param {Event} event
 */
LanguageMenu.prototype.menuItemClick = function(event) {
    var locale = $(event.currentTarget).data('value');
    if (this.options.persist) {
        Raptor.persist('locale', locale);
    }
    setTimeout(function() {
        setLocale(locale);
    }, 1);
};

/**
 * @return {jQuery}
 */
LanguageMenu.prototype.getMenuItems = function() {
    var items = '';
    for (var locale in locales) {
        items += this.raptor.getTemplate('language-menu.item', {
            label: localeNames[locale],
            value: locale,
            icon: locale.toLowerCase()
        });
    }
    return items;
};

Raptor.registerUi(new LanguageMenu());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/language-menu/language-menu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-create.js
/**
 * Create link plugin.
 *
 * @plugin {DialogToggleButton} linkCreate
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */
var linkMenu,
    linkTypes,
    linkContent,
    linkAttributes;

Raptor.registerUi(new DialogToggleButton({
    name: 'linkCreate',

    options: {
        /**
         * Reset the UI when opening the dialog for a second time.
         * If set to false the previous user input is retained.
         * @option {boolean} resetUi
         */
        resetUi: false
    },

    dialogOptions: {
        width: 850
    },

    applyAction: function() {
        this.raptor.actionApply(function() {
            if (!linkAttributes || linkAttributes.href.trim() === '') {
                return;
            }

            // Update
            var range = window.getSelection().getRangeAt(0);
            if (range.commonAncestorContainer.tagName === 'A') {
                for (var linkAttribute in linkAttributes) {
                    range.commonAncestorContainer.setAttribute(linkAttribute, linkAttributes[linkAttribute]);
                }
                return;
            }

            // Create
            selectionExpandToWord();
            selectionExpandTo('a', this.raptor.getElement());
            selectionTrim();
            var applier = rangy.createApplier({
                tag: 'a',
                attributes: linkAttributes
            });
            applier.applyToSelection();
            cleanEmptyElements(this.raptor.getElement(), ['a']);
        }.bind(this));
    },

    getDialog: function() {
        var dialog = DialogToggleButton.prototype.getDialog.call(this);
        var element = selectionGetElement();
        for (var i = 0, l = linkTypes.length; i < l; i++) {
            if (element.is('a')) {
                var result = linkTypes[i].updateInputs(element, linkContent.children('div:eq(' + i + ')'));
                if (result) {
                    linkMenu.find(':radio:eq(' + i + ')').trigger('click');
                }
            } else if (this.options.resetUi) {
                linkTypes[i].resetInputs(linkContent.children('div:eq(' + i + ')'));
            }
        }
        if (!element.is('a') && this.options.resetUi) {
            linkMenu.find(':radio:eq(0)').trigger('click');
        }
        return dialog;
    },

    validateDialog: function() {
        var i = linkMenu.find(':radio:checked').val();
        linkAttributes = linkTypes[i].getAttributes(linkContent.children('div:eq(' + i + ')'));
        return linkAttributes !== false;
    },

    selectionToggle: function() {
        var element = selectionGetElement();
        if (!element) {
            return false;
        }
        if (element.closest('a').length) {
            return true;
        }
        return false;
    },

    getDialogTemplate: function() {
        var template = $(this.raptor.getTemplate('link.dialog', this.options));

        linkMenu = template.find('[data-menu]');
        linkContent = template.find('[data-content]');
        linkTypes = [
            new LinkTypeInternal(this),
            new LinkTypeExternal(this),
            new LinkTypeDocument(this),
            new LinkTypeEmail(this)
        ];

        for (var i = 0, l = linkTypes.length; i < l; i++) {
            $(this.raptor.getTemplate('link.label', linkTypes[i]))
                .click(function() {
                    linkContent.children('div').hide();
                    linkContent.children('div:eq(' + $(this).index() + ')').show();
                })
                .find(':radio')
                    .val(i)
                .end()
                .appendTo(linkMenu);
            $('<div>')
                .append(linkTypes[i].getContent())
                .hide()
                .appendTo(linkContent);
        }
        linkMenu.find(':radio:first').prop('checked', true);
        linkContent.children('div:first').show();

        return template;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-create.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-open.js
/**
 * @fileOverview Contains the link open class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */

/**
 * The link open plugin class.
 *
 * @constructor
 * @augments RaptorPlugin
 *
 * @param {String} name
 * @param {Object} overrides Options hash.
 */
function LinkOpen(name, overrides) {
    RaptorPlugin.call(this, name || 'linkOpen', overrides);
}

LinkOpen.prototype = Object.create(RaptorPlugin.prototype);

LinkOpen.prototype.enable = function() {
    this.raptor.getElement().on('click.raptor', 'a', this.openLink);
};

LinkOpen.prototype.openLink = function(event) {
    if (event.ctrlKey && this.href) {
        window.open(this.href, '_blank');
    }
};

Raptor.registerPlugin(new LinkOpen());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-open.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-remove.js
/**
 * Link remove plugin.
 *
 * @plugin PreviewToggleButton linkRemove
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */
Raptor.registerUi(new PreviewToggleButton({
    name: 'linkRemove',
    disable: true,

    action: function() {
        this.raptor.actionApply(function() {
            document.execCommand('unlink');
        }.bind(this));
    },

    selectionToggle: function() {
        var element = selectionGetElement();
        if (!element) {
            return false;
        }
        if (element.closest('a').length) {
            return true;
        }
        return false;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-remove.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-document.js
/**
 * @fileOverview Contains the document link class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The internal link class.
 *
 * @constructor
 * @param {Raptor} raptor
 */
function LinkTypeDocument(linkCreate) {
    this.linkCreate = linkCreate;
    this.label = tr('linkTypeDocumentLabel');
}

LinkTypeDocument.prototype = Object.create(LinkTypeExternal.prototype);

LinkTypeDocument.prototype.resetInputs = function(panel) {
    panel.find('[name=location]').val('http://');
    panel.find('[name=blank]').prop('checked', false);
};

/**
 * @return {String} The document link panel content.
 */
LinkTypeDocument.prototype.getContent = function() {
    return this.linkCreate.raptor.getTemplate('link.document', this.linkCreate.raptor.options);
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-document.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-email.js
/**
 * @fileOverview Contains the internal link class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class Email link class.
 * @constructor
 *
 * @todo param details and des for return.
 * @param {type} raptor
 * @returns {LinkTypeEmail}
 */
function LinkTypeEmail(linkCreate) {
    this.linkCreate = linkCreate;
    this.label = tr('linkTypeEmailLabel');
}

/**
 * Gets the content of the email link.
 *
 * @returns {Element}
 */
LinkTypeEmail.prototype.getContent = function() {
    return this.linkCreate.raptor.getTemplate('link.email', this.linkCreate.raptor.options);
};

/**
 * Gets the attributes of the email link.
 *
 * @param {Element} panel
 * @returns {LinkTypeEmail.prototype.getAttributes.Anonym$0|Boolean}
 */
LinkTypeEmail.prototype.getAttributes = function(panel) {
    var address = panel.find('[name=email]').val(),
        subject = panel.find('[name=subject]').val();
    if ($.trim(subject)) {
        subject = '?Subject=' + encodeURIComponent(subject);
    }
    if ($.trim(address) === '') {
        return false;
    }
    return {
        href: 'mailto:' + address + subject
    };
};

LinkTypeEmail.prototype.resetInputs = function(panel) {
    panel.find('[name=email]').val('');
    panel.find('[name=subject]').val('');
};

/**
 * Updates the users inputs.
 *
 * @param {String} link The email link.
 * @param {Element} panel
 * @returns {Boolean}
 */
LinkTypeEmail.prototype.updateInputs = function(link, panel) {
    var result = false;
        email = '',
        subject = '',
        href = link.attr('href');
    if (href.indexOf('mailto:') === 0) {
        var subjectPosition = href.indexOf('?Subject=');
        if (subjectPosition > 0) {
            email = href.substring(7, subjectPosition);
            subject = href.substring(subjectPosition + 9);
        } else {
            email = href.substring(7);
            subject = '';
        }
        result = true;
    }
    panel.find('[name=email]').val(email);
    panel.find('[name=subject]').val(subject);
    return result;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-email.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-external.js
/**
 * @fileOverview Contains the external link class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The external link class.
 * @constructor
 *
 * @todo check please
 * @param {Object} raptor
 * @returns {Element}
 */
function LinkTypeExternal(linkCreate) {
    this.linkCreate = linkCreate;
    this.label = tr('linkTypeExternalLabel');
}

/**
 * Gets the content of the external link.
 *
 * @returns {Element}
 */
LinkTypeExternal.prototype.getContent = function() {
    return this.linkCreate.raptor.getTemplate('link.external', this.linkCreate.raptor.options);
};

/**
 * Gets the attributes of the external link.
 *
 * @param {Element} panel
 * @returns {LinkTypeExternal.prototype.getAttributes.result|Boolean}
 */
LinkTypeExternal.prototype.getAttributes = function(panel) {
    var address = panel.find('[name=location]').val(),
        target = panel.find('[name=blank]').is(':checked'),
        result = {
            href: address
        };

    if (target) {
        result.target = '_blank';
    }

    if ($.trim(result.href) === 'http://') {
        return false;
    }

    return result;
};

LinkTypeExternal.prototype.resetInputs = function(panel) {
    panel.find('[name=location]').val('http://');
    panel.find('[name=blank]').prop('checked', true);
};

/**
 * Updates the users inputs.
 *
 * @param {String} link The external link.
 * @param {Element} panel
 * @returns {Boolean}
 */
LinkTypeExternal.prototype.updateInputs = function(link, panel) {
    var result = false,
        href = link.attr('href');
    if (href.indexOf('http://') === 0) {
        panel.find('[name=location]').val(href);
        result = true;
    } else {
        panel.find('[name=location]').val('http://');
    }
    if (link.attr('target') === '_blank') {
        panel.find('[name=blank]').prop('checked', true);
    } else {
        panel.find('[name=blank]').prop('checked', false);
    }
    return result;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-external.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-internal.js
/**
 * @fileOverview Contains the internal link class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @class The internal link class.
 * @constructor
 *
 * @todo check please
 * @param {Object} raptor
 * @returns {Element}
 */
function LinkTypeInternal(linkCreate) {
    this.linkCreate = linkCreate;
    this.label = tr('linkTypeInternalLabel');
}

/**
 * Gets the content of the internal link.
 *
 * @returns {Element}
 */
LinkTypeInternal.prototype.getContent = function() {
    return this.linkCreate.raptor.getTemplate('link.internal', {
        baseClass: this.linkCreate.raptor.options.baseClass,
        domain: window.location.protocol + '//' + window.location.host
    });
};

/**
 * Gets the attributes of the internal link.
 *
 * @todo type and des for panel and return
 * @param {Element} panel
 * @returns {LinkTypeInternal.prototype.getAttributes.result}
 */
LinkTypeInternal.prototype.getAttributes = function(panel) {
    var address = panel.find('[name=location]').val(),
        target = panel.find('[name=blank]').is(':checked'),
        result = {
            href: address
        };

    if (target) {
        result.target = '_blank';
    }

    return result;
};

LinkTypeInternal.prototype.resetInputs = function(panel) {
    panel.find('[name=location]').val('');
    panel.find('[name=blank]').prop('checked', false);
};

/**
 * Updates the users inputs.
 *
 * @todo type and des for panel and des for return.
 * @param {String} link The internal lnk.
 * @param {Element} panel
 * @returns {Boolean}
 */
LinkTypeInternal.prototype.updateInputs = function(link, panel) {
    var href = link.attr('href');
    if (href.indexOf('http://') === -1 &&
            href.indexOf('mailto:') === -1) {
        panel.find('[name=location]').val(href);
    } else {
        panel.find('[name=location]').val('');
    }
    if (link.attr('target') === '_blank') {
        panel.find('[name=blank]').prop('checked', true);
    } else {
        panel.find('[name=blank]').prop('checked', false);
    }
    return false;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/link/link-type-internal.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/list/list-ordered.js
/**
 * @fileOverview Contains the ordered list button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a new instance of the preview toggle button to create ordered lists.
 */
Raptor.registerUi(new Button({
    name: 'listOrdered',
    action: function() {
        document.execCommand('insertOrderedList');
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/list/list-ordered.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/list/list-unordered.js
/**
 * @fileOverview Contains the unordered list button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a new instance of the preview toggle button to create unordered lists.
 *
 * @todo param details?
 * @param {type} param
 */
Raptor.registerUi(new Button({
    name: 'listUnordered',
    action: function() {
        document.execCommand('insertUnorderedList');
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/list/list-unordered.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/logo/logo.js
/**
 * @fileOverview Contains the logo button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a new instance of the button class to display the raptor logo and
 * link to the raptor version page.
 */
Raptor.registerUi(new Button({
    name: 'logo',
    // <usage-statistics/>
    action: function() {
        window.open('http://www.raptor-editor.com/about/VERSION', '_blank');
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/logo/logo.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/no-break/no-break.js
/**
 * @fileOverview No break plugin.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 */

function NoBreakPlugin(name, overrides) {
    RaptorPlugin.call(this, name || 'noBreak', overrides);
}

NoBreakPlugin.prototype = Object.create(RaptorPlugin.prototype);

NoBreakPlugin.prototype.init = function() {
    this.raptor.getElement().on('keypress.raptor', this.preventReturn.bind(this));
    this.raptor.getElement().on('drop.raptor', this.preventDrop.bind(this));
};

NoBreakPlugin.prototype.preventReturn = function(event) {
    if (this.options.enabled && event.which === 13) {
        return false;
    }
};

NoBreakPlugin.prototype.preventDrop = function(event) {
    return this.options.enabled;
// Attempt to allow dropping of plain text (not working)
//
//    console.log(event.originalEvent);
//    var range = rangy.getSelection().getRangeAt(0).cloneRange();
//    console.log(range);
//    console.log(range.startOffset);
//    console.log(range.endOffset);
//    for (var i = 0, l = event.originalEvent.dataTransfer.items.length; i < l; i++) {
//        console.log(event.originalEvent);
//        if (event.originalEvent.dataTransfer.items[i].type == 'text/plain' &&
//                event.originalEvent.dataTransfer.items[i].kind == 'string') {
//            event.originalEvent.dataTransfer.items[i].getAsString(function(content) {
//                this.raptor.actionApply(function() {
//                    rangeReplace(range, content);
////                    selectionReplace(content);
//                })
//            }.bind(this));
//        }
//    }
//    return false;
};

Raptor.registerPlugin(new NoBreakPlugin());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/no-break/no-break.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/normalise-line-breaks/normalise-line-breaks.js
/**
 * @fileOverview Contains the view normalise line breaks button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Attempts to enforce standard behaviour across browsers for return &
 * shift+return key presses.
 *
 * @constructor
 * @param {String} name
 * @param {Object} overrides
 */
function NormaliseLineBreaksPlugin(name, overrides) {
    RaptorPlugin.call(this, name || 'normaliseLineBreaks', overrides);
}

NormaliseLineBreaksPlugin.prototype = Object.create(RaptorPlugin.prototype);

/**
 * Register hotkey actions.
 */
NormaliseLineBreaksPlugin.prototype.init = function() {
    this.raptor.registerHotkey('return', this.returnPressed.bind(this));
    this.raptor.registerHotkey('shift+return', this.shiftReturnPressed.bind(this));
};

NormaliseLineBreaksPlugin.prototype.returnPressedList = function(selectedElement) {
    var selectedListElement = selectedElement.closest('li');
    if (!selectedListElement.length) {
        return false;
    }

    var parentList = selectedListElement.closest('ul, ol');
    var listType = parentList.get(0).tagName.toLowerCase(),
        replacementElement = false;

    // If current list element is empty, list element needs to be replaced with <p>
    if (elementIsEmpty(selectedListElement)) {
        // If not at bottom of list, list must be broken
        var nextListElement = selectedListElement.next();
        if (nextListElement.length && nextListElement.is('li')) {
            replacementElement = listBreakByReplacingSelection(listType, 'li', this.raptor.getElement(), '<p>&nbsp;</p>');
            if (replacementElement) {
                selectionSelectInner(replacementElement.get(0));
            }
        } else {
            selectedListElement.remove();
            selectionSelectInner($('<p>&nbsp;</p>').insertAfter(parentList).get(0));
        }
    } else {
        replacementElement = listBreakAtSelection(listType, 'li', this.raptor.getElement());
        if (replacementElement) {
            selectionSelectStart(replacementElement.get(0));
        }
    }
    return true;

};

/**
 * Handle return keypress.
 *
 * When inside a ul/ol, the the current list item is split and the cursor is
 * placed at the start of the second list item.
 *
 * @return {Boolean} True if the keypress has been handled and should not propagate
 *                        further
 */
NormaliseLineBreaksPlugin.prototype.returnPressed = function() {
    var selectedElement = selectionGetElement();

    if (this.returnPressedList(selectedElement)) {
        return true;
    }
    return false;
};

NormaliseLineBreaksPlugin.prototype.shiftReturnPressedList = function(selectedElement) {
    if (selectedElement.closest('li').length) {
        var listType = selectedElement.closest('ul, ol').get(0).tagName.toLowerCase();
        var replacementElement = listBreakByReplacingSelection(listType, 'li', this.raptor.getElement(), '<p>&nbsp;</p>');
        if (replacementElement) {
            selectionSelectInner(replacementElement.get(0));
        }
        return true;
    }

    return false;
};

/**
 * Handle shift+return keypress.
 *
 * When inside a ul/ol, the the current selection is replaced with a p by splitting the list.
 *
 * @return {Boolean} True if the keypress has been handled and should not propagate
 *                        further
 */
NormaliseLineBreaksPlugin.prototype.shiftReturnPressed = function() {
    var selectedElement = selectionGetElement();
    if (this.shiftReturnPressedList(selectedElement)) {
        return true;
    }
    return false;
};

Raptor.registerPlugin(new NormaliseLineBreaksPlugin());

;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/normalise-line-breaks/normalise-line-breaks.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/paste/paste.js
/**
 * @fileOverview Contains the paste plugin class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

var pasteInProgress = false,
    pasteDialog = null,
    pasteInstance = null,
    pasteShiftDown = null;

/**
 * The paste plugin class.
 *
 * @constructor
 * @augments RaptorPlugin
 *
 * @param {String} name
 * @param {Object} overrides Options hash.
 */
function PastePlugin(name, overrides) {
    /**
     * Default options.
     *
     * @type {Object}
     */
    this.options = {
        /**
         * Tags that will not be stripped from pasted content.
         * @type {Array}
         */
        allowedTags: [
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'blockquote',
            'p', 'a', 'span', 'hr', 'br', 'strong', 'em',
            'table', 'tr', 'td', 'th', 'tbody', 'thead', 'tfoot'
        ],

        allowedAttributes: [
            'href', 'title', 'colspan', 'rowspan'
        ],

        allowedEmptyTags: [
            'hr', 'br', 'td', 'th'
        ],

        panels: [
            'formatted-clean',
            'plain-text',
            'formatted-unclean',
            'source'
        ]
    };

    RaptorPlugin.call(this, name || 'paste', overrides);
}

PastePlugin.prototype = Object.create(RaptorPlugin.prototype);

/**
 * Enables pasting.
 */
PastePlugin.prototype.enable = function() {
    this.raptor.getElement().on('paste.raptor', this.capturePaste.bind(this));
};

PastePlugin.prototype.capturePaste = function(event) {
    if (pasteShiftDown) {
        return;
    }
    if (pasteInProgress) {
        return false;
    }

    selectionSave();

    var element = this.raptor.getNode();
    var savedContent = element.innerHTML;
    if (element && element.clipboardData && event.clipboardData.getData) {
        // Webkit - get data from clipboard, put into editable, cleanup, then cancel event
        if (/text\/html/.test(event.clipboardData.types)) {
            element.innerHTML = event.clipboardData.getData('text/html');
        } else if (/text\/plain/.test(event.clipboardData.types)) {
            element.innerHTML = event.clipboardData.getData('text/plain');
        } else {
            element.innerHTML = '';
        }
        this.waitForPasteData(element, savedContent);
        event.stopPropagation();
        event.preventDefault();
        return false;
    } else {
        // Everything else - empty editable and allow browser to paste content into it, then cleanup
        element.innerHTML = '';
        this.waitForPasteData(element, savedContent);
        return true;
    }
};

PastePlugin.prototype.waitForPasteData = function(element, savedContent) {
    if (element.innerHTML !== '') {
        this.processPaste(element, savedContent);
    } else {
        setTimeout(function() {
            this.waitForPasteData(element, savedContent)
        }.bind(this), 20);
    }
};

PastePlugin.prototype.processPaste = function(element, savedContent) {
    var pastedData = element.innerHTML;
    element.innerHTML = savedContent;
    this.showPasteDialog(pastedData);
};

/**
 * Opens the paste dialog.
 */
PastePlugin.prototype.showPasteDialog = function(pastedData) {
    aDialogOpen(this.getDialog(this, pastedData));
};

/**
 * Inserts the pasted content into the selection.
 *
 * @param {HTML} html The html to be pasted into the selection.
 */
PastePlugin.prototype.pasteContent = function(html) {
    this.raptor.actionApply(function() {
        // @todo fire an event to allow plugins to clean up, i.e. table plugin adding a cms-table class
        var uniqueId = elementUniqueId();
        selectionRestore();
        html = this.filterAttributes(html);
        html = this.filterChars(html);
        var newNodes = selectionReplace(html);
        if (newNodes.length > 0) {
            range = rangy.createRange();
            range.setStartBefore(newNodes[0]);
            range.setEndAfter(newNodes[newNodes.length - 1]);
            selectionSet(range);
        }
        this.raptor.fire('insert-nodes', [newNodes]);
    }.bind(this));
};

/**
 * Gets the paste dialog.
 *
 * @todo type for instance
 * @param {type} instance The paste instance
 * @returns {Object} The paste dialog.
 */
PastePlugin.prototype.getDialog = function(instance, pastedData) {
    pasteInstance = instance;
    if (!pasteDialog) {
        pasteDialog = $('<div>').html(this.raptor.getTemplate('paste.dialog', this.options));
        for (var i = 0, l = this.options.panels.length; i < l; i++) {
            pasteDialog.find('.' + this.options.baseClass + '-tab-' + this.options.panels[i]).css('display', '');
            if (i === 0) {
                pasteDialog.find('.' + this.options.baseClass + '-content-' + this.options.panels[i]).css('display', '');
            }
        }
        pasteDialog.find('.' + this.options.baseClass + '-panel-tabs > div:visible:not(:first)').hide();
        aDialog(pasteDialog, {
            modal: true,
            resizable: true,
            autoOpen: false,
            width: 800,
            height: 500,
            minWidth: 700,
            minHeight: 400,
            title: tr('pasteDialogTitle'),
            dialogClass: this.options.baseClass + '-dialog',
            close: function() {
                pasteInProgress = false;
            },
            buttons: [
                {
                    text: tr('pasteDialogOKButton'),
                    click: function() {
                        var element = pasteDialog.find('.' + this.options.baseClass + '-area:visible');
                        aDialogClose(pasteDialog);
                        pasteInstance.pasteContent(element.html());
                    }.bind(this),
                    icons: {
                        primary: 'ui-icon-circle-check'
                    }
                },
                {
                    text: tr('pasteDialogCancelButton'),
                    click: function() {
                        selectionDestroy();
                        aDialogClose(pasteDialog);
                    },
                    icons: {
                        primary: 'ui-icon-circle-close'
                    }
                }
            ]
        });

        // Create fake jQuery UI tabs (to prevent hash changes)
        var tabs = pasteDialog.find('.' + this.options.baseClass + '-panel-tabs');
        tabs.find('li')
            .click(function() {
                tabs.find('ul li').removeClass('ui-state-active').removeClass('ui-tabs-selected');
                $(this).addClass('ui-state-active').addClass('ui-tabs-selected');
                tabs.children('div').hide().eq($(this).index()).show();
            });
    }
    this.updateAreas(pastedData);
    return pasteDialog;
};

/**
 * Attempts to filter rubbish from content using regular expressions.
 *
 * @param  {String} content Dirty text
 * @return {String} The filtered content
 */
PastePlugin.prototype.filterAttributes = function(content) {
    // The filters variable is an array of of regular expression & handler pairs.
    //
    // The regular expressions attempt to strip out a lot of style data that
    // MS Word likes to insert when pasting into a contentEditable.
    // Almost all of it is junk and not good html.
    //
    // The hander is a place to put a function for match handling.
    // In most cases, it just handles it as empty string.  But the option is there
    // for more complex handling.
    var filters = [
        // Meta tags, link tags, and prefixed tags
        {regexp: /(<meta\s*[^>]*\s*>)|(<\s*link\s* href="file:[^>]*\s*>)|(<\/?\s*\w+:[^>]*\s*>)/gi, handler: ''},
        // MS class tags and comment tags.
        {regexp: /(class="Mso[^"]*")|(<!--(.|\s){1,}?-->)/gi, handler: ''},
        // Apple class tags
        {regexp: /(class="Apple-(style|converted)-[a-z]+\s?[^"]+")/, handle: ''},
        // Google doc attributes
        {regexp: /id="internal-source-marker_[^"]+"|dir="[rtl]{3}"/, handle: ''},
        // blank p tags
        {regexp: /(<p[^>]*>\s*(\&nbsp;|\u00A0)*\s*<\/p[^>]*>)|(<p[^>]*>\s*<font[^>]*>\s*(\&nbsp;|\u00A0)*\s*<\/\s*font\s*>\s<\/p[^>]*>)/ig, handler: ''},
        // Strip out styles containing mso defs and margins, as likely added in IE and are not good to have as it mangles presentation.
        {regexp: /(style="[^"]*mso-[^;][^"]*")|(style="margin:\s*[^;"]*;")/gi, handler: ''},
        // Style tags
        {regexp: /(?:<style([^>]*)>([\s\S]*?)<\/style>|<link\s+(?=[^>]*rel=['"]?stylesheet)([^>]*?href=(['"])([^>]*?)\4[^>\/]*)\/?>)/gi, handler: ''},
        // Scripts (if any)
        {regexp: /(<\s*script[^>]*>((.|\s)*?)<\\?\/\s*script\s*>)|(<\s*script\b([^<>]|\s)*>?)|(<[^>]*=(\s|)*[("|')]javascript:[^$1][(\s|.)]*[$1][^>]*>)/ig, handler: ''}
    ];

    $.each(filters, function(i, filter) {
        content = content.replace(filter.regexp, filter.handler);
    });

    return content;
};

/**
 * Replaces commonly-used Windows 1252 encoded chars that do not exist in ASCII or ISO-8859-1 with ISO-8859-1 cognates.
 * @param  {[type]} content [description]
 * @return {[type]}
 */
PastePlugin.prototype.filterChars = function(content) {
    var s = content;

    // smart single quotes and apostrophe
    s = s.replace(/[\u2018|\u2019|\u201A]/g, '\'');

    // smart double quotes
    s = s.replace(/[\u201C|\u201D|\u201E]/g, '\"');

    // ellipsis
    s = s.replace(/\u2026/g, '...');

    // dashes
    s = s.replace(/[\u2013|\u2014]/g, '-');

    // circumflex
    s = s.replace(/\u02C6/g, '^');

    // open angle bracket
    s = s.replace(/\u2039/g, '<');

    // close angle bracket
    s = s.replace(/\u203A/g, '>');

    // spaces
    s = s.replace(/[\u02DC|\u00A0]/g, ' ');

    return s;
};

/**
 * Strip all attributes from content (if it's an element), and every element contained within
 * Strip loop taken from <a href="http://stackoverflow.com/a/1870487/187954">Remove all attributes</a>
 * @param  {String|Element} content The string / element to be cleaned
 * @return {String} The cleaned string
 */
PastePlugin.prototype.stripAttributes = function(content) {
    content = $('<div/>').html(content);
    var allowedAttributes = this.options.allowedAttributes;

    $(content.find('*')).each(function() {
        // First copy the attributes to remove if we don't do this it causes problems iterating over the array
        // we're removing elements from
        var attributes = [];
        $.each(this.attributes, function(index, attribute) {
            // Do not remove allowed attributes
            if (-1 !== $.inArray(attribute.nodeName, allowedAttributes)) {
                return;
            }
            attributes.push(attribute.nodeName);
        });

        // now remove the attributes
        for (var attributeIndex = 0; attributeIndex < attributes.length; attributeIndex++) {
            $(this).attr(attributes[attributeIndex], null);
        }
    });
    return content.html();
};

/**
 * Remove empty tags.
 *
 * @param {String} content The HTML containing empty elements to be removed
 * @return {String} The cleaned HTML
 */
PastePlugin.prototype.stripEmpty = function(content) {
    var wrapper = $('<div/>').html(content);
    var allowedEmptyTags = this.options.allowedEmptyTags;
    wrapper.find('*').filter(function() {
        // Do not strip elements in allowedEmptyTags
        if (-1 !== $.inArray(this.tagName.toLowerCase(), allowedEmptyTags)) {
            return false;
        }
        // If the element has at least one child element that exists in allowedEmptyTags, do not strip it
        if ($(this).find(allowedEmptyTags.join(',')).length) {
            return false;
        }
        return $.trim($(this).text()) === '';
    }).remove();
    return wrapper.html();
};

/**
 * Remove spans that have no attributes.
 *
 * @param {String} content
 * @return {String} The cleaned HTML
 */
PastePlugin.prototype.stripSpans = function(content) {
    var wrapper = $('<div/>').html(content);
    wrapper.find('span').each(function() {
        if (!this.attributes.length) {
            $(this).replaceWith($(this).html());
        }
    });
    return wrapper.html();
};

/**
 * Update text input content.
 */
PastePlugin.prototype.updateAreas = function(pastedData) {
    var markup = pastedData;
    markup = this.filterAttributes(markup);
    markup = this.filterChars(markup);
    markup = this.stripEmpty(markup);
    markup = this.stripAttributes(markup);
    markup = this.stripSpans(markup);
    markup = stringStripTags(markup, this.options.allowedTags);

    var plain = $('<div/>').html(pastedData).text();
    var html = pastedData;

    pasteDialog.find('.' + this.options.baseClass + '-markup').html(markup);
    pasteDialog.find('.' + this.options.baseClass + '-plain').html(plain.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1<br/>$2'));
    pasteDialog.find('.' + this.options.baseClass + '-rich').html(markup);
    pasteDialog.find('.' + this.options.baseClass + '-source').text(html);
};

$(document).on('keyup.raptor keydown.raptor', function(event) {
    pasteShiftDown = event.shiftKey;
});

Raptor.registerPlugin(new PastePlugin());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/paste/paste.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/placeholder/placeholder.js
/**
 * @fileOverview Placeholder text component.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 * @author Michael Robinson michael@panmedia.co.nz
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Placeholder plugin
 *
 * @constructor
 * @augments RaptorPlugin
 * @param {[type]} name
 * @param {[type]} overrides
 */
function PlaceholderPlugin(name, overrides) {

    /**
     * Default placholder plugin options.
     *
     * @type {Object}
     */
    this.options = {

        /**
         * The placeholder content used if the Raptor Editor's instance has no content.
         *
         * @type {String}
         */
        content: tr('placeholderPluginDefaultContent'),

        /**
         * Tag to wrap placeholder content.
         *
         * @type {String}
         */
        tag: 'p',

        /**
         * Select placeholder content when inserted.
         *
         * @type {Boolean}
         */
        select: true
    };

    RaptorPlugin.call(this, name || 'placeholder', overrides);
}

PlaceholderPlugin.prototype = Object.create(RaptorPlugin.prototype);

/**
 * Init placeholder plugin.
 */
PlaceholderPlugin.prototype.init = function() {
    this.raptor.bind('enabled', this.enabled.bind(this));
    this.raptor.bind('change', this.check.bind(this));
};

/**
 * Insert the placeholder if the editable element is empty.
 */
PlaceholderPlugin.prototype.enabled = function() {
    this.check(this.raptor.getHtml());
};

PlaceholderPlugin.prototype.check = function(html) {
    html = html.trim();
    if (!html || html === '<br>' || html === '<div><br></div>') {
        var raptorNode = this.raptor.getNode(),
            tag = document.createElement(this.options.tag);
        tag.innerHTML = this.options.content;
        raptorNode.innerHTML = '';
        raptorNode.appendChild(tag);
        if (this.options.select) {
            selectionSelectInner(raptorNode.childNodes[0]);
        }
        this.raptor.checkChange();
    }
};

Raptor.registerPlugin(new PlaceholderPlugin());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/placeholder/placeholder.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/save/save.js
/**
 * Save UI plugin.
 *
 * Provides the save button UI that is enabled/disabled when the editable blocks is dirty/clean.
 * The UI will either call another plugin, or a callback when clicked.
 *
 * @plugin Button save
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */
Raptor.registerUi(new Button({
    name: 'save',
    hotkey: 'ctrl+s',

    options: {
        /**
         * Name of plugin to call when save UI is clicked. Typically `saveJson` or `saveRest`
         * @option {string} plugin
         */
        plugin: null,

        /**
         * Callback to call when save UI is clicked. The callback an plugin options are mutually exclusive.
         * @option {function} callback
         */
        callback: null
    },

    action: function() {
        if (this.getCallback()) {
            this.getCallback().call(this);
        } else if (this.getPlugin()) {
            this.getPlugin().save();
        } else {
            aNotify({
                text: tr('saveNotConfigured'),
                type: 'error'
            });
        }
    },

    init: function() {
        var result = Button.prototype.init.apply(this, arguments);

        // <strict/>

        if (this.options.checkDirty !== false) {
            this.raptor.bind('dirty', this.dirty.bind(this));
            this.raptor.bind('cleaned', this.clean.bind(this));
            this.clean();
        }
        return result;
    },

    getPlugin: function() {
        if (!this.options.plugin) {
            return null;
        }
        return this.raptor.getPlugin(this.options.plugin);
    },

    getCallback: function() {
        return this.options.callback;
    },

    dirty: function() {
        aButtonEnable(this.button);
    },

    clean: function() {
        aButtonDisable(this.button);
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/save/save.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/save/save-json.js
/**
 * @fileOverview Contains the save JSON plugin code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The save JSON class.
 *
 * @constructor
 * @param {String} name
 * @param {Object} overrides
 */
function SaveJsonPlugin(name, overrides) {
    this.options = {
        retain: false,
        checkDirty: true
    };
    RaptorPlugin.call(this, name || 'saveJson', overrides);
    this.size = null;
}

SaveJsonPlugin.prototype = Object.create(RaptorPlugin.prototype);

Raptor.registerPlugin(new SaveJsonPlugin());

// <strict/>

/**
 * Save Raptor content.
 */
SaveJsonPlugin.prototype.save = function(saveSections) {
    // Hack save sections
    if (typeof RaptorSection !== 'undefined' && saveSections !== false) {
        RaptorSection.save(false);
    }
    var data = {};
    this.raptor.unify(function(raptor) {
        if (this.options.checkDirty === false || raptor.isDirty()) {
            raptor.clean();
            var plugin = raptor.getPlugin('saveJson');
            var id = plugin.options.id.call(plugin);
            var html = raptor.getHtml();
            if (plugin.options.data) {
                // <strict/>
                data[id] = plugin.options.data.call(this, html);
            } else {
                data[id] = html;
            }
        }
    }.bind(this));
    var post = {};
    this.size = Object.keys(data).length;
    post[this.options.postName] = JSON.stringify(data);
    if (this.options.post) {
        // <strict/>
        post = this.options.post.call(this, post);
    }
    $.ajax({
            type: this.options.type || 'post',
            dataType: this.options.dataType || 'json',
            url: this.options.url,
            data: post
        })
        .done(this.done.bind(this))
        .fail(this.fail.bind(this));
};

/**
 * Done handler.
 *
 * @param {Object} data
 * @param {Integer} status
 * @param {Object} xhr
 */
SaveJsonPlugin.prototype.done = function(data, status, xhr) {
    this.raptor.unify(function(raptor) {
        if (!raptor.getPlugin('saveJson').options.checkDirty || raptor.isDirty()) {
            raptor.saved([data, status, xhr]);
        }
    });
    var message = tr('saveJsonSaved', {
        saved: this.size
    });
    if (this.options.formatResponse) {
        // <strict/>
        message = this.options.formatResponse.call(this, data, status, xhr) || message;
    }
    aNotify({
        text: message,
        type: 'success'
    });
    if (!this.options.retain) {
        this.raptor.unify(function(raptor) {
            raptor.disableEditing();
        });
    }
};

/**
 * Fail handler.
 *
 * @param {Object} xhr
 */
SaveJsonPlugin.prototype.fail = function(xhr, status, error) {
    this.raptor.fire('save-failed', [xhr.responseJSON || xhr.responseText, status, xhr]);
    var message = tr('saveJsonFail', {
        failed: this.size
    });
    if (this.options.formatResponse) {
        // <strict/>
        message = this.options.formatResponse.call(this, xhr.responseJSON || xhr.responseText, status, xhr) || message;
    }
    aNotify({
        text: message,
        type: 'error'
    });
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/save/save-json.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/save/save-rest.js
/**
 * @fileOverview Contains the save rest class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The save rest class.
 *
 * @constructor
 * @augments RaptorPlugin
 *
 * @param {String} name
 * @param {Object} overrides Options hash
 */
function SaveRestPlugin(name, overrides) {
    this.method = 'put';
    this.options = {
        retain: false,
        checkDirty: true
    };
    RaptorPlugin.call(this, name || 'saveRest', overrides);
}

SaveRestPlugin.prototype = Object.create(RaptorPlugin.prototype);

/**
 * Initializes the save rest plugin.
 *
 * @returns {Element}
 */
// <strict/>

/**
 * Saves the selection.
 */
SaveRestPlugin.prototype.save = function() {
    this.requests = 0;
    this.errors = [];
    this.messages = [];
    this.raptor.unify(function(raptor) {
        if (this.options.checkDirty === false || raptor.isDirty()) {
            this.requests++;
            var xhr = raptor.getPlugin('saveRest').sendRequest();
            xhr.raptor = raptor;
            xhr
                .done(this.done.bind(this))
                .fail(this.fail.bind(this))
                .always(this.always.bind(this));
        }
    }.bind(this));
};

/**
 * @param {type} data
 * @param {type} status
 * @param {type} xhr
 */
SaveRestPlugin.prototype.done = function(data, status, xhr) {
    xhr.raptor.saved();
    this.messages.push(data);
};

/**
 * @param {type} xhr
 */
SaveRestPlugin.prototype.fail = function(xhr) {
    this.errors.push(xhr.responseText);
};

/**
 * Action always peformed on AJAX request
 */
SaveRestPlugin.prototype.always = function() {
    this.requests--;
    if (this.requests === 0) {
        if (this.errors.length > 0 && this.messages.length === 0) {
            aNotify({
                text: tr('saveRestFail', {
                    failed: this.errors.length
                }),
                type: 'error'
            });
        } else if (this.errors.length > 0) {
            aNotify({
                text: tr('saveRestPartial', {
                    saved: this.messages.length,
                    failed: this.errors.length
                }),
                type: 'error'
            });
        } else {
            aNotify({
                text: tr('saveRestSaved', {
                    saved: this.messages.length
                }),
                type: 'success'
            });
            if (!this.options.retain) {
                this.raptor.unify(function(raptor) {
                    raptor.disableEditing();
                });
            }
        }
    }
};

/**
 * @returns {Object} AJAX promise object
 */
SaveRestPlugin.prototype.sendRequest = function() {
    var headers = this.raptor.getPlugin('saveRest').getHeaders(),
        data = this.raptor.getPlugin('saveRest').getData(),
        url = this.raptor.getPlugin('saveRest').getURL();
    return $.ajax({
        type: this.options.type || 'post',
        dataType: this.options.dataType || 'json',
        headers: headers,
        data: data,
        url: url
    });
};

/**
 * @returns {SaveRestPlugin.prototype.getHeaders}
 */
SaveRestPlugin.prototype.getHeaders = function() {
    if (this.options.headers) {
        return this.options.headers.call(this);
    }
    return {};
};

/**
 * @returns {SaveRestPlugin.prototype.getData.data}
 */
SaveRestPlugin.prototype.getData = function() {
    // Get the data to send to the server
    this.raptor.clean();
    var content = this.raptor.getHtml(),
        data = this.options.data.call(this, content);
    data._method = this.method;
    return data;
};

/**
 * @returns {String} The URL to use for REST calls
 */
SaveRestPlugin.prototype.getURL = function() {
    if (typeof this.options.url === 'string') {
        return this.options.url;
    }
    return this.options.url.call(this);
};

Raptor.registerPlugin(new SaveRestPlugin());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/save/save-rest.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/snippet-menu/snippet-menu.js
/**
 * @fileOverview Contains the snippet menu class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The snippet menu class.
 *
 * @constructor
 * @augments SelectMenu
 *
 * @param {Object} options
 */
function SnippetMenu(options) {
    SelectMenu.call(this, {
        name: 'snippetMenu'
    });
}

SnippetMenu.prototype = Object.create(SelectMenu.prototype);

/**
 * Initialize the snippet menu.
 *
 * @returns {Element}
 */
SnippetMenu.prototype.init = function() {
    var result = SelectMenu.prototype.init.call(this);
    if (typeof this.options.snippets !== 'undefined' &&
            Object.keys(this.options.snippets).length > 0) {
        return result;
    }
};

/**
 * Inserts the snippet into the selected text.
 *
 * @todo type for name
 * @param {type} name The name of the snippet.
 */
SnippetMenu.prototype.insertSnippet = function(name) {
    selectionReplace(this.options.snippets[name]);
};

/**
 * Applies the insertion of the snippet.
 *
 * @param {type} event The click event that applies the snippet.
 */
SnippetMenu.prototype.menuItemMouseDown = function(event) {
    this.raptor.actionApply(function() {
        this.insertSnippet($(event.currentTarget).data('name'));
    }.bind(this));
};

/**
 * Previews the insertion of a snippet.
 *
 * @param {type} event The mouse event that triggers the preview.
 */
SnippetMenu.prototype.menuItemMouseEnter = function(event) {
    this.raptor.actionPreview(function() {
        this.insertSnippet($(event.currentTarget).data('name'));
    }.bind(this));
};

/**
 * Removes the preview state.
 */
SnippetMenu.prototype.menuItemMouseLeave = function() {
    this.raptor.actionPreviewRestore();
};

/**
 * Gets the menu items for the snippet menu.
 *
 * @todo check type for return
 * @returns {Element} The menu items.
 */
SnippetMenu.prototype.getMenuItems = function() {
    var items = '';
    for (var name in this.options.snippets) {
        items += this.raptor.getTemplate('snippet-menu.item', {
            name: name
        });
    }
    return items;
};

Raptor.registerUi(new SnippetMenu());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/snippet-menu/snippet-menu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/special-characters/special-characters.js
/**
 * @fileOverview Contains the special characters button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

var insertCharacter = false;

/**
 * Creates an instance of the button class to insert special characters.
 */
Raptor.registerUi(new DialogButton({
    name: 'specialCharacters',
    dialogOptions: {
        width: 645
    },
    options: {
        setOrder: [
            'symbols',
            'mathematics',
            'arrows',
            'greekAlphabet'
        ],
        /**
         * Character sets available for display. From {@link http://turner.faculty.swau.edu/webstuff/htmlsymbols.html}
         */
        characterSets: {
            symbols: {
                name: tr('specialCharactersSymbols'),
                characters: [
                    ['<', '&lt;', 'less than'],
                    ['>', '&gt;', 'greater than'],
                    ['&', '&amp;', 'ampersand'],
                    ['"', '&quot;', 'quotation mark'],
                    ['&nbsp;', 'non-breaking space: \' \''],
                    ['&emsp;', 'em space: \'  \''],
                    ['&ensp;', 'en space: \' \''],
                    ['&thinsp;', 'thin space: \'\''],
                    ['&mdash;', 'em dash'],
                    ['&ndash;', 'en dash'],
                    ['&minus;', 'minus'],
                    ['-', 'hyphen'],
                    ['&oline;', 'overbar space'],
                    ['&cent;', 'cent'],
                    ['&pound;', 'pound'],
                    ['&euro;', 'euro'],
                    ['&sect;', 'section'],
                    ['&dagger;', 'dagger'],
                    ['&Dagger;', 'double dagger'],
                    ['&lsquo;', 'left single quotes'],
                    ['&rsquo;', 'right single quotes'],
                    ['\'', 'single quotes'],
                    ['&#x263a;', 'smiley face'],
                    ['&#x2605;', 'black star'],
                    ['&#x2606;', 'white star'],
                    ['&#x2610;', 'check box'],
                    ['&middot;', 'middle dot'],
                    ['&bull;', 'bullet'],
                    ['&copy;', 'copyright'],
                    ['&reg;', 'registered'],
                    ['&trade;', 'trade'],
                    ['&iquest;', 'inverted question mark'],
                    ['&iexcl;', 'inverted exclamation mark'],
                    ['&Aring;', 'Angström'],
                    ['&hellip;', 'ellipsis'],
                    ['&#x2295;', 'earth'],
                    ['&#x2299;', 'sun'],
                    ['&#x2640;', 'female'],
                    ['&#x2642;', 'male'],
                    ['&clubs;', 'clubs or shamrock'],
                    ['&spades;', 'spades'],
                    ['&hearts;', 'hearts or valentine'],
                    ['&diams;', 'diamonds'],
                    ['&loz;', 'diamond']
                ]
            },
            mathematics: {
                name: tr('specialCharactersMathematics'),
                characters: [
                    ['&lt;', 'less than'],
                    ['&le;', 'less than or equal to'],
                    ['&gt;', 'greater than'],
                    ['&ge;', 'greater than or equal to'],
                    ['&ne;', 'not equal'],
                    ['&asymp;', 'approximately equal to'],
                    ['&equiv;', 'identically equal to'],
                    ['&cong;', 'congruent to'],
                    ['&prop;', 'proportional'],
                    ['&there4;', 'therefore'],
                    ['&sum;', 'summation'],
                    ['&prod;', 'product'],
                    ['&prime;', 'prime or minutes'],
                    ['&Prime;', 'double prime or seconds'],
                    ['&Delta;', 'delta'],
                    ['&nabla;', 'del'],
                    ['&part;', 'partial'],
                    ['&int;', 'integral'],
                    ['&middot;', 'middle dot'],
                    ['&sdot;', 'dot operator'],
                    ['&bull;', 'bullet'],
                    ['&minus;', 'minus sign'],
                    ['&times;', 'multipllcation sign'],
                    ['&divide;', 'division sign'],
                    ['&frasl;', 'fraction slash, (ordinary / \\)'],
                    ['&plusmn;', 'plus or minus'],
                    ['&deg;', 'degree sign'],
                    ['&lfloor;', 'floor function'],
                    ['&rfloor;', 'floor function'],
                    ['&lceil;', 'ceiling function'],
                    ['&rceil;', 'ceiling function'],
                    ['&lowast;', 'asterisk operator, (ordinary *)'],
                    ['&oplus;', 'circled plus'],
                    ['&otimes;', 'circled times'],
                    ['&ordm;', 'masculine ordinal'],
                    ['&lang;', 'bra'],
                    ['&rang;', 'ket'],
                    ['&infin;', 'infinity'],
                    ['&pi;', 'pi'],
                    ['&frac12;', 'half'],
                    ['&alefsym;', 'aleph'],
                    ['&radic;', 'radical'],
                    ['&ang;', 'angle'],
                    ['&perp;', 'perpendicular'],
                    ['&real;', 'real'],
                    ['&isin;', 'is an element of'],
                    ['&notin;', 'not an element of'],
                    ['&empty;', 'null set'],
                    ['&sub;', 'subset of'],
                    ['&sube;', 'subset or or equal to'],
                    ['&nsub;', 'not a subset'],
                    ['&cap;', 'intersection'],
                    ['&cup;', 'union'],
                    ['&sim;', 'tilde operator (ordinary ~)'],
                    ['&Oslash;', 'slash O'],
                    ['&and;', 'logical and'],
                    ['&Lambda;', 'lambda (and)'],
                    ['&or;', 'logical or'],
                    ['&not;', 'not sign'],
                    ['&sim;', 'tilde operator (ordinary ~)'],
                    ['&rarr;', 'right arrow'],
                    ['&rArr;', 'double right arrow'],
                    ['&larr;', 'left arrow'],
                    ['&lArr;', 'left double arrow'],
                    ['&harr;', 'left right arrow'],
                    ['&hArr;', 'left right double arrow']
                ]
            },
            arrows: {
                name: tr('specialCharactersArrows'),
                characters: [
                    ['&darr;', 'down arrow'],
                    ['&dArr;', 'down double arrow'],
                    ['&uarr;', 'up arrow'],
                    ['&uArr;', 'up double arrow'],
                    ['&crarr;', 'arriage return arrow'],
                    ['&rarr;', 'right arrow'],
                    ['&rArr;', 'double right arrow'],
                    ['&larr;', 'left arrow'],
                    ['&lArr;', 'left double arrow'],
                    ['&harr;', 'left right arrow'],
                    ['&hArr;', 'left right double arrow']
                ]
            },
            greekAlphabet: {
                name: tr('specialCharactersGreekAlphabet'),
                characters: [
                    ['&alpha;', 'alpha'],
                    ['&beta;', 'beta'],
                    ['&gamma;', 'gamma'],
                    ['&delta;', 'delta'],
                    ['&epsilon;', 'epsilon'],
                    ['&zeta;', 'zeta'],
                    ['&eta;', 'eta'],
                    ['&theta;', 'theta'],
                    ['&iota;', 'iota'],
                    ['&kappa;', 'kappa'],
                    ['&lambda;', 'lambda'],
                    ['&mu;', 'mu'],
                    ['&nu;', 'nu'],
                    ['&xi;', 'xi'],
                    ['&omicron;', 'omicron'],
                    ['&pi;', 'pi'],
                    ['&rho;', 'rho'],
                    ['&sigma;', 'sigma'],
                    ['&tau;', 'tau'],
                    ['&upsilon;', 'upsilon'],
                    ['&phi;', 'phi'],
                    ['&chi;', 'chi'],
                    ['&psi;', 'psi'],
                    ['&omega;', 'omega'],
                    ['&Alpha;', 'alpha'],
                    ['&Beta;', 'beta'],
                    ['&Gamma;', 'gamma'],
                    ['&Delta;', 'delta'],
                    ['&Epsilon;', 'epsilon'],
                    ['&Zeta;', 'zeta'],
                    ['&Eta;', 'eta'],
                    ['&Theta;', 'theta'],
                    ['&Iota;', 'iota'],
                    ['&Kappa;', 'kappa'],
                    ['&Lambda;', 'lambda'],
                    ['&Mu;', 'mu'],
                    ['&Nu;', 'nu'],
                    ['&Xi;', 'xi'],
                    ['&Omicron;', 'omicron'],
                    ['&Pi;', 'pi'],
                    ['&Rho;', 'rho'],
                    ['&Sigma;', 'sigma'],
                    ['&Tau;', 'tau'],
                    ['&Upsilon;', 'upsilon'],
                    ['&Phi;', 'phi'],
                    ['&Chi;', 'chi'],
                    ['&Psi;', 'psi'],
                    ['&Omega;', 'omega']
                ]
            }
        }
    },

    applyAction: function(dialog) {
        this.raptor.actionApply(function() {
            if (insertCharacter) {
                selectionReplace(insertCharacter);
            }
            insertCharacter = false;
        });
    },

    /**
     * Prepare tabs and add buttons to tab content.
     *
     * @return {Element}
     */
    getDialogTemplate: function() {
        var html = $(this.raptor.getTemplate('special-characters.dialog')).appendTo('body').hide();
        var setKey, tabContent, character, characterButton;
        for (var setOrderIndex = 0; setOrderIndex < this.options.setOrder.length; setOrderIndex++) {
            setKey = this.options.setOrder[setOrderIndex];

            html.find('ul').append(this.raptor.getTemplate('special-characters.tab-li', {
                baseClass: this.options.baseClass,
                name: this.options.characterSets[setKey].name,
                key: setKey
            }));

            tabContent = $(this.raptor.getTemplate('special-characters.tab-content', {
                baseClass: this.options.baseClass,
                key: setKey
            }));
            var tabCharacters = [];
            for (var charactersIndex = 0; charactersIndex < this.options.characterSets[setKey].characters.length; charactersIndex++) {
                character = this.options.characterSets[setKey].characters[charactersIndex];
                characterButton = this.raptor.getTemplate('special-characters.tab-button', {
                    htmlEntity: character[0],
                    description: character[1],
                    setKey: setKey,
                    charactersIndex: charactersIndex
                });
                tabCharacters.push(characterButton);
            }
            tabContent.append(tabCharacters.join(''));
            html.find('ul').after(tabContent);
        }
        html.show();

        var _this = this;
        html.find('button').each(function() {
            aButton($(this));
        }).click(function() {
            var setKey = $(this).attr('data-setKey');
            var charactersIndex = $(this).attr('data-charactersIndex');
            insertCharacter = _this.options.characterSets[setKey].characters[charactersIndex][0];
            _this.getOkButton(_this.name).click.call(this);
        });
        aTabs(html);
        return html;
    },

    getCancelButton: function() {
        return;
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/special-characters/special-characters.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/statistics/statistics.js
/**
 * @fileOverview Contains the statistics code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

var statisticsDialog = null;

/**
 * Creates an instance of a dialog button to display the pages statistics.
 */
Raptor.registerUi(new DialogButton({
    name: 'statistics',
    options: {
        maximum: 100,
        showCountInButton: true
    },
    dialogOptions: {
        width: 350
    },

    init: function() {
        if (this.options.showCountInButton) {
            this.raptor.bind('change', this.updateButton.bind(this));
        }
        return DialogButton.prototype.init.apply(this, arguments);
    },

    applyAction: function() {
    },

    getCancelButton: function() {
    },

    getCharacterCount: function() {
        return $('<div>').html(this.raptor.getHtml()).text().trim().length;
    },

    getContent: function() {
        return $('<div>').html(this.raptor.getHtml()).text().trim();
    },

    updateButton: function() {
        var charactersRemaining = null,
            label = null,
            characterCount = this.getCharacterCount();

        // Cases where maximum has been provided
        if (this.options.maximum) {
            charactersRemaining = this.options.maximum - characterCount;
            if (charactersRemaining >= 0) {
                label = tr('statisticsButtonCharacterRemaining', {
                    charactersRemaining: charactersRemaining
                });
            } else {
                label = tr('statisticsButtonCharacterOverLimit', {
                    charactersRemaining: charactersRemaining * -1
                });
            }
        } else {
            label = tr('statisticsButtonCharacters', {
                characters: characterCount
            });
        }

        aButtonSetLabel(this.button, label);

        if (!this.options.maximum) {
            return;
        }

        // Add the error state to the button's text element if appropriate
        if (charactersRemaining < 0) {
            this.button.addClass('ui-state-error').removeClass('ui-state-default');
        } else{
            // Add the highlight class if the remaining characters are in the "sweet zone"
            if (charactersRemaining >= 0 && charactersRemaining <= 15) {
                this.button.addClass('ui-state-highlight').removeClass('ui-state-error ui-state-default');
            } else {
                this.button.removeClass('ui-state-highlight ui-state-error').addClass('ui-state-default');
            }
        }
    },

    getButton: function() {
        if (!this.button) {
            Button.prototype.getButton.call(this);
            aButton(this.button, {
                text: true
            });
            if (this.options.showCountInButton) {
                this.updateButton();
            }
        }
        return this.button;
    },

    getDialogTemplate: function() {
        return $(this.raptor.getTemplate('statistics.dialog', this.options));
    },

    /**
     * Process and return the statistics dialog template.
     *
     * @return {jQuery} The processed statistics dialog template
     */
    openDialog: function() {
        var dialog = this.getDialog(),
            content = this.getContent();

        // If maximum has not been set, use infinity
        var charactersRemaining = this.options.maximum ? this.options.maximum - content.length : '&infin;';
        if (typeIsNumber(charactersRemaining) && charactersRemaining < 0) {
            dialog.find('[data-name=truncation]').html(tr('statisticsDialogTruncated', {
                'limit': this.options.maximum
            }));
        } else {
            dialog.find('[data-name=truncation]').html(tr('statisticsDialogNotTruncated'));
        }

        var totalWords = content.split(' ').length;
        if (totalWords === 1) {
            dialog.find('[data-name=words]').html(tr('statisticsDialogWord', {
                words: totalWords
            }));
        } else {
            dialog.find('[data-name=words]').html(tr('statisticsDialogWords', {
                words: totalWords
            }));
        }

        var totalSentences = content.split('. ').length;
        if (totalSentences === 1) {
            dialog.find('[data-name=sentences]').html(tr('statisticsDialogSentence', {
                sentences: totalSentences
            }));
        } else {
            dialog.find('[data-name=sentences]').html(tr('statisticsDialogSentences', {
                sentences: totalSentences
            }));
        }

        var characters = null;
        if (charactersRemaining >= 0 || !typeIsNumber(charactersRemaining)) {
            dialog.find('[data-name=characters]').html(tr('statisticsDialogCharactersRemaining', {
                characters: content.length,
                charactersRemaining: charactersRemaining
            }));
        } else {
            dialog.find('[data-name=characters]').html(tr('statisticsDialogCharactersOverLimit', {
                characters: content.length,
                charactersRemaining: charactersRemaining * -1
            }));
        }
        DialogButton.prototype.openDialog.call(this);
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/statistics/statistics.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-cell-button.js
/**
 * @fileOverview Contains the table cell button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The table cell button class.
 *
 * @constructor
 * @augments FilteredPreviewButton
 *
 * @param {Object} options Options hash.
 */
function TableCellButton(options) {
    FilteredPreviewButton.call(this, options);
}

TableCellButton.prototype = Object.create(FilteredPreviewButton.prototype);

/**
 * @todo
 *
 * @param {RangySelection} range The selection to get the cell from.
 * @returns {Element|null}
 */
TableCellButton.prototype.getElement = function(range) {
    var cell = $(range.commonAncestorContainer.parentNode).closest('td, th');
    if (cell.length && !cell.find(this.raptor.getElement()).length) {
        return cell[0];
    }
    return null;
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-cell-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-create.js
/**
 * @fileOverview Contains the table menu class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The table menu class.
 *
 * @constructor
 * @augments Menu
 *
 * @param {Object} options Options hash.
 */
function TableMenu(options) {
    Menu.call(this, {
        name: 'tableCreate'
    });
}

TableMenu.prototype = Object.create(Menu.prototype);

/**
 * Creates the menu table.
 *
 * @param event The mouse event to create the table.
 */
TableMenu.prototype.createTable = function(event) {
    this.raptor.actionApply(function() {
        var table = tableCreate(event.target.cellIndex + 1, event.target.parentNode.rowIndex + 1, {
            placeHolder: '&nbsp;'
        });
        table.className = this.options.cssPrefix + 'table';
        selectionReplace(table);
    }.bind(this));
};

/**
 * Highlights the cells inside the table menu.
 *
 * @param event The mouse event to trigger the function.
 */
TableMenu.prototype.highlight = function(event) {
    var cells = tableCellsInRange(this.menuTable.get(0), {
            x: 0,
            y: 0
        }, {
            x: event.target.cellIndex,
            y: event.target.parentNode.rowIndex
        });

    // highlight cells in menu
    this.highlightRemove(event);
    $(cells).addClass(this.options.baseClass + '-menu-hover');

    // Preview create
    this.raptor.actionPreview(function() {
        var table = tableCreate(event.target.cellIndex + 1, event.target.parentNode.rowIndex + 1, {
            placeHolder: '&nbsp;'
        });
        table.className = this.options.cssPrefix + 'table';
        selectionReplace(table);
    }.bind(this));
};

/**
 * Removes the highlight from the table menu.
 *
 * @param event The mouse event to trigger the function.
 */
TableMenu.prototype.highlightRemove = function(event) {
    this.menuTable
        .find('.' + this.options.baseClass + '-menu-hover')
        .removeClass(this.options.baseClass + '-menu-hover');
    this.raptor.actionPreviewRestore();
};

/**
 * Prepares and returns the menu for use in the Raptor UI.
 * @returns {Element}
 */
TableMenu.prototype.getMenu = function() {
    if (!this.menu) {
        this.menuContent = this.raptor.getTemplate('table.create-menu', this.options);
        Menu.prototype.getMenu.call(this)
            .on('click', 'td', this.createTable.bind(this))
            .on('mouseenter', 'td', this.highlight.bind(this))
            .mouseleave(this.highlightRemove.bind(this));
        this.menuTable = this.menu.find('table:eq(0)');
    }
    return this.menu;
};

Raptor.registerUi(new TableMenu());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-create.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-delete-column.js
/**
 * @fileOverview Contains the delete column button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a table cell button to delete a column from a table.
 */
Raptor.registerUi(new TableCellButton({
    name: 'tableDeleteColumn',
    applyToElement: function(cell) {
        var position = tableGetCellIndex(cell),
            table = cell.parentNode.parentNode.parentNode,
            nextCell;
        tableDeleteColumn(cell.parentNode.parentNode.parentNode, position.x);
        if (tableIsEmpty(table)) {
            table.parentNode.removeChild(table);
            return;
        }
        nextCell = tableGetCellByIndex(table, position);
        if (!nextCell && position.x > 0) {
            nextCell = tableGetCellByIndex(table, {
                x: position.x - 1,
                y: position.y
            });
        }
        selectionSelectInner(nextCell);
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-delete-column.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-delete-row.js
/**
 * @fileOverview Contains the delete column button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a table cell button to delete a row from a table.
 */
Raptor.registerUi(new TableCellButton({
    name: 'tableDeleteRow',
    applyToElement: function(cell) {
        var position = tableGetCellIndex(cell),
            table = cell.parentNode.parentNode.parentNode,
            nextCell;
        tableDeleteRow(cell.parentNode.parentNode.parentNode, position.y);
        if (tableIsEmpty(table)) {
            table.parentNode.removeChild(table);
            return;
        }
        nextCell = tableGetCellByIndex(table, position);
        if (!nextCell && position.y > 0) {
            nextCell = tableGetCellByIndex(table, {
                x: position.x,
                y: position.y - 1
            });
        }
        selectionSelectInner(nextCell);
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-delete-row.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-insert-column.js
/**
 * @fileOverview Contains the insert column button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a table cell button to insert a column into a table.
 */
Raptor.registerUi(new TableCellButton({
    name: 'tableInsertColumn',
    applyToElement: function(cell) {
        tableInsertColumn(cell.parentNode.parentNode.parentNode, tableGetCellIndex(cell).x + 1, {
            placeHolder: '&nbsp;'
        });
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-insert-column.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-insert-row.js
/**
 * @fileOverview Contains the insert row button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a table cell button to insert a row into a table.
 */
Raptor.registerUi(new TableCellButton({
    name: 'tableInsertRow',
    applyToElement: function(cell) {
        tableInsertRow(cell.parentNode.parentNode.parentNode, tableGetCellIndex(cell).y + 1, {
            placeHolder: '&nbsp;'
        });
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-insert-row.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-merge-cells.js
/**
 * @fileOverview Contains the split cell button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a button to merge the selected cells of a table.
 */
Raptor.registerUi(new Button({
    name: 'tableMergeCells',
    action: function() {
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-merge-cells.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-split-cells.js
/**
 * @fileOverview Contains the split cells button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a button to split the selected cell of a table.
 */
Raptor.registerUi(new Button({
    name: 'tableSplitCells',
    action: function() {
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-split-cells.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-support.js
/**
 * @fileOverview Contains the table helper functions.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

var tableSupportDragging = false,
    tableSupportStartCell = null;

/**
 * The supporting table class.
 *
 * @constructor
 *
 * @augments RaptorPlugin
 *
 * @param {String} name
 * @param {Object} overrides Options hash.
 */
function TableSupport(name, overrides) {
    RaptorPlugin.call(this, name || 'tableSupport', overrides);
}

TableSupport.prototype = Object.create(RaptorPlugin.prototype);

/**
 * Initialize the table support class.
 */
TableSupport.prototype.init = function() {
    this.raptor.bind('selection-customise', this.selectionCustomise.bind(this));
    this.raptor.bind('insert-nodes', this.insertNodes.bind(this));
    this.raptor.registerHotkey('tab', this.tabToNextCell.bind(this));
    this.raptor.registerHotkey('shift+tab', this.tabToPrevCell.bind(this));
    this.raptor.getElement()
        .on('mousedown', 'tbody td', this.cellMouseDown.bind(this))
        .on('mouseover', 'tbody td', this.cellMouseOver.bind(this))
        .mouseup(this.cellMouseUp.bind(this));
};

/**
 * @todo i think this has something to do with the cell selection but i'm not sure
 * @returns {Range[]}
 */
TableSupport.prototype.selectionCustomise = function() {
    var ranges = [],
        range;
    $('.' + this.options.baseClass + '-cell-selected').each(function() {
        range = rangy.createRange();
        range.selectNodeContents(this);
        ranges.push(range);
    });
    return ranges;
};

TableSupport.prototype.insertNodes = function(nodes) {
    for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].tagName === 'TABLE') {
            nodes[i].classList.add(this.options.cssPrefix + 'table');
        }
    }
};

/**
 * Event handler for mouse down.
 *
 * @param event The mouse event to trigger the function.
 */
TableSupport.prototype.cellMouseDown = function(event) {
    if (this.raptor.isEditing()) {
        tableSupportStartCell = tableGetCellIndex(event.target);
        if (tableSupportStartCell !== null) {
            tableSupportDragging = true;
            $(event.target).closest('table').addClass(this.options.baseClass + '-selected');
        }
    }
};

/**
 * Event handler for mouse up.
 *
 * @param event The mouse event to trigger the function.
 */
TableSupport.prototype.cellMouseUp = function(event) {
    tableSupportDragging = false;
    var cell = $(event.target).closest('td'),
        deselect = false;
    if (cell.length > 0 && tableSupportStartCell !== null) {
        var index = tableGetCellIndex(cell.get(0));
        if (index === null ||
                (index.x == tableSupportStartCell.x &&
                index.y == tableSupportStartCell.y)) {
            deselect = true;
        }
    } else {
        deselect = true;
    }
    if (deselect) {
        $('.' + this.options.baseClass + '-selected').removeClass(this.options.baseClass + '-selected');
        $('.' + this.options.baseClass + '-cell-selected').removeClass(this.options.baseClass + '-cell-selected');
    }
};

/**
 * Event handler for mouse hover.
 *
 * @param event The mouse event to trigger the function.
 */
TableSupport.prototype.cellMouseOver = function(event) {
    if (tableSupportDragging) {
        var cells = tableCellsInRange($(event.target).closest('table').get(0), tableSupportStartCell, tableGetCellIndex(event.target));
        $('.' + this.options.baseClass + '-cell-selected').removeClass(this.options.baseClass + '-cell-selected');
        $(cells).addClass(this.options.baseClass + '-cell-selected');
        rangy.getSelection().removeAllRanges();
    }
};

/**
 * Handles tabbing to the next table cell.
 */
TableSupport.prototype.tabToNextCell = function() {
    var range = rangy.getSelection().getRangeAt(0),
        parent = rangeGetCommonAncestor(range),
        cell = $(parent).closest('td');
    if (cell.length === 0) {
        return false;
    }
    var next = cell.next('td');
    if (next.length === 0) {
        next = cell.closest('tr').next('tr').find('td:first');
        if (next.length === 0) {
            next = cell.closest('tbody').find('td:first');
        }
    }
    rangeSelectElementContent(range, next);
    rangy.getSelection().setSingleRange(range);
};

/**
 * Handles tabbing to the next table cell.
 */
TableSupport.prototype.tabToPrevCell = function() {
    var range = rangy.getSelection().getRangeAt(0),
        parent = rangeGetCommonAncestor(range),
        cell = $(parent).closest('td');
    if (cell.length === 0) {
        return false;
    }
    var prev = cell.prev('td');
    if (prev.length === 0) {
        prev = cell.closest('tr').prev('tr').find('td:last');
        if (prev.length === 0) {
            prev = cell.closest('tbody').find('td:last');
        }
    }
    rangeSelectElementContent(range, prev);
    rangy.getSelection().setSingleRange(range);
};

Raptor.registerPlugin(new TableSupport());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/table/table-support.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/tag-menu/tag-menu.js
/**
 * Tag menu plugin.
 *
 * @plugin SelectMenu tagMenu
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The tag menu class.
 *
 * @constructor
 * @augments SelectMenu
 *
 * @param {Object} options Options hash.
 */
function TagMenu(options) {
    this.options = {
        /**
         * List of tags and their translated name.
         * @option {Object.<string, string>} tags
         */
        tags: {
            na: tr('tagMenuTagNA'),
            p: tr('tagMenuTagP'),
            h1: tr('tagMenuTagH1'),
            h2: tr('tagMenuTagH2'),
            h3: tr('tagMenuTagH3'),
            h4: tr('tagMenuTagH4'),
            div: tr('tagMenuTagDiv'),
            pre: tr('tagMenuTagPre'),
            address: tr('tagMenuTagAddress')
        }
    };

    SelectMenu.call(this, {
        name: 'tagMenu'
    });
}

TagMenu.prototype = Object.create(SelectMenu.prototype);

/**
 * Initializes the tag menu.
 */
TagMenu.prototype.init = function() {
    this.raptor.bind('selectionChange', this.updateButton.bind(this));
    return SelectMenu.prototype.init.apply(this, arguments);
};

/**
 * Changes the tags on the selected element(s).
 *
 * @param {HTML} tag The new tag.
 */
TagMenu.prototype.changeTag = function(tag) {
    // Prevent injection of illegal tags
    if (typeof tag === 'undefined' || tag === 'na') {
        return;
    }

    var selectedElement = selectionGetElement(),
        limitElement = this.raptor.getElement();
    if (selectedElement && !selectedElement.is(limitElement)) {
        var cell = selectedElement.closest('td, li, #' + limitElement.attr('id'));
        if (cell.length !== 0) {
            limitElement = cell;
        }
    }

    selectionChangeTags(tag, [
        'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
        'p', 'div', 'pre', 'address'
    ], limitElement);
};

/**
 * Applies the tag change.
 *
 * @param event The mouse event to trigger the function.
 */
TagMenu.prototype.menuItemClick = function(event) {
    SelectMenu.prototype.menuItemClick.apply(this, arguments);
    this.raptor.actionApply(function() {
        this.changeTag($(event.currentTarget).data('value'));
    }.bind(this));
};

/**
 * Generates a preview state for a change of tag.
 *
 * @param event The mouse event to trigger the preview.
 */
TagMenu.prototype.menuItemMouseEnter = function(event) {
    this.raptor.actionPreview(function() {
        this.changeTag($(event.currentTarget).data('value'));
    }.bind(this));
};

/**
 * Restores the tag menu from it's preview state.
 *
 * @param event The mouse event to trigger the restoration of the tag menu.
 */
TagMenu.prototype.menuItemMouseLeave = function(event) {
    this.raptor.actionPreviewRestore();
};

/**
 * Updates the display of the tag menu button.
 */
TagMenu.prototype.updateButton = function() {
    var tag = selectionGetElements()[0],
        button = this.getButton().getButton();
    if (!tag) {
        return;
    }
    var tagName = tag.tagName.toLowerCase(),
        option = this.getMenu().find('[data-value=' + tagName + ']');
    if (option.length) {
        aButtonSetLabel(button, option.html());
    } else {
        aButtonSetLabel(button, tr('tagMenuTagNA'));
    }
//    if (this.raptor.getElement()[0] === tag) {
//        aButtonDisable(button);
//    } else {
//        aButtonEnable(button);
//    }
};

/**
 * Prepares and returns the menu items for use in the raptor UI.
 * @returns {String}
 */
TagMenu.prototype.getMenuItems = function() {
    var result = '';
    for (var tag in this.options.tags) {
        result += this.raptor.getTemplate('tag-menu.item', {
            tag: tag,
            name: this.options.tags[tag]
        });
    }
    return result;
};

Raptor.registerUi(new TagMenu());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/tag-menu/tag-menu.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/text-align-button.js
/**
 * @fileOverview Contains the text align button class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * The text align button class.
 *
 * @constructor
 * @augments PreviewToggleButton
 *
 * @param {Object} options Options hash.
 */
function TextAlignButton(options) {
    PreviewToggleButton.call(this, options);
}

TextAlignButton.prototype = Object.create(PreviewToggleButton.prototype);

TextAlignButton.prototype.action = function() {
    selectionToggleBlockClasses([
        this.getClass()
    ], [
        this.options.cssPrefix + 'center',
        this.options.cssPrefix + 'left',
        this.options.cssPrefix + 'right',
        this.options.cssPrefix + 'justify'
    ], this.raptor.getElement(), 'span');
    this.selectionChange();
};

TextAlignButton.prototype.selectionToggle = function() {
    return rangy.getSelection().getAllRanges().length > 0 &&
        selectionContains('.' + this.getClass(), this.raptor.getElement());
};;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/text-align-button.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/center.js
/**
 * @fileOverview Contains the center align button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a text align button to align text center.
 */
Raptor.registerUi(new TextAlignButton({
    name: 'alignCenter',
    getClass: function() {
        return this.options.cssPrefix + 'center';
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/center.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/justify.js
/**
 * @fileOverview Contains the justify text button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a text align button to justify text.
 */
Raptor.registerUi(new TextAlignButton({
    name: 'alignJustify',
    getClass: function() {
        return this.options.cssPrefix + 'justify';
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/justify.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/left.js
/**
 * @fileOverview Contains the left align button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a text align button to align text left.
 */
Raptor.registerUi(new TextAlignButton({
    name: 'alignLeft',
    getClass: function() {
        return this.options.cssPrefix + 'left';
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/left.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/right.js
/**
 * @fileOverview Contains the right align button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates a text align button to align text right.
 */
Raptor.registerUi(new TextAlignButton({
    name: 'alignRight',
    getClass: function() {
        return this.options.cssPrefix + 'right';
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-align/right.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/bold.js
/**
 * @fileOverview Contains the bold button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the CSS applier button to apply the bold class to a selection.
 */
Raptor.registerUi(new CSSClassApplierButton({
    name: 'textBold',
    hotkey: 'ctrl+b',
    tag: 'strong',
    classes: ['bold']
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/bold.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/italic.js
/**
 * @fileOverview Contains the italic button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the CSS applier button to apply the italic class to a
 * selection.
 */
Raptor.registerUi(new CSSClassApplierButton({
    name: 'textItalic',
    hotkey: 'ctrl+i',
    tag: 'em',
    classes: ['italic']
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/italic.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/strike.js
/**
 * @fileOverview Contains the strike button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the CSS applier button to apply the strike class to a
 * selection.
 */
Raptor.registerUi(new CSSClassApplierButton({
    name: 'textStrike',
    tag: 'del',
    classes: ['strike']
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/strike.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/block-quote.js
/**
 * @fileOverview Contains the block quote button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the preview toggle button to insert a block quote.
 */
Raptor.registerUi(new Button({
    name: 'textBlockQuote',
    action: function() {
        document.execCommand('formatBlock', false, '<blockquote>');
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/block-quote.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/size-decrease.js
/**
 * @fileOverview Contains the text size decrease button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the preview button to apply the text size decrease
 * class to a selection.
 */
Raptor.registerUi(new PreviewButton({
    name: 'textSizeDecrease',
    action: function() {
        selectionExpandToWord();
        this.raptor.selectionConstrain();
        selectionInverseWrapWithTagClass('small', this.options.cssPrefix + 'small', 'big', this.options.cssPrefix + 'big');
        this.raptor.getElement().find('small.' + this.options.cssPrefix + 'small:empty, big.' + this.options.cssPrefix + 'big:empty').remove();
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/size-decrease.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/size-increase.js
/**
 * @fileOverview Contains the text size increase button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the preview button to apply the text size increase
 * class to a selection.
 */
Raptor.registerUi(new PreviewButton({
    name: 'textSizeIncrease',
    action: function() {
        selectionExpandToWord();
        this.raptor.selectionConstrain();
        selectionInverseWrapWithTagClass('big', this.options.cssPrefix + 'big', 'small', this.options.cssPrefix + 'small');
        this.raptor.getElement().find('small.' + this.options.cssPrefix + 'small:empty, big.' + this.options.cssPrefix + 'big:empty').remove();
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/size-increase.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/underline.js
/**
 * @fileOverview Contains the underline button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the CSS applier button to apply the underline class to a selection.
 */
Raptor.registerUi(new CSSClassApplierButton({
    name: 'textUnderline',
    hotkey: 'ctrl+u',
    tag: 'u',
    classes: ['underline']
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/underline.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/sub.js
/**
 * @fileOverview Contains the subscript button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the CSS applier button to apply the subscript class to
 * a selection.
 */
Raptor.registerUi(new CSSClassApplierButton({
    name: 'textSub',
    tag: 'sub',
    classes: ['sub']
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/sub.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/super.js
/**
 * @fileOverview Contains the superscript button code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the CSS applier button to apply the superscript class
 * to a selection.
 */
Raptor.registerUi(new CSSClassApplierButton({
    name: 'textSuper',
    tag: 'sup',
    classes: ['sup']
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/text-style/super.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/tool-tip/tool-tip.js
/**
 * @fileOverview Stylised tooltip plugin.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen david@panmedia.co.nz
 */
function ToolTipPlugin(name, overrides) {
    RaptorPlugin.call(this, name || 'toolTip', overrides);
}

ToolTipPlugin.prototype = Object.create(RaptorPlugin.prototype);

ToolTipPlugin.prototype.init = function() {
    this.raptor.bind('layoutReady', function(node) {
        $(node)
            .on('mouseover', '[title]', function(event) {
                $(this)
                    .attr('data-title', $(this).attr('title'))
                    .removeAttr('title');
            });
    });
};

Raptor.registerPlugin(new ToolTipPlugin());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/tool-tip/tool-tip.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/unsaved-edit-warning/unsaved-edit-warning.js
/**
 * @fileOverview Contains the unsaved edit warning plugin class code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

var unsavedEditWarningDirty = 0,
    unsavedEditWarningElement = null;

/**
 * The unsaved edit warning plugin.
 *
 * @constructor
 * @augments RaptorPlugin
 *
 * @param {String} name
 * @param {Object} overrides Options hash.
 */
function UnsavedEditWarningPlugin(name, overrides) {
    RaptorPlugin.call(this, name || 'unsavedEditWarning', overrides);
}

UnsavedEditWarningPlugin.prototype = Object.create(RaptorPlugin.prototype);

/**
 * Enables the unsaved edit warning plugin.
 *
 * @todo raptor details
 * @param {type} raptor
 */
UnsavedEditWarningPlugin.prototype.enable = function(raptor) {
    this.raptor.bind('dirty', this.show.bind(this));
    this.raptor.bind('cleaned', this.hide.bind(this));
};

/**
 * Shows the unsaved edit warning.
 */
UnsavedEditWarningPlugin.prototype.show = function() {
    unsavedEditWarningDirty++;
    elementBringToTop(this.getElement());
    this.getElement().addClass(this.options.baseClass + '-visible');
};

/**
 * Hides the unsaved edit warning.
 *
 * @param event The mouse event that triggers the function.
 */
UnsavedEditWarningPlugin.prototype.hide = function(event) {
    if (--unsavedEditWarningDirty === 0) {
        this.getElement().removeClass(this.options.baseClass + '-visible');
    }
};

/**
 * Prepares and returns the unsaved edit warning element for use in the Raptor UI.
 *
 * @todo instance details
 * @param {type} instance
 * @returns {Element}
 */
UnsavedEditWarningPlugin.prototype.getElement = function() {
    if (!unsavedEditWarningElement) {
        var dirtyClass = 'raptor-plugin-unsaved-edit-warning-dirty';
        unsavedEditWarningElement = $(this.raptor.getTemplate('unsaved-edit-warning.warning', this.options))
            .mouseenter(function() {
                Raptor.eachInstance(function(raptor) {
                    if (raptor.isDirty()) {
                        raptor.getElement().addClass(dirtyClass);
                    }
                });
            })
            .mouseleave(function() {
                $('.' + dirtyClass).removeClass(dirtyClass);            })
            .appendTo('body');
    }
    return unsavedEditWarningElement;
};

Raptor.registerPlugin(new UnsavedEditWarningPlugin());
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/unsaved-edit-warning/unsaved-edit-warning.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/view-source/view-source.js
/**
 * @fileOverview Contains the view source dialog code.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * Creates an instance of the dialog button to open the view source dialog.
 */
Raptor.registerUi(new DialogButton({
    name: 'viewSource',
    dialogOptions: {
        width: 600,
        height: 400,
        minWidth: 400,
        minHeight: 400
    },

    /**
     * Replace the editing element's content with the HTML from the dialog's textarea
     *
     * @param  {Element} dialog
     */
    applyAction: function(dialog) {
        var html = dialog.find('textarea').val();
        this.raptor.actionApply(function() {
            this.raptor.setHtml(html);
            selectionSelectStart(this.raptor.getElement().first());
            this.raptor.checkSelectionChange();
        }.bind(this));
    },

    /**
     * Update the dialog's text area with the current HTML.
     */
    openDialog: function() {
        var textarea = this.getDialog().find('textarea');
        textarea.val(this.raptor.getHtml());
        DialogButton.prototype.openDialog.call(this);
        textarea.select();
    },

    /**
     * @return {Element}
     */
    getDialogTemplate: function() {
        return $('<div>').html(this.raptor.getTemplate('view-source.dialog', this.options));
    }
}));
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/plugins/view-source/view-source.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/base.js
/**
 * @fileOverview Default options for Raptor.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @namespace Default options for Raptor.
 */
Raptor.globalDefaults = {
    /**
     * @type Object Default layouts to use.
     */
    layouts: {},

    /**
     * Plugins option overrides.
     *
     * @type Object
     */
    plugins: {},

    /**
     * UI option overrides.
     *
     * @type Object
     */
    ui: {},

    /**
     * Default events to bind.
     *
     * @type Object
     */
    bind: {},

    /**
     * Namespace used for persistence to prevent conflicting with other stored
     * values.
     *
     * @type String
     */
    namespace: null,

    /**
     * Switch to indicated that some events should be automatically applied to
     * all editors that are 'unified'
     *
     * @type boolean
     */
    unify: true,

    /**
     * Switch to indicate whether or not to stored persistent values, if set to
     * false the persist function will always return null
     *
     * @type boolean
     */
    persistence: true,

    /**
     * The name to store persistent values under
     * @type String
     */
    persistenceName: 'uiEditor',

    /**
     * Switch to indicate whether or not to a warning should pop up when the
     * user navigates aways from the page and there are unsaved changes
     *
     * @type boolean
     */
    unloadWarning: true,

    /**
     * Switch to automatically enabled editing on the element
     *
     * @type boolean
     */
    autoEnable: false,

    /**
     * Only enable editing on certian parts of the element
     *
     * @type {jQuerySelector}
     */
    partialEdit: false,

    /**
     * Automatically select the editable content when editing is enabled.
     *
     * @type boolean
     */
    autoSelect: 'end',

    /**
     * Switch to specify if the editor should automatically enable all plugins,
     * if set to false, only the plugins specified in the 'plugins' option
     * object will be enabled
     *
     * @type boolean
     */
    enablePlugins: true,

    /**
     * An array of explicitly disabled plugins.
     *
     * @type String[]
     */
    disabledPlugins: [],

    /**
     * Switch to specify if the editor should automatically enable all UI, if
     * set to false, only the UI specified in the {@link Raptor.defaults.ui}
     * option object will be enabled
     *
     * @type boolean
     */
    enableUi: true,

    /**
     * An array of explicitly disabled UI elements.
     *
     * @type String[]
     */
    disabledUi: [],

    /**
     * Switch to indicate that the element the editor is being applied to should
     * be replaced with a div (useful for textareas), the value/html of the
     * replaced element will be automatically updated when the editor element is
     * changed
     *
     * @type boolean
     */
    replace: false,

    /**
     * A list of styles that will be copied from the replaced element and
     * applied to the editor replacement element
     *
     * @type String[]
     */
    replaceStyle: [
        'display', 'position', 'float', 'width',
        'padding-left', 'padding-right', 'padding-top', 'padding-bottom',
        'margin-left', 'margin-right', 'margin-top', 'margin-bottom'
    ],

    /**
     *
     * @type String
     */
    baseClass: 'raptor',

    /**
     * CSS class prefix that is prepended to inserted elements classes.
     * E.g. "cms-bold"
     *
     * @type String
     */
    cssPrefix: 'cms-',

    draggable: true
};
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/base.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/full.js
/**
 * @fileOverview Contains the full options preset.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 * @author Michael Robinson <michael@panmedia.co.nz>
 * @author Melissa Richards <melissa@panmedia.co.nz>
 */

/**
 * @namespace Full options for Raptor.
 */
Raptor.registerPreset({
    name: 'full',
    plugins: {
        imageSwap: {
            chooser: 'insertFile'
        }
    },
    layouts: {
        toolbar: {
            uiOrder: [
                ['logo'],
                ['save', 'cancel'],
                ['dockToScreen', 'dockToElement', 'guides'],
                ['viewSource'],
                ['historyUndo', 'historyRedo'],
                ['alignLeft', 'alignCenter', 'alignJustify', 'alignRight'],
                ['textBold', 'textItalic', 'textUnderline', 'textStrike'],
                ['textSuper', 'textSub'],
                ['listUnordered', 'listOrdered'],
                ['hrCreate', 'textBlockQuote'],
                ['textSizeDecrease', 'textSizeIncrease', 'fontFamilyMenu'],
                ['clearFormatting', 'cleanBlock'],
                ['linkCreate', 'linkRemove'],
                ['embed', 'insertFile'],
                ['floatLeft', 'floatNone', 'floatRight'],
                ['colorMenuBasic'],
                ['tagMenu'],
                ['classMenu'],
                ['snippetMenu', 'specialCharacters'],
                ['tableCreate', 'tableInsertRow', 'tableDeleteRow', 'tableInsertColumn', 'tableDeleteColumn'],
                ['languageMenu'],
                ['statistics']
            ]
        },
        hoverPanel: {
            uiOrder: [
                ['clickButtonToEdit']
            ]
        },
        elementHoverPanel: {
            elements: 'img',
            uiOrder: [
                ['imageResize', 'imageSwap', 'close']
            ]
        }
    }
}, true);
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/full.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/micro.js
/**
 * @fileOverview Contains the micro options preset.
 * @license http://www.raptor-editor.com/license
 * @author David Neilsen <david@panmedia.co.nz>
 */

/**
 * @namespace Micro options for Raptor.
 */
Raptor.registerPreset({
    name: 'micro',
    layouts: {
        toolbar: {
            uiOrder: [
                ['logo'],
                ['save', 'cancel'],
                ['dockToScreen', 'dockToElement'],
                ['historyUndo', 'historyRedo'],
                ['specialCharacters'],
                ['languageMenu'],
                ['statistics']
            ]
        },
        hoverPanel: {
            uiOrder: [
                ['clickButtonToEdit', 'revisions']
            ]
        }
    },
    plugins: {
        placeholder: false,
        paste: {
            panels: [
                'plain-text'
            ]
        },
        noBreak: {
            enabled: true
        }
    }
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/micro.js
;
// File start: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/inline.js
/**
 * @fileOverview Contains the inline preset.
 * @license http://www.raptor-editor.com/license
 *
 * @author David Neilsen <david@panmedia.co.nz>
 */

/**
 * @namespace Inline preset for Raptor.
 */
Raptor.registerPreset({
    name: 'inline',
    classes: 'raptor-editing-inline',
    autoEnable: true,
    draggable: false,
    unify: false,
    unloadWarning: false,
    reloadOnDisable: true,
    plugins: {
        unsavedEditWarning: false,
        dock: {
            dockToElement: true,
            docked: true,
            persist: false
        }
    },
    layouts: {
        toolbar: {
            uiOrder: [
                ['textBold', 'textItalic', 'textUnderline', 'textStrike'],
                ['colorMenuBasic'],
                ['textBlockQuote'],
                ['listOrdered', 'listUnordered'],
                ['textSizeDecrease', 'textSizeIncrease'],
                ['linkCreate', 'linkRemove']
            ]
        }
    }
});
;
// File end: /var/deployments/www.raptor-editor.com.3/raptor-gold/raptor-editor/src/presets/inline.js
})();